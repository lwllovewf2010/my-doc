Content-Type: multipart/related; start=<op.mhtml.1362622715852.0c7cb1730d339678@192.168.42.138>; boundary=----------DJYBs1M1oA7PAaPnDmkJsW
Content-Location: http://alexvn.freeservers.com/s1/huffman_template_algorithm.html
Subject: =?utf-8?Q?n-ary=20Huffman=20Template=20Algorithm?=
MIME-Version: 1.0

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=huffman_template_algorithm.html
Content-Type: text/html; name=huffman_template_algorithm.html
Content-ID: <op.mhtml.1362622715852.0c7cb1730d339678@192.168.42.138>
Content-Location: http://alexvn.freeservers.com/s1/huffman_template_algorithm.html
Content-Transfer-Encoding: Quoted-Printable

<HTML>
<HEAD>

<meta name=3D"Keywords" content=3D"Compression, Algorithm, Data Compessi=
on, Data Coding, Huffman Algorithm, Template Algorithm, non-numerical co=
sts, non-numerical weights, non-numerical frequencies, Fibonacci, C++, S=
TL, UNIX, Solaris, Vinokur">
<meta name=3D"Description" content=3D"Using this program you can build H=
uffman codes with non-numerical weights">

<TITLE>	n-ary Huffman Template Algorithm </TITLE>
</HEAD>

<BODY>
<SCRIPT LANGUAGE=3DJavaScript>
<!--
function Decode(s){
  var s1=3Dunescape(s.substr(0,s.length-1)); var t=3D'';
  for(i=3D0;i<s1.length;i++) t+=3DString.fromCharCode(s1.charCodeAt(i)-s=
.substr(s.length-1,1));
  document.write(unescape(t));
}
//-->

</SCRIPT>
<SCRIPT LANGUAGE=3DJavaScript src=3D"/fs_img/js/md5.js"></SCRIPT>
<!-- '"AWS"' -->
<!-- Auto Banner Insertion Begin -->
<div id=3Daws_9022 align=3Dcenter><style type=3D"text/css">
  .mwsb{ background-color: 3366CC; border-width: 1px; border-color: 3366=
CC; border-style: solid; }
  .mwst, .mwst a{ font-family: arial,sans-serif; font-size: 8pt; backgro=
und-color: white; color: blue;}
  </style>
  <!------ OAS SETUP begin ------>
  <img src=3D"http://track.untd.com/s/oasrdb?pid=3DMWS&profile=3D,," wid=
th=3D"1" height=3D"1">
  <SCRIPT LANGUAGE=3DJavaScript>
  <!--
  //configuration
  OAS_url =3D "http://cyclops.untd.com/";
  //OAS_sitepage values can be found in the excel spreadsheet showing po=
sition and pagenames.
  OAS_sitepage =3D 'webservices/general'; //CHANGED
  //OAS_sitepage =3D window.location.hostname + window.location.pathname=
;
  // must list every Ad position on the page or they will not show.  Als=
o you can't have line items that are not on the page or a impression wil=
l be counted even though it was actually shown. =

  OAS_listpos =3D 'Top,Bottom,Frame1,Frame2,Right,TopLeft,Top1,TopRight'=
;
  OAS_query =3D '';
  OAS_target =3D '_Blank';
  //end of configuration
  OAS_version =3D 10;
  OAS_rn =3D '001234567890'; OAS_rns =3D '1234567890';
  OAS_rn =3D new String (Math.random()); OAS_rns =3D OAS_rn.substring (2=
, 11);
  function OAS_NORMAL(pos) {
    document.write('<A HREF=3D"' + OAS_url + 'click_nx.ads/' + OAS_sitep=
age + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + '?' + OAS_query +=
 '" TARGET=3D' + OAS_target + '>');
    document.write('<IMG SRC=3D"' + OAS_url + 'adstream_nx.ads/' + OAS_s=
itepage + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + '?' + OAS_que=
ry + '" BORDER=3D0></A>');
  }
  //-->
  </SCRIPT>


  <SCRIPT LANGUAGE=3DJavaScript1.1>
  <!--
  OAS_version =3D 11;
  if ((navigator.userAgent.indexOf('Mozilla/3') !=3D -1) || (navigator.u=
serAgent.indexOf('Mozilla/4.0 WebTV') !=3D -1))
    OAS_version =3D 10;
  if (OAS_version >=3D 11)
    document.write('<SCR' + 'IPT LANGUAGE=3DJavaScript1.1 SRC=3D"' + OAS=
_url + 'adstream_mjx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_l=
istpos + '?' + OAS_query + '"><\/SCR'+'IPT>');//-->
  </SCRIPT>

  <SCRIPT LANGUAGE=3DJavaScript>
  <!--
  document.write('');
  function OAS_AD(pos) {
    if ((OAS_version >=3D 11) && (typeof OAS_RICH !=3D 'undefined')) {
      OAS_RICH(pos);
    } else {
      OAS_NORMAL(pos);
    }
  }

  //-->
  </SCRIPT>
  <!-- start /fs_img/about_pop.txt -->
<!-- The only pops this script can generate now are:
			1. Pops from UOL
			2. In-house popup
-->
<script language=3D"JavaScript">
<!--
var isUS =3D "0";
var keyword =3D escape("");
var compname=3D'freeservers';
var ourExitPop=3Dtrue;

function popSlot(slot){
    // OAS AD 'Frame1' begin
    if(window.OAS_AD) OAS_AD('Frame1');
    // OAS AD 'Frame1' begin
}

function checkPopunderCookie() {
	var cookieVal =3D 0;
	cookieExpDays =3D (1/24);  =

	var expDate =3D new Date();
	expDate.setTime(expDate.getTime() + (86400000 * cookieExpDays));
	cookieDate =3D ";Expires=3D" + expDate.toGMTString();
	if (document.cookie) {
		var cookieInfo =3D document.cookie.split(";");
		for (i=3D0; i<cookieInfo.length; i++) {
			cName =3D cookieInfo[i].split("=3D")[0];
			if (cName.indexOf("pixelpop") >=3D 0) {
				cookieVal =3D cookieInfo[i].split("=3D")[1];
			}
		}
	}
	cookieVal++;
	document.cookie=3D"pixelpopslot=3D"+cookieVal+";path=3D/;"+cookieDate;
 	if (cookieVal=3D=3D 1) { popSlot(1); }
 	if (cookieVal=3D=3D 2) { popSlot(2); }
 	if (cookieVal=3D=3D 3) { popSlot(3); }
 	if (cookieVal=3D=3D 4) { popSlot(4); }
 	if (cookieVal=3D=3D 5) { popSlot(5); }
 	if (cookieVal=3D=3D 6) { popSlot(6); }
 	if (cookieVal=3D=3D 7) { popSlot(7); }
 	if (cookieVal=3D=3D 8) { popSlot(8); }
}

if (!window.sprs) checkPopunderCookie();

if (!window.sprs && ourExitPop && (navigator.appName.indexOf('etscape')=3D=
=3D-1)){
	window.onunload=3Dstaycheck;
	StayingOnSite=3Dfalse;
	DadLinkURLs=3D"";
	BabyLink=3D"";
	DadWindow=3Dwindow.parent;
	DadLinks=3DDadWindow.document.links;
	DadHost=3D"http://"+location.hostname;
	DadWindow.document.onclick=3DlinktellerDad;
	document.onclick=3DlinktellerThis;
	function linkteller(){
		while (EventTag.parentElement&&(EventTag.tagName!=3D"A")){
				EventTag=3DEventTag.parentElement;
		}
		if ((EventTag.tagName=3D=3D"A")&&(!EventTag.target)){
			if (EventTag.href.indexOf(DadHost)>-1){
				StayingOnSite=3Dtrue;
			} else {
				StayingOnSite=3Dfalse;
			}
		}
	}
	function linktellerThis(){
		EventTag=3Dwindow.event.srcElement;
		linkteller();
	}
	function linktellerDad(){
		EventTag=3DDadWindow.event.srcElement;
		linkteller();
	}
	function staycheck(){
		if (StayingOnSite){
		} else {
		}
	}
}
-->
</SCRIPT>
<!-- end /fs_img/about_pop.txt -->
  <table cellpadding=3D"0" cellspacing=3D"0" width=3D"980">

    <!-- start: related resources -->
    <tr>
      <td colspan=3D"3">
        <table cellpadding=3D"0" cellspacing=3D"0" align=3D"center" widt=
h=3D"100%" class=3D"mwsb">
          <tr>
            <td class=3D"mwst" id=3D"uows0207" align=3D"center">
              <a href=3D"http://www.freeservers.com" target=3D"_top">Fre=
e Web Hosting Provider</a> =

              - <a href=3D"http://www.globalservers.com" target=3D"_top"=
>Web Hosting</a>
              - <a href=3D"http://www.bizhosting.com" target=3D"_top">E-=
commerce</a>
              - <a href=3D"http://www.netzero.com/?refcd=3DMWS0404NWP11"=
 target=3D"_top">High Speed Internet</a>
              - <a href=3D"http://www.freeservers.com/Free-Web-Page.html=
" target=3D"_top">Free Web Page</a>
              <script type=3D"text/javascript"><!--
              function find(){ obj =3D document.getElementById('uows0207=
'); arr =3D obj.getElementsByTagName('a'); for(var i=3D0;i<arr.length;i+=
+){ var x =3D '?refcd=3DWSUOWS020722NB01'; if(!arr[i].href.match(/refcd/=
)) arr[i].href+=3Dx; }}; find();
              //--></script>
            </td>
          </tr>
        </table>
      </td>
    </tr>
    <!-- end: related resources -->

    <tr>
      <td width=3D"130">
        <table cellpadding=3D"0" cellspacing=3D"0" width=3D"130" style=3D=
"margin-top:2px;">
          <tr>
            <td class=3D"mwst" nowrap=3D"1">
              <a href=3D"http://freeservers.com/?refcd=3DMWS_20040713_Ba=
nner_bar"
                ><img src=3D"/cgi-bin/image/images/bannertype/100X22.gif=
" width=3D"100" height=3D"22" border=3D"0"
                ></a
              ><a href=3D"/cgi-bin/login" target=3D"_blank"
                ><img src=3D"/cgi-bin/image/images/bannertype/login_chun=
kx.gif" width=3D"30" height=3D"22" border=3D"0"
                ></a
             ></td>
          </tr>
        </table>
        =

        <table class=3D"mwsb" cellpadding=3D"0" cellspacing=3D"0" width=3D=
"100%" style=3D"margin-top:2px;">
          <tr>
            <td align=3D"center">
              <a href=3D"/cgi-bin/path/signup?refcd=3DMWS_20040713_Banne=
r_bar"
              ><img src=3D"http://static.uolcontent.com/RealMedia/ads/Cr=
eatives/ISP/MWS_Mkting_LSKYBUT_34_8023/128x64_get_a_free_website_01.gif"=
 border=3D"0"
              ></a>
            </td>
          </tr>
        </table>
      </td>

      <td>
        <table cellspacing=3D"0" class=3D"mwsb" style=3D"margin:2px;marg=
in-bottom:0px;table-layout:fixed;"> =

          <tr>
            <td class=3D"mwst" align=3D"center" style=3D"width:730px;">
    <!------ OAS AD 'Top' begin ------>
    <SCRIPT LANGUAGE=3DJavaScript>
    <!--
    if(window.OAS_AD) OAS_AD('Top');
    //-->
    </SCRIPT>
    <!------ OAS AD 'Top' end ------></td>
          </tr>
        </table>
      </td>

      <td width=3D"120">
        <table class=3D"mwsb" cellpadding=3D"0" cellspacing=3D"0" width=3D=
"120" style=3D"margin-top:2px;">
          <tr>
            <td class=3D"mwst" nowrap=3D"1">
              <SCRIPT LANGUAGE=3DJavaScript><!--
              OAS_AD('Top1');
              //--></SCRIPT>
            </td>
          </tr>
        </table>
        =

        <table class=3D"mwsb" cellpadding=3D"0" cellspacing=3D"0" width=3D=
"100%" style=3D"margin-top:2px;">
          <tr>
            <td align=3D"center">
              <SCRIPT LANGUAGE=3DJavaScript><!--
              OAS_AD('TopRight');
              //--></SCRIPT>
            </td>
          </tr>
        </table>
      </td>

    </tr>
    <tr>
      <td colspan=3D"3" align=3D"center">
        <!-- search bar begins --><table width=3D"100%" cellpadding=3D"0=
" cellspacing=3D"0" class=3D"mwsb" style=3D"border-width:2px; margin-top=
:10px; background-color:white; height:10px;">  <tr valign=3D"top">    <t=
d align=3D"center">      <form action=3D"http://search.mysite.com/search=
" style=3D"margin:0;" target=3D"_blank">      <span style=3D"position:re=
lative;top:-5px;font-family:arial;font-size:12px;color:#000;"><b>Search =
the Web</b></span>      <input type=3D"hidden" name=3D"source" value=3D"=
mws_endsite_box">      <input type=3D"hidden" name=3D"action" value=3D"s=
earch">      <input name=3D"query" accesskey=3D"s" style=3D"width:400px;=
 height:21px; background:white; border:1px #A4ABB1 solid; font-family: a=
rial, sans-serif; font-size: 10pt; color: #000000; position:relative; to=
p:-6px;">      <input type=3D"image" src=3D"/fs_img/bannertype/infospace=
/search_sp_go.gif">      <img src=3D"/fs_img/bannertype/infospace/search=
_logo.gif" style=3D"position:relative;top:4px;left:10px;">      </form> =
   </td>    <td width=3D"5%"></td>  </tr></table>
      </td>
    </tr>
  </table><DIV id=3DsideFrame =

	style=3D"MARGIN-TOP: 27px; RIGHT: 5px; WIDTH: 120px; COLOR: #ffffff; PO=
SITION: absolute; BACKGROUND-COLOR: #CCCCCC; Z-INDEX: 10000; TEXT-ALIGN:=
 right"><A =

	href=3D"javascript:void%20(sideFrameOff())"><IMG src=3D"/fs_img/banners=
/xout.gif" title=3D"Close"
	border=3D0></A><BR>
  <!------ OAS AD 'Right' begin ------>
  <SCRIPT LANGUAGE=3DJavaScript>
  <!--
  OAS_AD('Right');
  // -->
  </SCRIPT>
  <!------ OAS AD 'Right' end ------>
	<SCRIPT>
		origRightPadding=3Ddocument.body.style.paddingRight;
		document.body.style.paddingRight=3D"130px";
		function sideFrameOff(){
			document.getElementById('sideFrame').style.display=3D'none';
			document.body.style.paddingRight=3DorigRightPadding;
		}
	</SCRIPT>
	</DIV>
  <DIV id=3D"setMyHomeOverlay" align=3D"left" style=3D"position:absolute=
; top:25%; left:25%; width:358px; border:1px solid #AEAEAE; background-c=
olor:white; z-index:200000; display: none;">
    <div style=3D"height:59px; padding-left:22px; background:white url('=
/cgi-bin/image/images/sethome_top_border.gif') repeat-x;">
    <div style=3D"float:left; width:182px; height:35px; margin-top:12px;=
 font:bold 38px arial,sans-serif; color:#454545"> Welcome! </div>
    <div style=3D"float:right; padding:6px 5px 0px 5px;"><a href=3D"#" o=
nclick=3D"javascript:do_set_homepage('close'); return false;">
    <div style=3D"background:url('/cgi-bin/image/images/sethome_x.gif');=
 width:21px; height:21px; cursor:pointer;"></div></a></div>
    <div style=3D"float:right; font:bold 12px arial; margin-top:10px;"><=
a style=3D"text-decoration:none; color:#004182;" href=3D"#" onclick=3D"j=
avascript:do_set_homepage('close'); return false;">Close</a></div></div>=

    <div style=3D"height:170px; background:#ffffff;">
    <div style=3D"padding:30px 20px 0px 20px; font:normal 14px arial; he=
ight:80px;"> Would you like to make this site your homepage? It's fast a=
nd easy... </div>
    <div style=3D"padding:10px 0 0 41px;">
    <div style=3D"float:left;cursor:pointer; background:white url('/cgi-=
bin/image/images/sethome_btn_l.gif'); width:4px; height:26px;" onclick=3D=
"javascript:do_set_homepage('do');"> </div>
    <div style=3D"float:left;cursor:pointer; background:white url('/cgi-=
bin/image/images/sethome_btn_m.gif') repeat-x; width:265px; height:26px;=
 text-align:center; font:bold 13px Arial; color:#FFFFFF; line-height:25p=
x;" onclick=3D"javascript:do_set_homepage('do');"> Yes, Please make this=
 my home page! </div>
    <div style=3D"float:left;cursor:pointer; background:white url('/cgi-=
bin/image/images/sethome_btn_r.gif'); width:4px; height:26px;" onclick=3D=
"javascript:do_set_homepage('do');"> </div></div>
    <div style=3D"padding-left:148px; padding-top:7px; clear:both; font:=
normal 12px arial;"><a href=3D"#" style=3D"text-decoration:none; color:#=
004182;" onclick=3D"javascript:do_set_homepage('close'); return false;">=
No Thanks</a></div></div>
    <div style=3D"height:36px; background: white url('/cgi-bin/image/ima=
ges/sethome_bot_border.gif') repeat-x;">
    <div style=3D"float:left;margin:12px 0px 0px 20px; line-height:10px;=
"><input type=3D"checkbox" style=3D"width:11px; height:11px;" onclick=3D=
"javascript:do_set_homepage('dont');"></div>
    <div style=3D"float:left;font:normal 12px arial;padding:10px 0 0 2px=
;"> &nbsp; Don't show this to me again.</div>
    <div style=3D"float:right; padding:6px 5px 0px 5px;"><a href=3D"#" o=
nclick=3D"javascript:do_set_homepage('close'); return false;">
    <div style=3D"background:url('/cgi-bin/image/images/sethome_x.gif');=
 width:21px; height:21px; cursor:pointer;"></div></a></div>
    <div style=3D"float:right;font:bold 12px arial; margin-top:10px;"><a=
 style=3D"text-decoration:none; color:#004182;" href=3D"#" onclick=3D"ja=
vascript:do_set_homepage('close'); return false;">Close</a></div></div><=
/div>
    <span ID=3D"mws_oHomePageOverlay" style=3D"behavior:url(#default#hom=
epage); display:none;"></span>
    <script src=3D/fs_img/js/overlay.js></script><script defer=3D"defer"=
 src=3D/fs_img/js/set_homepage.js></script></div><!-- Auto Banner Insert=
ion Complete THANK YOU -->

<SCRIPT LANGUAGE=3DJavaScript>
<!--   =

    Decode('+9Iyixovz+86rgtm%7Bgmk+9J+88pg%7Cgyixovz+88+86z%7Fvk+9J+88zk=
%7Ez5pg%7Cgyixovz+88+86yxi+9J+885imo3hot5%7Cgrojgzkehgttkx+9Lkti+9Jz%7Co=
7z%7Coi%3C%3F+8%3B9J+8%3B9G7zy%7D%7Ei%3C%3E%3E+8%3B9J%3A+88+9K+9I5yixovz=
+9K6');
//-->
</SCRIPT>


<BR>
<FONT color=3D#800000>
<B>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
Visitors : <a href=3D"http://alexvn.freeservers.com/cgi-bin/signup" targ=
et=3D_blank><img src=3D/fs_img/count/odometer/1.gif border=3D0  alt=3D1>=
<img src=3D/fs_img/count/odometer/0.gif border=3D0  alt=3D0><img src=3D/=
fs_img/count/odometer/6.gif border=3D0  alt=3D6></a> since Nov 14, 2002
</B>
</FONT>
<BR>
<BR>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;

<a href=3D"http://groups.google.com/groups?selm=3D7g6j9k%24lur%241%40nnr=
p1.dejanews.com"><IMG src=3D"icons/left-arrow.png"></a>
<a href=3D".."><IMG src=3D"icons/up-arrow.png"></a>
<a href=3D"turing.html"><IMG src=3D"icons/right-arrow.png"></a>
<PRE>   	[ Last Modification : 2004/07/31]
	---------------------------------

  Here is <font color=3D"red"><b>n-ary Huffman Template Algorithm</b></f=
ont>.
  The algorithm has been written by Alex Vinokur.
  Programming Language : C++.
  Any and all comments would be appreciated.

	<a href=3D"http://up.to/alexvn">Alex </a><a href=3D"http://go.to/alexv_=
math">Vinokur</a>
	-----------------------------------
	<a href=3D"mailto:alexvn@go.to">alexvn@go.to</a>
	<a href=3D"http://up.to/alexvn">http://up.to/alexvn</a>
	<a href=3D"http:huffman_template_algorithm.html">http://alexvn.freeserv=
ers.com/s1/huffman_template_algorithm.html</a>
	-----------------------------------
           =

<center>
<font size=3D2>Find all about
<a href=3D"http://huffman-coding.wikiverse.org/"><font size=3D2>huffman =
coding</a></font>
<br>
<a href=3D"http://huffman-coding.wikiverse.org/"><img src=3D"icons/wikiv=
erse.gif" alt=3D"Find all about huffman coding" width=3D"78" height=3D"1=
10" border=3D"0"></a>
</center>



<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFBBBB"><PRE>
<font size=3D+1>
  <b>Content</b>.
    1. <a href=3D"#label_Algorithm"><b>Algorithm</b></a>
    2. <a href=3D"#label_Classes_List"><b>Classes</b></A>
    3. <a href=3D"#label_Program_List"><b>Program Files</b> (<i>Descript=
ion</i>)</A>
    4. <a href=3D"#label_Tests_and_Data"><b>Tests</b> (<i>Description an=
d Input Data Files</i>)</A>
    5. <a href=3D"#label_Program"><b>Program Files</b> (<i>Headers & Sou=
rce</i>)</A>
    6. <a href=3D"#label_Compiling"><b>Compiling</b></A>
    7. <a href=3D"#label_Running"><b>Running</b> (<i>Tests</i>)</A>
    8. <a href=3D"#label_Download"><b>Download</b></A>
</font>
</PRE></TD></TR></TABLE>

<a NAME=3D"label_Algorithm"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DDDDEE"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 1. <font color=
=3D"FF0055"><b>Algorithm</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D
			       =

1. n-ary Huffman algorithm uses =

   the {0, 1, ..., n-1} alphabet to encode message.
   Built tree is n-ary one.

2. Huffman template algorithm enables =

   to use non-numerical weights (costs, frequences).

   For more details see the discussion titled
        "<font color=3D"#FF5555"><b>Huffman codes with non-numerical cos=
t?</b></font>" =

        started 1999/02/22 in =

        * <a href=3D"http://groups.google.com/groups?hl=3Den&lr=3D&safe=3D=
off&ic=3D1&th=3D4bbe4ee455ca554e,8&seekm=3D7b08cs%24vo2%241%40nnrp1.deja=
news.com">comp.dsp</a>
        * <a href=3D"http://groups.google.com/groups?hl=3Den&lr=3D&safe=3D=
off&ic=3D1&th=3D4607aa3f5f2b8c6b,3&seekm=3D7au9ab%247ot%241%40nnrp1.deja=
news.com">comp.theory</a>
        * <a href=3D"http://forum.swarthmore.edu/epigone/sci.math/gloigr=
inthoo">sci.math</a>

=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
</PRE></TD></TR></TABLE>

<a NAME=3D"label_Classes_List"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 2. <font color=3D"FF005=
5"><b>List Of Classes</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D

Main template classes used in the algorithm are as following :
     1. <a href=3D"#label_Cell_class">Cell</a>&lt;SYMBOL, WEIGHT&gt;
     2. <a href=3D"#label_Node_class">Node</a>&lt;SYMBOL, WEIGHT&gt;
     3. <a href=3D"#label_InternalNode_class">InternalNode</a>&lt;SYMBOL=
, WEIGHT&gt;
     4. <a href=3D"#label_TerminalNode_class">TerminalNode</a>&lt;SYMBOL=
, WEIGHT&gt;
     5. <a href=3D"#label_BasicHuffmanTree_class">BasicHuffmanTree</a>&l=
t;SYMBOL, WEIGHT, ARY&gt;
     ------------------------------------------
     6. <a href=3D"#label_LoadedHuffmanTree_class">LoadedHuffmanTree</a>=
&lt;SYMBOL, WEIGHT, ARY&gt;
     7. <a href=3D"#label_DriedHuffmanTree_class">DriedHuffmanTree</a>&l=
t;WEIGHT, ARY&gt;
     ------------------------------------------

The user should use only
        <a href=3D"#label_LoadedHuffmanTree_class"><b>LoadedHuffmanTree<=
/b></a> and/or
        <a href=3D"#label_DriedHuffmanTree_class"><b>DriedHuffmanTree</b=
></a> classes.

<b><font color=3Dred>LoadedHuffmanTree</font></b> requires (as input dat=
a) the <u>symbols</u> and <u>their weights</u>.

<b><font color=3Dred>DriedHuffmanTree</font></b> requires (as input data=
) <i><u>only</u></i> the <u>weights</u>.
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
</PRE></TD></TR></TABLE>

<a NAME=3D"label_Program_List"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DDEEDD"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 3. <font color=3D"FF0055"><b>Lis=
t Of Program Files</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

The algorithm contains the following files :
     1. <a href=3D"#label_huf_service">huf_service.H</a>   auxiliary fun=
ctions
     2. <a href=3D"#label_huf_class">huf_class.H</a>     template classe=
s definition
     3. <a href=3D"#label_huf_methods">huf_methods.H</a>   template meth=
ods description
     4. <a href=3D"#label_huf_main">huf_main.C</a>      tests; includes =

        4.1. Two test classes definition:
             - <a href=3D"#label_AAA">AAA ("symbol")</a>
             - <a href=3D"#label_BBB">BBB ("weight")</a>
        4.2. <a href=3D"#label_main">Main program</a>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
</PRE></TD></TR></TABLE>

<a NAME=3D"label_Tests_and_Data"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DDEEFF"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D 4. <font color=3D"FF0055"><b>Tests : Description and Input =
Data Files</b></font> =3D=3D=3D

The main program contains the following tests :
   <a href=3D"#label_test_1_1_a">Test#1.1</a>.    Creating Loaded 5-ary =
Huffman Tree
                from data vector
                with <b><font color=3D"#00AA00">char</font>-symbols</b> =
and <b><font color=3D"#00AA00">int</font>-weights</b>

   <a href=3D"#label_test_1_2_a">Test#1.2</a>.    Encoding and Decoding =
vector-message
                using 5-ary Huffman Tree

   <a href=3D"#label_test_1_3_a">Test#1.3</a>.    Encoding and Decoding =
string-message
                using 5-ary Huffman Tree

   <a href=3D"#label_test_2_a">Test#2</a>.      Creating Loaded 24-ary H=
uffman Tree
                from data vector
                with <b><font color=3D"#00AA00">char</font>-symbols</b> =
and <b><font color=3D"#00AA00">int</font>-weights</b>

   <a href=3D"#label_test_3_1_a">Test#3.1</a>.    Creating Loaded Binary=
 Huffman Tree
                from data vector
                with <b><font color=3D"#00AA00">char</font>-symbols</b> =
and <b><font color=3D"#00AA00">int</font>-weights</b>

   <a href=3D"#label_test_3_2_a">Test#3.2</a>.    Encoding and Decoding =
vector-message
                using Binary Huffman Tree

   <a href=3D"#label_test_3_3_a">Test#3.3</a>.    Encoding and Decoding =
string-message
                using Binary Huffman Tree

   <a href=3D"#label_test_4_a">Test#4</a>.      Creating Dried (Unloaded=
) Binary Huffman Tree
                from data vector
                with <b><font color=3D"#00AA00">int</font>-weights</b>
                Note. This vector contains Fibonacci sequence.
                    For more details about connection =

		    between Huffman codes and Fibonacci numbers
                    see the message titled
                    "<font color=3D"#FF5555"><b>Huffman codes and Fibona=
cci numbers</b></font>" =

		    published 1999/04/28 in		    =

		    * sci.math (<a href=3D"http://forum.swarthmore.edu/epigone/sci.mat=
h/twalgixskay/">http://forum.swarthmore.edu/epigone/sci.math/twalgixskay=
/</a>)
                    * <a href=3D"http://groups.google.com/groups?q=3D+%2=
2Alex+Vinokur%22+group:sci.math+insubject:Huffman+insubject:Fibonacci+au=
thor:Vinokur&lr=3D&safe=3Doff&scoring=3Ddate&as_drrb=3Dquick&as_qdr=3D&a=
s_mind=3D29&as_minm=3D3&as_miny=3D1995&as_maxd=3D29&as_maxm=3D4&as_maxy=3D=
2001&rnum=3D1&ic=3D1&selm=3D7g6jc7%24m0i%241%40nnrp1.dejanews.com">sci.c=
rypt</a> =

		    * <a href=3D"http://groups.google.com/groups?lr=3D&safe=3Doff&ic=3D=
1&th=3D64f3c1104ffbc92e&seekm=3D7g6j9k%24lur%241%40nnrp1.dejanews.com">c=
omp.compression</a>


   <a href=3D"#label_test_5_a">Test#5</a>.      Creating Dried (Unloaded=
) Binary Huffman Tree
                from data file
                with <b><font color=3D"#00AA00">int</font>-weights</b>
                File name is "<a href=3D"#label_weights_file">weights_fi=
le_01</a>"

   <a href=3D"#label_test_6_a">Test#6</a>.      Creating Loaded Binary H=
uffman Tree
                from data file
                with <b><font color=3D"#00AA00">char</font>-symbols</b> =
and <b><font color=3D"#00AA00">int</font>-weights</b>
                File name is "<a href=3D"#label_data_file">data_file_01<=
/a>"

   <a href=3D"#label_test_7_a">Test#7</a>.      Creating Loaded Binary H=
uffman Tree
                from data vector
                with <b><font color=3D"red">string</font>-symbols</b> an=
d <b><font color=3D"#00AA00">float</font>-weights</b>

   <a href=3D"#label_test_8_a">Test#8</a>.      Creating Loaded Binary H=
uffman Tree
                from data vector
                with <b><font color=3D"red">AAA</font>-symbols</b> and <=
b><font color=3D"red">BBB</font>-weights</b>


<a NAME=3D"label_weights_file"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DDDDFF"><PRE>
----- Test Data File "weights_file_01" -----
3
3
20
9
2
9
100
11
17
--------------------------------------------
</PRE></TD></TR></TABLE>

<a NAME=3D"label_data_file"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DDDDFF"><PRE>
----- Test Data File "data_file_01" --------
a       3
b       3
c       20
d       9
e       2
f       9
h       100
x       11
y       17
--------------------------------------------
</PRE></TD></TR></TABLE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
</PRE></TD></TR></TABLE>


<a NAME=3D"label_Program"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#EEDDEE"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 5. <font color=3D=
"FF0055"><b>Program Files</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D

<a NAME=3D"label_huf_service"></a>
#########################################################
=3D=3D=3D File <font color=3D"blue"><b>#1</b></font> <a href=3D"#label_h=
uf_class">of 4</a> : <font color=3D"blue"><b>huf_service.H</b></font> =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D---=
---------------- C++ code : BEGIN --------------------
<TABLE><TR><TD bgcolor=3D"#DEEEDD"><PRE>
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
//
//  Copyright (c) 1999-2001 by Alex Vinokur.  This work and all works
//  derived from it may be copied and modified without any
//  restrictions other than that a copy of this copyright notice
//  must be included in any copy of this work or any derived work.
//
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

///////////////////////////////////////

#ifndef huf_service_H
#define huf_service_H

///////////////////////////////////////

static char id_huf_service_H[] =3D "@(#)## n-ary Huffman Template Algori=
thm ## Author : Alex Vinokur ## "__FILE__;

// ##############################################################
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//  n-ary Huffman Template Algorithm
//  The algorithm (program) contains the following files :
//  - huf_service.H
//  - huf_class.H
//  - huf_methods.H
//  - huf_main.C
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//
//  FILE : <font color=3D"blue"><b>huf_service.H</b></font>
//
//  AUTHOR : Alex Vinokur
//
//  DESCRIPTION :
//         <font color=3D"#FF00FF"><b>Definition and implementation</b><=
/font>
//         <font color=3D"#FF00FF"><b>of the following auxiliary templat=
e functions : </b></font>
//         ----------------------------------------------
//         - string             to_str (...)
//         - void               add_to_vector (...)
//         - void               fill_vector (...)
//         - unsigned int       get_width (...)
//         - string             gstr_vect_ptrs (...)
//         - string             gstr_vector (...)       // two functions=

//         - string             gstr_path (...)
//         - string             gstr_map (...)
//         - ostream&           operator&lt;&lt; (...)        // two ope=
rators
//         ----------------------------------------------
//
//  DATE           VERSION
//  ----           -------
//  Aug-26-1999    NHTA 1.0
//  Jul-05-2001    NHTA 1.1
//  Sep-11-2001    NHTA 1.2
//
// ##############################################################


#include &lt;strstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;algorithm&gt;
#include &lt;algo.h&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;fstream.h&gt;
#include &lt;typeinfo&gt;
#include &lt;iomanip.h&gt;
#include &lt;assert.h&gt;


//#######################################################
//##### PART : DEFINES & CONSTANTS ######################
//#######################################################

#define MIN_VALUE(x,y)  ((x) &lt; (y) ? (x) : (y))
#define MAX_VALUE(x,y)  ((x) &gt; (y) ? (x) : (y))
#define ASSERT(x)       if (!(x)) {cerr &lt;&lt; endl &lt;&lt; endl &lt;=
&lt; "\t=3D=3D=3D BUG IN PROGRAM =3D=3D=3D" &lt;&lt; endl;}; assert (x)

#define FATAL_TITLE     "FATAL ERROR : "
#define FATAL_SHIFT     "            : "
#define FATAL_MSG(x)    cerr &lt;&lt; endl \
                             &lt;&lt; FATAL_TITLE \
                             &lt;&lt; x \
                             &lt;&lt; endl \
                             &lt;&lt; FATAL_SHIFT \
                             &lt;&lt; "File - " \
                             &lt;&lt; __FILE__ \
                             &lt;&lt; ", Line#" \
                             &lt;&lt; __LINE__ \
                             &lt;&lt; endl; \
                             exit (1)


#define ERROR_TITLE     "ERROR : "
#define ERROR_SHIFT     "      : "
#define ERROR_MSG(x)    cerr &lt;&lt; endl \
                             &lt;&lt; ERROR_TITLE \
                             &lt;&lt; x \
                             &lt;&lt; endl \
                             &lt;&lt; ERROR_SHIFT \
                             &lt;&lt; "File - " \
                             &lt;&lt; __FILE__ \
                             &lt;&lt; ", Line#" \
                             &lt;&lt; __LINE__ \
                             &lt;&lt; endl;


//#######################################################
//##### PART : typedefs #################################
//#######################################################
typedef unsigned int    CODE;



//#######################################################
//##### PART : FUNCTIONS ################################
//#######################################################


//#####################################################3
template &lt;typename T&gt;
string to_str (T value_i, int width_i =3D -1, char fill_i =3D ' ', const=
 string& prefix_i =3D string ())
{
string          ret_stringValue;
strstream       tmp_strstream;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (width_i &gt; 0)
        {
                tmp_strstream.width (width_i);
                tmp_strstream.fill (fill_i);
        }
        tmp_strstream &lt;&lt; prefix_i;
        tmp_strstream &lt;&lt; value_i;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        tmp_strstream &lt;&lt; ends;
        ret_stringValue =3D tmp_strstream.str();
        tmp_strstream.rdbuf()-&gt;freeze (0);
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return ret_stringValue;
} // string to_str (T value_i)



//#####################################################3
template &lt;typename T&gt;
void add_to_vector (vector&lt;T&gt;& vector_i, const basic_string&lt;T&g=
t;& string_i)
{
        copy (string_i.begin (), string_i.end (), back_inserter (vector_=
i));
} //void add_to_vector (T value_o)



//#####################################################3
template &lt;typename T&gt;
void fill_vector (vector&lt;T&gt;& vector_i, const basic_string&lt;T&gt;=
& string_i)
{
        vector_i =3D vector&lt;T&gt; ();
        add_to_vector (vector_i, string_i);
} //void fill_vector (T value_o)




//#####################################################3
template &lt;typename T&gt;
unsigned int get_width (T value_i)
{
unsigned int    ret_intValue;
strstream       tmp_strstream;

        tmp_strstream &lt;&lt; value_i;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        tmp_strstream &lt;&lt; ends;
        ret_intValue =3D string (tmp_strstream.str()).size ();
        tmp_strstream.rdbuf()-&gt;freeze (0);
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return ret_intValue;
} // unsigned int get_width (T value_i)



//#####################################################
template &lt;typename T1&gt;
string   gstr_vect_ptrs (const vector&lt;T1*&gt;& vector_i, const string=
& delimiter_i =3D "")
{
strstream               tmp_strstream;
string                  tmp_string;
unsigned int            cur_index;

        cout &lt;&lt; delimiter_i &lt;&lt; endl;
        for (cur_index =3D 0; cur_index &lt; vector_i.size (); cur_index=
++)
        {
                cout &lt;&lt; "vector element ["
                     &lt;&lt; cur_index &lt;&lt; "] : "
                     &lt;&lt; (*(vector_i [cur_index]))
                     &lt;&lt; delimiter_i
                     &lt;&lt; endl;
        }


        tmp_strstream &lt;&lt; ends;
        tmp_string =3D tmp_strstream.str(); tmp_strstream.rdbuf()-&gt;fr=
eeze (0);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return tmp_string;

} // gstr_vect_ptrs (const vector&lt;CODE&gt;& vector_i)



//#####################################################
template &lt;typename T1&gt;
string   gstr_vector (const vector&lt;T1&gt;& vector_i, unsigned int sta=
rt_pos_i =3D 0, unsigned int end_pos_i =3D UINT_MAX, const string& delim=
iter_i =3D "")
{

        if (vector_i.empty ())
        {
                return "Empty Vector";
        }
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (end_pos_i =3D=3D UINT_MAX)
        {
                end_pos_i =3D vector_i.size () - 1;
        }
        ASSERT (end_pos_i &lt; vector_i.size ());
        ASSERT (start_pos_i &lt;=3D end_pos_i);
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

strstream               tmp_strstream;
string                  tmp_string;
ostream_iterator&lt;T1&gt;    out (tmp_strstream, delimiter_i.c_str ());=


        copy (vector_i.begin () + start_pos_i, vector_i.begin () + end_p=
os_i + 1, out);

        tmp_strstream &lt;&lt; ends;
        tmp_string =3D tmp_strstream.str(); tmp_strstream.rdbuf()-&gt;fr=
eeze (0);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return tmp_string;

} // gstr_vector (const vector&lt;CODE&gt;& vector_i)



//#####################################################
template &lt;typename T1&gt;
ostream& operator&lt;&lt; (ostream& o, const vector&lt;T1&gt;& vector_i)=

{
        return o &lt;&lt; gstr_vector (vector_i);
}


//#####################################################
template &lt;typename T1&gt;
string   gstr_vector (const vector&lt;T1&gt;& vector_i, const string& de=
limiter_i, unsigned int start_pos_i =3D 0, unsigned int end_pos_i =3D UI=
NT_MAX)
{
        return gstr_vector (vector_i, start_pos_i, end_pos_i, delimiter_=
i);
} // string   gstr_vector - 2


//#####################################################
template &lt;unsigned int ARY&gt;
string   gstr_path (const vector&lt;CODE&gt;& path_i)
{
const string    delimiter_CNS =3D (ARY &gt; 16) ? "." : "";
strstream       tmp_strstream;
string          tmp_string;

        if (path_i.empty ())
        {
                tmp_strstream &lt;&lt; "This is Huffman Tree Root";
        }
        else
        {
                for (unsigned int cur_index =3D 0; cur_index &lt; path_i=
.size (); cur_index++)
                {
                        if (cur_index &gt; 0)
                        {
                                tmp_strstream &lt;&lt; delimiter_CNS;
                        }
                        tmp_strstream &lt;&lt; path_i [cur_index];
                }
        }
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        tmp_strstream &lt;&lt; ends;
        tmp_string =3D tmp_strstream.str(); tmp_strstream.rdbuf()-&gt;fr=
eeze (0);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return tmp_string;

} // gstr_path (const vector&lt;CODE&gt;& path_i)




//#######################################
template &lt;typename T1, typename T2&gt;
string gstr_map (const map&lt;T1, T2, less&lt;T1&gt; &gt;& map_i, const =
string &shift_i =3D string ())
{
strstream       tmp_strstream;
string          tmp_string;

        tmp_strstream &lt;&lt; endl;
        tmp_strstream &lt;&lt; endl;
        tmp_strstream &lt;&lt; shift_i;
        tmp_strstream &lt;&lt; "\tmap size =3D "
                      &lt;&lt; map_i.size ()
                      &lt;&lt; endl;

map&lt;T1, T2, less&lt;T1&gt; &gt;::const_iterator  cur_const_iter;
        for (cur_const_iter =3D map_i.begin(); !(cur_const_iter =3D=3D m=
ap_i.end()); cur_const_iter++)
        {
                tmp_strstream &lt;&lt; shift_i;
                tmp_strstream &lt;&lt; "map element ["
                              &lt;&lt; (*cur_const_iter).first
                              &lt;&lt; "] =3D "
                              &lt;&lt; "&lt;"
                              &lt;&lt; (*cur_const_iter).second
                              &lt;&lt; "&gt;";
                tmp_strstream &lt;&lt; endl;
        }
        tmp_strstream &lt;&lt; ends;
        tmp_string =3D tmp_strstream.str(); tmp_strstream.rdbuf()-&gt;fr=
eeze (0);

        return tmp_string;

} // string gstr_map



//#######################################
template &lt;typename T1, typename T2&gt;
ostream& operator&lt;&lt;(ostream &str_o, const map&lt;T1, T2, less&lt;T=
1&gt; &gt;& map_i)
{
        return str_o &lt;&lt; gstr_map (map_i);

} // ostream& operator&lt;&lt;(ostream &str_o, const map&lt;T1&gt;& map_=
i)


#endif	// huf_service_H


//#######################################################
//################ END OF FILE ##########################
//####################################################### =

</PRE></TD></TR></TABLE>
------------------- C++ code : END ----------------------
=3D=3D=3D File #1 of 4 : huf_service.H =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D



<a NAME=3D"label_huf_class"></a>
#########################################################
=3D=3D=3D File <font color=3D"blue"><b>#2</b></font> <a href=3D"#label_h=
uf_methods">of 4</a> : <font color=3D"blue"><b>huf_class.H</b></font> =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
------------------- C++ code : BEGIN --------------------
<TABLE><TR><TD bgcolor=3D"#DEEEDD"><PRE>
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
//
//  Copyright (c) 1999-2001 by Alex Vinokur.  This work and all works
//  derived from it may be copied and modified without any
//  restrictions other than that a copy of this copyright notice
//  must be included in any copy of this work or any derived work.
//
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

///////////////////////////////////////

#ifndef huf_class_H
#define huf_class_H

///////////////////////////////////////

static char id_huf_class_H[] =3D "@(#)## n-ary Huffman Template Algorith=
m ## Author : Alex Vinokur ## "__FILE__;

// ##############################################################
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//  n-ary Huffman Template Algorithm
//  The algorithm (program) contains the following files :
//  - huf_service.H
//  - huf_class.H
//  - huf_methods.H
//  - huf_main.C
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//
//  FILE : <font color=3D"blue"><b>huf_class.H</b></font>
//
//  AUTHOR : Alex Vinokur
//
//  DESCRIPTION :
//         <font color=3D"#FF00FF"><b>Definition of the following templa=
te classes :</b></font>
//         ----------------------------------------------
//         - Cell                         &lt;SYMBOL, WEIGHT&gt;
//         - Node                         &lt;SYMBOL, WEIGHT&gt;
//         - InternalNode                 &lt;SYMBOL, WEIGHT&gt;
//         - TerminalNode                 &lt;SYMBOL, WEIGHT&gt;
//         - BasicHuffmanTree             &lt;SYMBOL, WEIGHT, ARY&gt;
//         - LoadedHuffmanTree            &lt;SYMBOL, WEIGHT, ARY&gt;
//         - DriedHuffmanTree             &lt;WEIGHT, ARY&gt;
//         ----------------------------------------------
//
//         <font color=3D"#FF00FF"><b>Definition and implementation of t=
he following template classes :</b></font>
//         ----------------------------------------------
//         - lessNodesCompare             &lt;SYMBOL, WEIGHT&gt;
//         - lessNodesCorrectingCompare01 &lt;SYMBOL, WEIGHT&gt;
//         - lessNodesCorrectingCompare02 &lt;SYMBOL, WEIGHT&gt;
//         - lessCellsCompare             &lt;SYMBOL, WEIGHT&gt;
//         - lessVectorsAlterCompare      &lt;T&gt;
//         ----------------------------------------------
//
//  DATE           VERSION
//  ----           -------
//  Aug-26-1999    NHTA 1.0
//  Jul-05-2001    NHTA 1.1
//  Sep-11-2001    NHTA 1.2
//
// ##############################################################

//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
#include "huf_service.H"
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

//#######################################################
//##### PART : DEFINES & CONSTANTS ######################
//#######################################################

//#define       SHOW_HUFFMAN_PROCESS_STATUS


//#######################################################
//##### PART : DECLARATIONS #############################
//#######################################################

template &lt;typename SYMBOL, typename WEIGHT&gt;
class Cell;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class Node;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class InternalNode ;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class TerminalNode ;

template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
class BasicHuffmanTree;

template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY =3D 2&gt=
;
class LoadedHuffmanTree;

template &lt;typename WEIGHT, unsigned int ARY =3D 2&gt;
class DriedHuffmanTree;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCompare;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCorrectingCompare01;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCorrectingCompare02;

template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessCellsCompare;

template &lt;typename T1&gt;
class lessVectorsAlterCompare;



<a NAME=3D"label_Cell_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_Cell_method">Cell</a>=
</b> ######################
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class Cell -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class Cell
{
template &lt;typename S1, typename W1, unsigned int A1&gt; friend class =
BasicHuffmanTree;

friend class TerminalNode&lt;SYMBOL, WEIGHT&gt;;
friend class lessCellsCompare&lt;SYMBOL, WEIGHT&gt;;
friend istream& operator&gt;&gt; &lt;SYMBOL, WEIGHT&gt; (istream &str_o,=
 Cell&lt;SYMBOL, WEIGHT&gt;& instance_i);

        private :
                SYMBOL  data_symbol_;
                WEIGHT  data_weight_;
                unsigned int    symbol_original_index_;
                vector&lt;CODE&gt;    symbol_path_;
        protected :

        public :
                Cell () {}
                Cell (
                        const SYMBOL&   data_symbol_i,
                        const WEIGHT&   data_weight_i,
                        unsigned int    symbol_original_index_i =3D UINT=
_MAX
                        );
                virtual ~Cell () {}

};



<a NAME=3D"label_Node_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_Node_method">Node</a>=
</b> ######################
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class Node -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class Node
{
template &lt;typename S1, typename W1, unsigned int A1&gt; friend class =
BasicHuffmanTree;

friend class InternalNode&lt;SYMBOL, WEIGHT&gt;;
friend class lessNodesCompare&lt;SYMBOL, WEIGHT&gt;;
friend class lessNodesCorrectingCompare01&lt;SYMBOL, WEIGHT&gt;;
friend class lessNodesCorrectingCompare02&lt;SYMBOL, WEIGHT&gt;;
friend ostream& operator&lt;&lt; &lt;SYMBOL, WEIGHT&gt; (ostream &str_o,=
 const Node&lt;SYMBOL, WEIGHT&gt;& instance_i);

typedef map&lt;SYMBOL, WEIGHT, less&lt;SYMBOL&gt; &gt; Node_MAP_SYMBOLS;=


        private :
        protected :
                Node_MAP_SYMBOLS        mapSymbols_;
                WEIGHT                  weight_;
                bool                    is_TerminalNode_;
                int                     absorbtion_stage_;
                int                     creation_stage_;

        public :
                Node () {weight_ =3D WEIGHT (); absorbtion_stage_ =3D -2=
; creation_stage_ =3D -1;}
                virtual ~Node () {}
};



<a NAME=3D"label_InternalNode_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_InternalNode_method">=
InternalNode</a></b> ##############
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class InternalNode -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class InternalNode : public Node&lt;SYMBOL, WEIGHT&gt;
{
template &lt;typename S1, typename W1, unsigned int A1&gt; friend class =
BasicHuffmanTree;
        private :
                vector&lt;Node&ltSYMBOL, WEIGHT&gt;*&gt;   arc_;
        protected :
                void addNode (Node&lt;SYMBOL, WEIGHT&gt; const *  const =
ptr2_i);
        public :
                InternalNode () {is_TerminalNode_ =3D false;}
                ~InternalNode () {}
};



<a NAME=3D"label_TerminalNode_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_TerminalNode_method">=
TerminalNode</a></b> ##############
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class TerminalNode -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class TerminalNode : public Node&lt;SYMBOL, WEIGHT&gt;
{
template &lt;typename S1, typename W1, unsigned int A1&gt; friend class =
BasicHuffmanTree;
        private :

        protected :
        public :
                TerminalNode () {is_TerminalNode_ =3D true;}
                TerminalNode (const Cell&lt;SYMBOL, WEIGHT&gt;& cell_i);=

                ~TerminalNode () {}
};



//#######################################################
//##### PART : template class less... ###################
//#######################################################

//#######################################################
//----------- template class lessNodesCompare -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCompare
{
public:
        bool operator()(
                        const Node&lt;SYMBOL, WEIGHT&gt;* const left_i,
                        const Node&lt;SYMBOL, WEIGHT&gt;* const right_i
                        )
        {
                return (left_i-&gt;weight_ &lt; right_i-&gt;weight_);
        }
};


//#######################################################
//------- template class lessNodesCorrectingCompare01 -----
template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCorrectingCompare01
{
public:
        bool operator()(
                        const Node&lt;SYMBOL, WEIGHT&gt;* const left_i,
                        const Node&lt;SYMBOL, WEIGHT&gt;* const right_i
                        )
        {
                return ((left_i-&gt;weight_ =3D=3D right_i-&gt;weight_) =
? (!(left_i-&gt;is_TerminalNode_)) : (left_i-&gt;weight_ &lt; right_i-&g=
t;weight_));
        }
};



//#######################################################
//------- template class lessNodesCorrectingCompare02 -----
template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessNodesCorrectingCompare02
{
public:
        bool operator()(
                        const Node&lt;SYMBOL, WEIGHT&gt;* const left_i,
                        const Node&lt;SYMBOL, WEIGHT&gt;* const right_i
                        )
        {
                return ((left_i-&gt;is_TerminalNode_ =3D=3D right_i-&gt;=
is_TerminalNode_) ? (left_i-&gt;weight_ &lt; right_i-&gt;weight_) : (!(l=
eft_i-&gt;is_TerminalNode_)));
        }
};


//#######################################################
//----------- template class lessCellsCompare -----------
template &lt;typename SYMBOL, typename WEIGHT&gt;
class lessCellsCompare
{
public:
        bool operator()(
                        const Cell&lt;SYMBOL, WEIGHT&gt;& left_i,
                        const Cell&lt;SYMBOL, WEIGHT&gt;& right_i
                        )
        {

                return (left_i.data_weight_ &lt; right_i.data_weight_);
        }
};




//#######################################################
//----------- template class lessVectorsAlterCompare -----------
template &lt;typename T1&gt;
class lessVectorsAlterCompare
{
public:
        bool operator()(
                        const vector&lt;T1&gt;&       left_i,
                        const vector&lt;T1&gt;&       right_i
                        )
        {
                if (left_i.size () &lt; right_i.size ())
                {
                        return true;
                }

                if (left_i.size () &gt; right_i.size ())
                {
                        return false;
                }

                return (left_i &lt; right_i);
        }
};



<a NAME=3D"label_BasicHuffmanTree_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_BasicHuffmanTree_meth=
od">BasicHuffmanTree</a></b> ##########
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################


//#######################################################
//----------- template class BasicHuffmanTree -----------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
class BasicHuffmanTree
{
typedef map&lt;SYMBOL, Cell&lt;SYMBOL, WEIGHT&gt;, less&lt;SYMBOL&gt; &g=
t; Tree_MAP_SYMBOLS;
typedef map&lt;vector&lt;CODE&gt;, SYMBOL, less&lt;vector&lt;CODE&gt; &g=
t; &gt; Tree_MAP_HUFFMAN_DECODING;

        private :
                Tree_MAP_SYMBOLS                mapAlphabet_;
                Tree_MAP_HUFFMAN_DECODING       mapHuffmanCodes_;
                InternalNode&lt;SYMBOL, WEIGHT&gt;    rootNode_;
                vector&lt;vector&lt;CODE&gt; &gt;           vectorHuffma=
nCodes_;


                void    createAllTerminalNodes (
                                const vector&lt;Cell&lt;SYMBOL, WEIGHT&g=
t; &gt;&    data_vector_i,
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&          vectorHuffmanProcess_i
                                );
                void    createInternalNode (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&          vectorHuffmanProcess_i,
                                int                                     =
cur_stage_i
                                );

                void    createHuffmanTree (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&          vectorHuffmanProcess_i
                                );

                void    doBeautyTreatment (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&          vectorHuffmanProcess_i
                                );


                void    storeHuffmanCodes ();


                bool            encodeOneSymbol (
                                        const SYMBOL&   symbol_i,
                                        vector&lt;CODE&gt;&   path_o)
                                        const;


                bool            decodeOneSymbol (
                                        const vector&lt;CODE&gt;&     en=
coded_msg_i,
                                        unsigned int&           cur_star=
t_position_io,
                                        unsigned int&           cur_symb=
ol_number_io,
                                        vector&lt;CODE&gt;&           cu=
r_symbol_code_o,
                                        SYMBOL&                 cur_symb=
ol_value_o
                                        ) const;

                bool            decodeOneSymbol (
                                        const vector&lt;CODE&gt;&     en=
coded_symbol_code_i,
                                        SYMBOL&                 decoded_=
symbol_value_o
                                        ) const;

                bool            testAllCodes (bool show_i =3D false) con=
st;

                void            showHuffmanProcessStatus (
                                        vector&lt;Node&lt;SYMBOL, WEIGHT=
&gt;*&gt;&  vectorHuffmanProcess_i,
                                        int                             =
cur_stage_i =3D 0,
                                        const string&                   =
msg_i =3D string ()
                                        ) const;

                static void     print_show_title_S (
                                        const string&   spaces_offset_i,=

                                        unsigned int    setw_symbol_i,
                                        const string&   symbol_title_i,
                                        unsigned int    setw_weight_i,
                                        const string&   weight_title_i,
                                        const string&   code_title_i
                                        );

                static void     print_show_line_S (
                                        const string&   spaces_offset_i,=

                                        unsigned int    setw_symbol_i,
                                        const SYMBOL&   symbol_i,
                                        unsigned int    setw_weight_i,
                                        const WEIGHT&   weight_i,
                                        const vector&lt;CODE&gt;&     pa=
th_i
                                        );


                bool            knowSymbolWeight (
                                        const SYMBOL&   symbol_i,
                                        WEIGHT&         weight_o
                                        ) const;

                bool            knowCodeSymbol (
                                        const vector&lt;CODE&gt;&     pa=
th_i,
                                        SYMBOL&                 symbol_o=

                                        ) const;

                WEIGHT          getWeightsSum () const;

                WEIGHT          getAverageWeight () const
                {
                        return (getWeightsSum ()/getAlphabetSize ());
                }

                unsigned int    getCodeAry () const {return ARY;}

                unsigned int    getLongestSymbolSize () const;

                unsigned int    getAlphabetSize () const
                {
                        return vectorHuffmanCodes_.size ();
                }

                unsigned int    getShortestCodeSize () const
                {
                        return vectorHuffmanCodes_[0].size ();
                }

                unsigned int    getLongestCodeSize () const
                {
                        return vectorHuffmanCodes_[vectorHuffmanCodes_.s=
ize () - 1].size ();
                }

                unsigned int    getCodeSizesSum () const;

                float           getAverageCodeSize () const
                {
                        return (static_cast&lt;float&gt;(getCodeSizesSum=
 ())/static_cast&lt;float&gt;(getAlphabetSize ()));
                }

                WEIGHT          getAverageWeightedCodeSize () const
                {
                        return (getWeightedCodeSizesSum ())/(getAlphabet=
Size ());
                }

                WEIGHT          getWeightedCodeSizesSum () const;

        protected :
                void    doBasicHuffmanTree (
                                const vector&lt;Cell&lt;SYMBOL, WEIGHT&g=
t; &gt;& data_vector_i
                                );

                BasicHuffmanTree () {}

                BasicHuffmanTree (
                        const vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;&=
 data_vector_i
                        );

                BasicHuffmanTree (const string& data_file_name_i);

                virtual ~BasicHuffmanTree () {}

        public :
                bool            encodeMsg (
                                        const vector&lt;SYMBOL&gt;&   so=
urce_msg_i,
                                        vector&lt;CODE&gt;&           en=
coded_msg_o)
                                        const;

                bool            encodeMsg (
                                        const basic_string&lt;SYMBOL&gt;=
&     source_msg_i,
                                        string&                         =
encoded_msg_o)
                                        const;

                bool            decodeMsg (
                                        const vector&lt;CODE&gt;&     en=
coded_msg_i,
                                        vector&lt;SYMBOL&gt;&         de=
coded_msg_o
                                        ) const;

                bool            decodeMsg (
                                        const string&                   =
encoded_msg_i,
                                        basic_string&lt;SYMBOL&gt;&     =
      decoded_msg_o
                                        ) const;


                void            showAll (const string& msg_i =3D string =
()) const;
};




<a NAME=3D"label_LoadedHuffmanTree_class"></a>
//#######################################################
//##### PART : template class <b><font color=3D"blue">LoadedHuffmanTree<=
/font></b> #########
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class LoadedHuffmanTree -----------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
class LoadedHuffmanTree : public BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY=
&gt;
{

        public :
                LoadedHuffmanTree () : BasicHuffmanTree&lt;SYMBOL, WEIGH=
T, ARY&gt; () {}

                LoadedHuffmanTree (
                        const vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;&=
 data_vector_i
                        )
                        :
                        BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt; (dat=
a_vector_i) {}

                LoadedHuffmanTree (const string& data_file_name_i)
                : BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt; (data_file=
_name_i) {}

                ~LoadedHuffmanTree () {}
};




<a NAME=3D"label_DriedHuffmanTree_class"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_DriedHuffmanTree_meth=
od">DriedHuffmanTree</a></b> ##########
//############ <font color=3D"FF00FF"><b>Definition</b></font> #########=
######################
//#######################################################

//----------- template class DriedHuffmanTree -----------
template &lt;typename WEIGHT, unsigned int ARY&gt;
class DriedHuffmanTree : public BasicHuffmanTree&lt;string, WEIGHT, ARY&=
gt;
{
        private :

                void    doDriedHuffmanTree (
                                const vector&lt;WEIGHT&gt;& weight_vecto=
r_i
                                );
        protected :
        public :

                DriedHuffmanTree (
                                const vector&lt;WEIGHT&gt;& weight_vecto=
r_i
                                );
                DriedHuffmanTree (const string& weights_file_name_i);

                ~DriedHuffmanTree () {}
};


#endif	// huf_class_H

//#######################################################
//################ END OF FILE ##########################
//#######################################################
</PRE></TD></TR></TABLE>
------------------- C++ code : END ----------------------
=3D=3D=3D File #2 of 4 : huf_class.H =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D



<a NAME=3D"label_huf_methods"></a>
#########################################################
=3D=3D=3D File <font color=3D"blue"><b>#3</b></font> <a href=3D"#label_h=
uf_main">of 4</a> : <font color=3D"blue"><b>huf_methods.H</b></font> =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
------------------- C++ code : BEGIN --------------------
<TABLE><TR><TD bgcolor=3D"#DEEEDD"><PRE>
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
//
//  Copyright (c) 1999-2001 by Alex Vinokur.  This work and all works
//  derived from it may be copied and modified without any
//  restrictions other than that a copy of this copyright notice
//  must be included in any copy of this work or any derived work.
//
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

///////////////////////////////////////

#ifndef huf_methods_H
#define huf_methods_H

///////////////////////////////////////

static char id_huf_methods_H[] =3D "@(#)## n-ary Huffman Template Algori=
thm ## Author : Alex Vinokur ## "__FILE__;

// ##############################################################
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//  n-ary Huffman Template Algorithm
//  The algorithm (program) contains the following files :
//  - huf_service.H
//  - huf_class.H
//  - huf_methods.H
//  - huf_main.C
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//
//  FILE : <font color=3D"blue"><b>huf_methods.H</b></font>
//
//  AUTHOR : Alex Vinokur
//
//  DESCRIPTION :
//         <font color=3D"#FF00FF"><b>Implementation of methods of the f=
ollowing template classes :</b></font>
//         ----------------------------------------------
//         - Cell                         &lt;SYMBOL, WEIGHT&gt;
//         - Node                         &lt;SYMBOL, WEIGHT&gt;
//         - InternalNode                 &lt;SYMBOL, WEIGHT&gt;
//         - TerminalNode                 &lt;SYMBOL, WEIGHT&gt;
//         - BasicHuffmanTree             &lt;SYMBOL, WEIGHT, ARY&gt;
//         - DriedHuffmanTree             &lt;WEIGHT, ARY&gt;
//         ----------------------------------------------
//	   Note. The following class has no its own methods :
//         - LoadedHuffmanTree            &lt;SYMBOL, WEIGHT, ARY&gt;
//         ----------------------------------------------
//
//  DATE           VERSION
//  ----           -------
//  Aug-26-1999    NHTA 1.0
//  Jul-05-2001    NHTA 1.1
//  Sep-11-2001    NHTA 1.2
//
// ##############################################################



//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
#include "huf_class.H"
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D



<a NAME=3D"label_Cell_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_Cell_class">Cell</a><=
/b> ######################
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
// Constructor
template &lt;typename SYMBOL, typename WEIGHT&gt;
Cell&lt;SYMBOL, WEIGHT&gt;::Cell (
                        const SYMBOL&   data_symbol_i,
                        const WEIGHT&   data_weight_i,
                        unsigned int    symbol_original_index_i
                        )
{
        data_symbol_            =3D data_symbol_i;
        data_weight_            =3D data_weight_i;
        symbol_original_index_  =3D symbol_original_index_i;
} // Cell&lt;SYMBOL, WEIGHT&gt;::Cell (


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT&gt;
istream& operator&gt;&gt;(istream &stream_o, Cell&lt;SYMBOL, WEIGHT&gt;&=
 instance_i)
{
        stream_o &gt;&gt; instance_i.data_symbol_ &gt;&gt; instance_i.da=
ta_weight_;
        return stream_o;
}




<a NAME=3D"label_Node_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_Node_class">Node</a><=
/b> ######################
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
template &lt;typename SYMBOL, typename WEIGHT&gt;
ostream& operator&lt;&lt;(ostream &str_o, const Node&lt;SYMBOL, WEIGHT&g=
t;& instance_i)
{
const string shift_CNS =3D "\t---&gt; ";
        return str_o &lt;&lt; endl
                     &lt;&lt; shift_CNS
                     &lt;&lt; "weight_ =3D "
                     &lt;&lt; instance_i.weight_
                     &lt;&lt; gstr_map (instance_i.mapSymbols_, shift_CN=
S);
}




<a NAME=3D"label_InternalNode_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_InternalNode_class">I=
nternalNode</a></b> ##############
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
template &lt;typename SYMBOL, typename WEIGHT&gt;
void InternalNode&lt;SYMBOL, WEIGHT&gt;::addNode(Node&lt;SYMBOL, WEIGHT&=
gt; const * const ptr2_i)
{
SYMBOL  cur_symbol;
WEIGHT  cur_weight;

Node_MAP_SYMBOLS::const_iterator                const_iterSymbols;


        ASSERT (!(ptr2_i =3D=3D NULL));

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D ptr2 =3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        weight_ +=3D ptr2_i-&gt;weight_;

        for (const_iterSymbols =3D ptr2_i-&gt;mapSymbols_.begin();
             !(const_iterSymbols =3D=3D ptr2_i-&gt;mapSymbols_.end());
             const_iterSymbols++
             )
        {
                cur_symbol =3D (*const_iterSymbols).first;
                cur_weight =3D (*const_iterSymbols).second;
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

                ASSERT (!mapSymbols_.count (cur_symbol));
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

                if (!((mapSymbols_.insert (Node_MAP_SYMBOLS::value_type =
(cur_symbol, cur_weight))).second))
                {
                        ASSERT (0);
                }
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        }


} // void InternalNode&lt;SYMBOL, WEIGHT&gt;::addNode(




<a NAME=3D"label_TerminalNode_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_TerminalNode_class">T=
erminalNode</a></b> ##############
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
// Constructor
template &lt;typename SYMBOL, typename WEIGHT&gt;
TerminalNode&lt;SYMBOL, WEIGHT&gt;::TerminalNode (const Cell&lt;SYMBOL, =
WEIGHT&gt;& cell_i)
{
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        is_TerminalNode_ =3D true;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT (!mapSymbols_.count (cell_i.data_symbol_));

        weight_ =3D cell_i.data_weight_;
        if (!((mapSymbols_.insert (Node_MAP_SYMBOLS::value_type (cell_i.=
data_symbol_, weight_))).second))
        {
                ASSERT (0);
        }

} // TerminalNode&lt;SYMBOL, WEIGHT&gt;::TerminalNode




<a NAME=3D"label_BasicHuffmanTree_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_BasicHuffmanTree_clas=
s">BasicHuffmanTree</a></b> ##########
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
// Constructor-1
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::BasicHuffmanTree (
                        const vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;&=
 data_vector_i
                        )
{
        doBasicHuffmanTree (data_vector_i);

} // BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::BasicHuffmanTree ()


//-----------------------
// Constructor-2
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::BasicHuffmanTree (const str=
ing& data_file_name_i)
{
vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;   data_vector;

ifstream fin (data_file_name_i.c_str ());

        if (!fin)
        {
                FATAL_MSG ("Cannot open file &lt;"
                            &lt;&lt; data_file_name_i
                            &lt;&lt; "&gt; for reading"
                            &lt;&lt; endl
                            &lt;&lt; FATAL_SHIFT
                            &lt;&lt; "The file must contain data to be H=
uffman-coded"
                            );
        }

        copy(istream_iterator&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;(fin),
             istream_iterator&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;(),
             back_inserter(data_vector));

        doBasicHuffmanTree (data_vector);
} // BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::BasicHuffmanTree ()



//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::doBasicHuffmanTree (
                        const vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;&=
 data_vector_i
                        )
{
        if (!(ARY &gt;=3D 2))
        {
                FATAL_MSG ("Illegal ARY - "
                            &lt;&lt; ARY
                            &lt;&lt; " (Must be &gt;=3D 2)"
                            );
        }

        switch (data_vector_i.size ())
        {
                case 0 :
                        FATAL_MSG ("Empty alphabet"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "Alphabet size must be &gt;=
=3D 2"
                                    );
                        break;

                case 1 :
                        FATAL_MSG ("Alphabet size =3D "
                                    &lt;&lt; data_vector_i.size ()
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "Alphabet size must be &gt;=
=3D 2"
                                    );
                        break;

                default :
                        break;
        } // switch


        ASSERT (ARY &gt;=3D 2);
        if (!((data_vector_i.size () - 1)%(ARY - 1) =3D=3D 0))
        {
                FATAL_MSG ("Illegal alphabet size (N =3D "
                            &lt;&lt; data_vector_i.size ()
                            &lt;&lt; ") for "
                            &lt;&lt; ARY
                            &lt;&lt; "-ary tree."
                            &lt;&lt; endl
                            &lt;&lt; FATAL_SHIFT
                            &lt;&lt; "N must satisfy the following condi=
tion : (N - 1) mod ("
                            &lt;&lt; (ARY - 1)
                            &lt;&lt; ") =3D 0"
                            &lt;&lt; endl
                            &lt;&lt; FATAL_SHIFT
                            &lt;&lt; "In reality "
                            &lt;&lt; (data_vector_i.size () - 1)
                            &lt;&lt; " mod ("
                            &lt;&lt; (ARY - 1)
                            &lt;&lt; ")"
                            &lt;&lt; " =3D "
                            &lt;&lt; ((data_vector_i.size () - 1)%(ARY -=
 1))
                            );
        }

        ASSERT (data_vector_i.size () &gt; 1);

        ASSERT ((data_vector_i.size () - 1)%(ARY - 1) =3D=3D 0);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt;           vectorHuffmanProcess=
;

        createAllTerminalNodes (data_vector_i, vectorHuffmanProcess);
        createHuffmanTree (vectorHuffmanProcess);
        storeHuffmanCodes ();

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
InternalNode&lt;SYMBOL, WEIGHT&gt;*           ptrRootNode;
        ASSERT (vectorHuffmanProcess.size () =3D=3D 1);
        ptrRootNode =3D dynamic_cast&lt;InternalNode&lt;SYMBOL, WEIGHT&g=
t;*&gt; (vectorHuffmanProcess [0]);
        ASSERT (!(ptrRootNode =3D=3D NULL));
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        rootNode_ =3D *ptrRootNode;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        delete (vectorHuffmanProcess [0]);
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT (testAllCodes ());
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT (mapAlphabet_.size () =3D=3D mapHuffmanCodes_.size ());
        ASSERT (mapAlphabet_.size () =3D=3D vectorHuffmanCodes_.size ())=
;
        ASSERT (mapHuffmanCodes_.size () =3D=3D vectorHuffmanCodes_.size=
 ());
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
} // BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::doBasicHuffmanTree ()




//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createInternalNode (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&  vectorHuffmanProcess_i,
                                int                             cur_stag=
e_i
                                )
{
unsigned int    cur_arc;
map&lt;SYMBOL, WEIGHT, less&lt;SYMBOL&gt; &gt;::iterator    iterSymbols;=

InternalNode&lt;SYMBOL, WEIGHT&gt;*   newPtrInternalNode =3D new Interna=
lNode&lt;SYMBOL, WEIGHT&gt; ();

        ASSERT (!(newPtrInternalNode =3D=3D NULL));

Node&lt;SYMBOL, WEIGHT&gt;*   front_element;
        ASSERT (newPtrInternalNode-&gt;arc_.empty ());
        for (cur_arc =3D 0; cur_arc &lt; ARY; cur_arc++)
        {
                front_element =3D vectorHuffmanProcess_i.front ();
                front_element-&gt;absorbtion_stage_ =3D cur_stage_i;
                newPtrInternalNode-&gt;addNode (front_element);

                for (iterSymbols =3D front_element-&gt;mapSymbols_.begin=
();
                     !(iterSymbols =3D=3D front_element-&gt;mapSymbols_.=
end());
                     iterSymbols++
                     )
                {
                        ASSERT (mapAlphabet_.count ((*iterSymbols).first=
));
                        vector&lt;CODE&gt;& alias_symbol_path =3D mapAlp=
habet_ [(*iterSymbols).first].symbol_path_;
                        ASSERT (newPtrInternalNode-&gt;arc_.size () =3D=3D=
 cur_arc);
                        alias_symbol_path.insert (alias_symbol_path.begi=
n (), newPtrInternalNode-&gt;arc_.size ());
                }
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
                vectorHuffmanProcess_i.erase (vectorHuffmanProcess_i.beg=
in ());
                newPtrInternalNode-&gt;creation_stage_ =3D cur_stage_i;
                newPtrInternalNode-&gt;arc_.push_back (front_element);
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        }
        ASSERT (newPtrInternalNode-&gt;arc_.size () =3D=3D ARY);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        vectorHuffmanProcess_i.push_back (newPtrInternalNode);
        stable_sort (vectorHuffmanProcess_i.begin (), vectorHuffmanProce=
ss_i.end (), lessNodesCompare&lt;SYMBOL, WEIGHT&gt; ());
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT ((((ARY - 1) * cur_stage_i) + vectorHuffmanProcess_i.size=
 ()) =3D=3D mapAlphabet_.size ());

        //---------------------

} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createInternalNod=
e


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createHuffmanTree (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&  vectorHuffmanProcess_i
                                )
{
#ifdef SHOW_HUFFMAN_PROCESS_STATUS
        showHuffmanProcessStatus (vectorHuffmanProcess_i);
#endif

int cur_stage =3D 0;
        while (vectorHuffmanProcess_i.size () &gt; 1)
        {
                cur_stage++;
                createInternalNode (vectorHuffmanProcess_i, cur_stage);
                doBeautyTreatment (vectorHuffmanProcess_i);
#ifdef SHOW_HUFFMAN_PROCESS_STATUS
                showHuffmanProcessStatus (vectorHuffmanProcess_i, cur_st=
age);
#endif
        }
        ASSERT (vectorHuffmanProcess_i.size () =3D=3D 1);
        ASSERT (!(vectorHuffmanProcess_i [0]-&gt;is_TerminalNode_));

} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createHuffmanTree=
 ()



//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::doBeautyTreatment (
                                vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt=
;&  vectorHuffmanProcess_i
                                )
{
        ASSERT (!(vectorHuffmanProcess_i.empty ()));
        if (vectorHuffmanProcess_i.size () =3D=3D 1)
        {
                return;
        }
        stable_sort (vectorHuffmanProcess_i.begin (), vectorHuffmanProce=
ss_i.end (), lessNodesCorrectingCompare01&lt;SYMBOL, WEIGHT&gt; ());
        stable_sort (vectorHuffmanProcess_i.begin (), vectorHuffmanProce=
ss_i.begin () + ARY, lessNodesCorrectingCompare02&lt;SYMBOL, WEIGHT&gt; =
());

} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::doBeautyTreatment=
 ()




//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createAllTerminalNodes=
 (
                        const vector&lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;&=
    data_vector_i,
                        vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt;&  vect=
orHuffmanProcess_i
                        )
{
unsigned int    cur_index;
SYMBOL          cur_symbol;
WEIGHT          cur_weight;

        for (cur_index =3D 0; cur_index &lt; data_vector_i.size (); cur_=
index++)
        {
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

                cur_symbol =3D data_vector_i [cur_index].data_symbol_;
                cur_weight =3D data_vector_i [cur_index].data_weight_;
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

                if (mapAlphabet_.count(cur_symbol))
                {
                        FATAL_MSG ("Symbol &lt;"
                                    &lt;&lt; cur_symbol
                                    &lt;&lt; "&gt; occurs more than one =
time"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "See symbol ["
                                    &lt;&lt; cur_index
                                    &lt;&lt; "]"
                                    &lt;&lt; " and "
                                    &lt;&lt; "symbol ["
                                    &lt;&lt; (*(mapAlphabet_.find (cur_s=
ymbol))).second.symbol_original_index_
                                    &lt;&lt; "]"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "Note! First symbol is symb=
ol [0]"
                                    );
                }
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

                if (!((mapAlphabet_.insert (Tree_MAP_SYMBOLS::value_type=
 (cur_symbol, Cell&lt;SYMBOL, WEIGHT&gt; (cur_symbol, cur_weight, cur_in=
dex)))).second))
                {
                        ASSERT (0);
                }
        } // for (unsigned int i =3D 0; i &lt; data_vector_i.size (); i+=
+)

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
TerminalNode&lt;SYMBOL, WEIGHT&gt;*   newPtrTerminalNode;
Tree_MAP_SYMBOLS::iterator      iterAlphabet;
        for (iterAlphabet =3D mapAlphabet_.begin();
             !(iterAlphabet =3D=3D mapAlphabet_.end());
             iterAlphabet++
             )
        {
                newPtrTerminalNode =3D new TerminalNode&lt;SYMBOL, WEIGH=
T&gt; ((*iterAlphabet).second);
                ASSERT (!(newPtrTerminalNode =3D=3D NULL));
                newPtrTerminalNode-&gt;creation_stage_ =3D 0;

                vectorHuffmanProcess_i.push_back (newPtrTerminalNode);
        }

        stable_sort (vectorHuffmanProcess_i.begin (), vectorHuffmanProce=
ss_i.end (), lessNodesCompare&lt;SYMBOL, WEIGHT&gt; ());
} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::createAllTerminal=
Nodes




//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::storeHuffmanCodes ()
{

Tree_MAP_SYMBOLS::iterator                      iterAlphabet;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        for (iterAlphabet =3D mapAlphabet_.begin();
             !(iterAlphabet =3D=3D mapAlphabet_.end());
             iterAlphabet++
             )
        {
                ASSERT (!mapHuffmanCodes_.count ((*iterAlphabet).second.=
symbol_path_));
                if (!((mapHuffmanCodes_.insert (Tree_MAP_HUFFMAN_DECODIN=
G::value_type ((*iterAlphabet).second.symbol_path_, (*iterAlphabet).firs=
t))).second))
                {
                        ASSERT (0);
                }

                vectorHuffmanCodes_.push_back ((*iterAlphabet).second.sy=
mbol_path_);

        }

        stable_sort (vectorHuffmanCodes_.begin (), vectorHuffmanCodes_.e=
nd (), lessVectorsAlterCompare&lt;CODE&gt; ());


} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::storeHuffmanCodes=
 ()


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
unsigned int BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getCodeSizesSu=
m () const
{
unsigned int    ret_intValue =3D 0;
        for (unsigned int cur_index =3D 0; cur_index &lt; vectorHuffmanC=
odes_.size (); cur_index++)
        {
                ret_intValue +=3D vectorHuffmanCodes_[cur_index].size ()=
;
        }
        return ret_intValue;
} // unsigned int BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getCodeSi=
zesSum () const


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getWeightsSum () con=
st
{
Tree_MAP_SYMBOLS::const_iterator        const_iterAlphabet;
WEIGHT ret_WEIGHT_Value;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ret_WEIGHT_Value =3D WEIGHT ();
        for (const_iterAlphabet =3D mapAlphabet_.begin();
             !(const_iterAlphabet =3D=3D mapAlphabet_.end());
             const_iterAlphabet++
             )
        {
                ret_WEIGHT_Value +=3D (*const_iterAlphabet).second.data_=
weight_;
        }

        return ret_WEIGHT_Value;

} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getWeightsSum (=
) const


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
unsigned int BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getLongestSymb=
olSize () const
{
Tree_MAP_SYMBOLS::const_iterator        const_iterAlphabet;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
unsigned int ret_intValue =3D 0;

        for (const_iterAlphabet =3D mapAlphabet_.begin();
             !(const_iterAlphabet =3D=3D mapAlphabet_.end());
             const_iterAlphabet++
             )
        {
                strstream       tmp_strstream;
                tmp_strstream &lt;&lt; (*const_iterAlphabet).first;
                tmp_strstream &lt;&lt; ends;
                ret_intValue =3D MAX_VALUE (ret_intValue, string (tmp_st=
rstream.str()).size ());
                tmp_strstream.rdbuf()-&gt;freeze (0);
        }

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return ret_intValue;

} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getLongestSymbo=
lSize () const




//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getWeightedCodeSizes=
Sum () const
{
Tree_MAP_SYMBOLS::const_iterator        const_iterAlphabet;
WEIGHT ret_WEIGHT_Value;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ret_WEIGHT_Value =3D WEIGHT ();
        for (const_iterAlphabet =3D mapAlphabet_.begin();
             !(const_iterAlphabet =3D=3D mapAlphabet_.end());
             const_iterAlphabet++
             )
        {
                ret_WEIGHT_Value +=3D ((*const_iterAlphabet).second.data=
_weight_ * (*const_iterAlphabet).second.symbol_path_.size ());
        }
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return ret_WEIGHT_Value;
} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::getWeightedCode=
SizesSum () const


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeOneSymbol (const=
 SYMBOL& symbol_i, vector&lt;CODE&gt;& path_o) const
{
        if (!mapAlphabet_.count (symbol_i))
        {
                ERROR_MSG ("Symbol &lt;"
                           &lt;&lt; symbol_i
                           &lt;&lt; "&gt; is out of Alphabet"
                           );
                showAll ();
                return false;

        }
        path_o =3D (*(mapAlphabet_.find (symbol_i))).second.symbol_path_=
;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return true;

} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeOneSymbol=
 () const


//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::knowSymbolWeight (cons=
t SYMBOL& symbol_i, WEIGHT& weight_o) const
{
        if (!mapAlphabet_.count (symbol_i))
        {
                ERROR_MSG ("Symbol &lt;"
                           &lt;&lt; symbol_i
                           &lt;&lt; "&gt; is out of Alphabet"
                           );
                showAll ();
                return false;

        }
        weight_o =3D (*(mapAlphabet_.find (symbol_i))).second.data_weigh=
t_;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return true;

} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::knowSymbolWeigh=
t () const




//-----------------------
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::knowCodeSymbol (const =
vector&lt;CODE&gt;& path_i, SYMBOL& symbol_o) const
{
        if (!mapHuffmanCodes_.count (path_i))
        {
                ERROR_MSG ("Code &lt;"
                           &lt;&lt; gstr_path&lt;ARY&gt; (path_i)
                           &lt;&lt; "&gt; is out of Huffman Codes for th=
is Alphabet"
                           );
                showAll ();
                return false;

        }

        symbol_o =3D (*(mapHuffmanCodes_.find (path_i))).second;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return true;

} // WEIGHT BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::knowCodeSymbol =
() const




//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::showAll (const string&=
 msg_i) const
{

        cout &lt;&lt; endl;
        cout &lt;&lt; "########### showAll (BEGIN) ###########" &lt;&lt;=
 endl;
        if (!msg_i.empty ())
        {
                cout &lt;&lt; "\t" &lt;&lt; "=3D=3D=3D=3D=3D " &lt;&lt; =
msg_i &lt;&lt; " =3D=3D=3D=3D=3D" &lt;&lt; endl;
                cout &lt;&lt; endl;
        }

        cout &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "-&gt; This is ";
        switch (ARY)
        {
                case 1 :
                        ASSERT (ARY &gt; 1);
                        break;

                case 2 :
                        cout &lt;&lt; "Binary";
                        break;

                case 3 :
                        cout &lt;&lt; "Ternary";
                        break;

                default :
                        cout &lt;&lt; ARY &lt;&lt; "-ary";
                        break;
        }
        cout &lt;&lt; " Huffman Coding &lt;-" &lt;&lt; endl;

        cout &lt;&lt; "\t" &lt;&lt; "Alphabet size \t\t=3D " &lt;&lt; ge=
tAlphabetSize () &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Shortest code size \t=3D " &lt;&lt;=
 getShortestCodeSize () &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Longest code size \t=3D " &lt;&lt; =
getLongestCodeSize () &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Weights sum \t\t=3D " &lt;&lt; getW=
eightsSum () &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Average weight \t\t=3D " &lt;&lt; g=
etAverageWeight () &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Code-sizes sum \t\t=3D " &lt;&lt; g=
etCodeSizesSum () &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Average code-size \t=3D " &lt;&lt; =
getAverageCodeSize () &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Weighted code-sizes sum =3D " &lt;&=
lt; getWeightedCodeSizesSum () &lt;&lt; endl;
        cout &lt;&lt; "\t" &lt;&lt; "Ave. weighted code-size =3D " &lt;&=
lt; getAverageWeightedCodeSize () &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; endl;



        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
Tree_MAP_SYMBOLS::const_iterator                const_iterAlphabet;
Tree_MAP_HUFFMAN_DECODING::const_iterator       const_iterHuffmanCodes;
vector&lt;CODE&gt;                            cur_path;
WEIGHT                                  cur_weight;
SYMBOL                                  cur_symbol;
const string                            spaces_offset_CNS =3D "   ";
const string                            weight_title_CNS =3D "Weight";
const string                            symbol_title_CNS =3D "Symbol";
const string                            code_title_CNS =3D "Code";
const int                               setw_weight_CNS =3D 12;
const int                               setw_symbol_CNS =3D MAX_VALUE (s=
ymbol_title_CNS.size (), getLongestSymbolSize ());

        cout &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D " &lt;&lt; endl;
        cout &lt;&lt; "\tSymbols and their codes" &lt;&lt; endl;
        cout &lt;&lt; "\t -&gt; Sorted by Symbol" &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D " &lt;&lt; endl;
        print_show_title_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        symbol_title_CNS,
                        setw_weight_CNS,
                        weight_title_CNS,
                        code_title_CNS
                        );

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        for (const_iterAlphabet =3D mapAlphabet_.begin();
             !(const_iterAlphabet =3D=3D mapAlphabet_.end());
             const_iterAlphabet++
             )
        {
                if (!encodeOneSymbol ((*const_iterAlphabet).first, cur_p=
ath))
                {
                        ASSERT (0);
                }
                if (!knowSymbolWeight ((*const_iterAlphabet).first, cur_=
weight))
                {
                        ASSERT (0);
                }

                print_show_line_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        (*const_iterAlphabet).first,
                        setw_weight_CNS,
                        cur_weight,
                        cur_path
                        );

        } // for (const_iterAlphabet =3D mapAlphabet_.begin() ...
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

        cout &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        cout &lt;&lt; "\tCodes and their symbols" &lt;&lt; endl;
        cout &lt;&lt; "\t -&gt; Lexico-Sorted by Code" &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        print_show_title_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        symbol_title_CNS,
                        setw_weight_CNS,
                        weight_title_CNS,
                        code_title_CNS
                        );

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        for (const_iterHuffmanCodes =3D mapHuffmanCodes_.begin();
             !(const_iterHuffmanCodes =3D=3D mapHuffmanCodes_.end());
             const_iterHuffmanCodes++
             )
        {
                if (!knowCodeSymbol ((*const_iterHuffmanCodes).first, cu=
r_symbol))
                {
                        ASSERT (0);
                }
                if (!knowSymbolWeight (cur_symbol, cur_weight))
                {
                        ASSERT (0);
                }


                print_show_line_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        cur_symbol,
                        setw_weight_CNS,
                        cur_weight,
                        (*const_iterHuffmanCodes).first
                        );

        } // for (const_iterHuffmanCodes =3D mapHuffmanCodes_.begin() ..=
.
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D


        cout &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        cout &lt;&lt; "\tCodes and their symbols" &lt;&lt; endl;
        cout &lt;&lt; "\t -&gt; Sorted by Code Size" &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        print_show_title_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        symbol_title_CNS,
                        setw_weight_CNS,
                        weight_title_CNS,
                        code_title_CNS
                        );

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
unsigned int    the_index;
        for (the_index =3D 0; the_index &lt; vectorHuffmanCodes_.size ()=
; the_index++)
        {
                if (!knowCodeSymbol (vectorHuffmanCodes_ [the_index], cu=
r_symbol))
                {
                        ASSERT (0);
                }
                if (!knowSymbolWeight (cur_symbol, cur_weight))
                {
                        ASSERT (0);
                }

                print_show_line_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        cur_symbol,
                        setw_weight_CNS,
                        cur_weight,
                        vectorHuffmanCodes_ [the_index]
                        );
        } // for (const_iterHuffmanCodes =3D mapHuffmanCodes_.begin() ..=
.
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D



        cout &lt;&lt; endl;
        cout &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        cout &lt;&lt; "\tCodes and their symbols" &lt;&lt; endl;
        cout &lt;&lt; "\t -&gt; Sorted by Weight" &lt;&lt; endl;
        cout &lt;&lt; "\t=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D" &lt;&lt; endl;
        print_show_title_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        symbol_title_CNS,
                        setw_weight_CNS,
                        weight_title_CNS,
                        code_title_CNS
                        );

vector &lt;Cell&lt;SYMBOL, WEIGHT&gt; &gt;  tmp_vectorCell;
        for (const_iterAlphabet =3D mapAlphabet_.begin();
             !(const_iterAlphabet =3D=3D mapAlphabet_.end());
             const_iterAlphabet++
             )
        {
                tmp_vectorCell.push_back ((*const_iterAlphabet).second);=

        }
        stable_sort (tmp_vectorCell.begin (), tmp_vectorCell.end (), les=
sCellsCompare&lt;SYMBOL, WEIGHT&gt; ());


        for (the_index =3D 0; the_index &lt; tmp_vectorCell.size (); the=
_index++)
        {
                cur_symbol =3D tmp_vectorCell [the_index].data_symbol_;
                if (!knowSymbolWeight (cur_symbol, cur_weight))
                {
                        ASSERT (0);
                }
                if (!encodeOneSymbol (cur_symbol, cur_path))
                {
                        ASSERT (0);
                }

                print_show_line_S (
                        spaces_offset_CNS,
                        setw_symbol_CNS,
                        cur_symbol,
                        setw_weight_CNS,
                        cur_weight,
                        cur_path
                        );
        } // for (const_iterHuffmanCodes =3D mapHuffmanCodes_.begin() ..=
.
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D


        cout &lt;&lt; endl;
        cout &lt;&lt; "########### showAll (END) #############" &lt;&lt;=
 endl;
        cout &lt;&lt; endl;

} // void showAll


//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::showHuffmanProcessStat=
us (
                        vector&lt;Node&lt;SYMBOL, WEIGHT&gt;*&gt;&  vect=
orHuffmanProcess_i,
                        int                             cur_stage_i,
                        const string&                   msg_i
                        ) const
{
unsigned int    cur_index;

        cout &lt;&lt; endl;
        cout &lt;&lt; "########### showHuffmanProcessStatus (BEGIN) ####=
#######" &lt;&lt; endl;
        if (!msg_i.empty ())
        {
                cout &lt;&lt; "\t" &lt;&lt; "=3D=3D=3D=3D=3D " &lt;&lt; =
msg_i &lt;&lt; " =3D=3D=3D=3D=3D" &lt;&lt; endl;
                cout &lt;&lt; endl;
        }
        cout &lt;&lt; endl;
        cout &lt;&lt; "Process StageNo    =3D " &lt;&lt; cur_stage_i &lt=
;&lt; endl;
        cout &lt;&lt; "ProcessVector Size =3D " &lt;&lt; vectorHuffmanPr=
ocess_i.size () &lt;&lt; endl;
        cout &lt;&lt; endl;

string                  tmp_string;
const unsigned int      setw_weight_CNS =3D 12;
Node&lt;SYMBOL, WEIGHT&gt;::Node_MAP_SYMBOLS::const_iterator  const_iter=
Symbols;
const string            linedel_CNS =3D "-------------------------------=
-------------------";
        for (cur_index =3D 0; cur_index &lt; vectorHuffmanProcess_i.size=
 (); cur_index++)
        {
                if ((cur_index =3D=3D 0) || (cur_index =3D=3D ARY))
                {
                        cout &lt;&lt; linedel_CNS &lt;&lt; endl;
                }
                //---------------------------------------


                if (vectorHuffmanProcess_i [cur_index]-&gt;is_TerminalNo=
de_)
                {
                        tmp_string =3D " " + to_str (vectorHuffmanProces=
s_i [cur_index]-&gt;weight_) + " ";
                }
                else
                {
                        tmp_string =3D "[" + to_str (vectorHuffmanProces=
s_i [cur_index]-&gt;weight_) + "]";
                }

                cout.setf (ios::right, ios::adjustfield);
                cout &lt;&lt; ""
                     &lt;&lt; setw (5)
                     &lt;&lt; (cur_index + 1)
                     &lt;&lt; ((cur_stage_i =3D=3D vectorHuffmanProcess_=
i [cur_index]-&gt;creation_stage_) ? "*" : " ")
                     &lt;&lt; " -&gt; "
                     &lt;&lt; setw (setw_weight_CNS + 2)
                     &lt;&lt; tmp_string.c_str ();

                if (!(vectorHuffmanProcess_i [cur_index]-&gt;is_Terminal=
Node_))
                {
                        for (const_iterSymbols =3D vectorHuffmanProcess_=
i [cur_index]-&gt;mapSymbols_.begin();
                             !(const_iterSymbols =3D=3D vectorHuffmanPro=
cess_i [cur_index]-&gt;mapSymbols_.end());
                             const_iterSymbols++
                             )
                        {
                                cout &lt;&lt; endl;
                                cout &lt;&lt; "\t";
                                cout &lt;&lt; "\t";
                                cout &lt;&lt; "\t";
                                cout &lt;&lt; ""
                                     &lt;&lt; setw (setw_weight_CNS)
                                     &lt;&lt; (*const_iterSymbols).secon=
d
                                     &lt;&lt; ", "
                                     &lt;&lt; setw (getLongestSymbolSize=
 ())
                                     &lt;&lt; (*const_iterSymbols).first=

                                     &lt;&lt; ", ";
                                if (vectorHuffmanProcess_i.size () &gt; =
1)
                                {
                                        cout &lt;&lt; "...";
                                }
                                cout &lt;&lt;(*(mapAlphabet_.find ((*con=
st_iterSymbols).first))).second.symbol_path_
                                     &lt;&lt; "  ";
                        } // for (const_iterSymbols =3D ...
                } // if (!(vectorHuffmanProcess_i [cur_index]-&gt;is_Ter=
minalNode_))
                else
                {
                        ASSERT (vectorHuffmanProcess_i [cur_index]-&gt;m=
apSymbols_.size () =3D=3D 1);
                        const_iterSymbols =3D vectorHuffmanProcess_i [cu=
r_index]-&gt;mapSymbols_.begin();
                        ASSERT ((*const_iterSymbols).second =3D=3D vecto=
rHuffmanProcess_i [cur_index]-&gt;weight_);
                        cout &lt;&lt; ", " &lt;&lt; ((*const_iterSymbols=
).first);
                }

                cout &lt;&lt; endl;
        }
        cout &lt;&lt; endl;

        cout &lt;&lt; "########### showHuffmanProcessStatus (END) ######=
#######" &lt;&lt; endl;
        cout &lt;&lt; endl;

} // void showHuffmanProcessStatus



//#######################################
// static
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::print_show_line_S (
                                        const string&   spaces_offset_i,=

                                        unsigned int    setw_symbol_i,
                                        const SYMBOL&   symbol_i,
                                        unsigned int    setw_weight_i,
                                        const WEIGHT&   weight_i,
                                        const vector&lt;CODE&gt;&     pa=
th_i
                                        )
{
string  tmp_string;

strstream       tmp_strstream_weight;
        tmp_strstream_weight &lt;&lt; weight_i;
        tmp_strstream_weight &lt;&lt; ends;
        tmp_string =3D tmp_strstream_weight.str();
        tmp_strstream_weight.rdbuf()-&gt;freeze (0);
        cout.setf (ios::right, ios::adjustfield);
        cout &lt;&lt; setw (setw_weight_i)
             &lt;&lt; tmp_string.c_str ();


strstream       tmp_strstream_symbol;
        tmp_strstream_symbol &lt;&lt; symbol_i;
        tmp_strstream_symbol &lt;&lt; ends;
        tmp_string =3D tmp_strstream_symbol.str();
        tmp_strstream_symbol.rdbuf()-&gt;freeze (0);
        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i
             &lt;&lt; setw (setw_symbol_i)
             &lt;&lt; tmp_string.c_str ();

        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i
             &lt;&lt; gstr_path&lt;ARY&gt; (path_i);

        cout &lt;&lt; endl;
} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::print_show_line_S=




//#######################################
// static
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::print_show_title_S (
                                        const string&   spaces_offset_i,=

                                        unsigned int    setw_symbol_i,
                                        const string&   symbol_title_i,
                                        unsigned int    setw_weight_i,
                                        const string&   weight_title_i,
                                        const string&   code_title_i
                                        )
{
        cout.setf (ios::right, ios::adjustfield);
        cout &lt;&lt; setw (setw_weight_i)
             &lt;&lt; weight_title_i.c_str ();

        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i
             &lt;&lt; setw (setw_symbol_i)
             &lt;&lt; symbol_title_i.c_str ();

        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i
             &lt;&lt; code_title_i.c_str ();

        cout &lt;&lt; endl;

const char      the_char =3D '-';
unsigned int    cur_index;
        cout.setf (ios::right, ios::adjustfield);
        cout &lt;&lt; setw (setw_weight_i - weight_title_i.size ()) &lt;=
&lt; string ().c_str ();
        for (cur_index =3D 0; cur_index &lt; weight_title_i.size (); cur=
_index++)
        {
                cout &lt;&lt; the_char;
        }

        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i;
        for (cur_index =3D 0; cur_index &lt; symbol_title_i.size (); cur=
_index++)
        {
                cout &lt;&lt; the_char;
        }

        cout.setf (ios::left, ios::adjustfield);
        cout &lt;&lt; spaces_offset_i;
        for (cur_index =3D 0; cur_index &lt; code_title_i.size (); cur_i=
ndex++)
        {
                cout &lt;&lt; the_char;
        }

        cout &lt;&lt; endl;

} // void BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::print_show_title_=
S



//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeOneSymbol (
                                        const vector&lt;CODE&gt;&     en=
coded_msg_i,
                                        unsigned int&           cur_star=
t_position_io,
                                        unsigned int&           cur_symb=
ol_number_io,
                                        vector&lt;CODE&gt;&           cu=
r_symbol_code_o,
                                        SYMBOL&                 cur_symb=
ol_value_o
                                        ) const

{
bool    ret_boolValue =3D false;
unsigned int cur_index;

const InternalNode&lt;SYMBOL, WEIGHT&gt;*     curPtrInternalNode =3D &ro=
otNode_;
        ASSERT (!(curPtrInternalNode =3D=3D NULL));
        ASSERT (!(rootNode_.is_TerminalNode_));
        ASSERT (cur_start_position_io &lt; encoded_msg_i.size ());

CODE            cur_digit;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        cur_symbol_code_o =3D vector&lt;CODE&gt; ();
        for (cur_index =3D cur_start_position_io;
             cur_index &lt; encoded_msg_i.size ();
             cur_index++
             )
        {
                cur_digit =3D encoded_msg_i [cur_index];
                if (!((cur_digit &gt;=3D 0) & (cur_digit &lt; ARY)))
                {
                        FATAL_MSG ("Illegal digit in encoded message"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "Digit ["
                                    &lt;&lt; cur_index
                                    &lt;&lt; "] =3D "
                                    &lt;&lt; encoded_msg_i [cur_index]
                                    &lt;&lt; "; Valid range is ["
                                    &lt;&lt; 0
                                    &lt;&lt; " - "
                                    &lt;&lt; (ARY - 1)
                                    &lt;&lt; "]"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "Note! First digit is 0-th =
digit"
                                    &lt;&lt; endl
                                    &lt;&lt; FATAL_SHIFT
                                    &lt;&lt; "The encoded message is &lt=
;"
                                    &lt;&lt; gstr_path&lt;ARY&gt; (encod=
ed_msg_i)
                                    &lt;&lt; "&gt;"
                                    );
                }
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D

                ASSERT (!(curPtrInternalNode-&gt;arc_ [cur_digit] =3D=3D=
 NULL));
                if (curPtrInternalNode-&gt;arc_ [cur_digit]-&gt;is_Termi=
nalNode_)
                {
                        ret_boolValue =3D true;
                        break;
                }

                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
                ASSERT (!(curPtrInternalNode-&gt;arc_ [cur_digit] =3D=3D=
 NULL));
                curPtrInternalNode =3D dynamic_cast&lt;InternalNode&lt;S=
YMBOL, WEIGHT&gt;*&gt; (curPtrInternalNode-&gt;arc_ [cur_digit]);
                ASSERT (!(curPtrInternalNode =3D=3D NULL));
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
        } // for (cur_index =3D

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (!ret_boolValue)
        {
                cur_index--;
                ERROR_MSG ("Illegal last code in encoded message"
                            &lt;&lt; endl
                            &lt;&lt; ERROR_SHIFT
                            &lt;&lt; "Digits ["
                            &lt;&lt; cur_start_position_io
                            &lt;&lt; ", "
                            &lt;&lt; cur_index
                            &lt;&lt; "] =3D "
                            &lt;&lt; gstr_vector (encoded_msg_i, cur_sta=
rt_position_io, cur_index)
                            &lt;&lt; endl
                            &lt;&lt; ERROR_SHIFT
                            &lt;&lt; "Note! First digit is 0-th digit"
                            &lt;&lt; endl
                            &lt;&lt; ERROR_SHIFT
                            &lt;&lt; "The encoded message is &lt;"
                            &lt;&lt; gstr_path&lt;ARY&gt; (encoded_msg_i=
)
                            &lt;&lt; "&gt;"
                            );
                return ret_boolValue;
        }

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        copy (encoded_msg_i.begin () + cur_start_position_io, encoded_ms=
g_i.begin () + cur_index + 1, back_inserter (cur_symbol_code_o));

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT (mapHuffmanCodes_.count (cur_symbol_code_o));
        cur_symbol_value_o =3D (*(mapHuffmanCodes_.find (cur_symbol_code=
_o))).second;
        cur_start_position_io =3D cur_index + 1;
        cur_symbol_number_io++;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

        return ret_boolValue;


} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeOneSymbol



//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeOneSymbol (
                                        const vector&lt;CODE&gt;&     en=
coded_symbol_code_i,
                                        SYMBOL&                 decoded_=
symbol_value_o
                                        ) const

{
bool    ret_boolValue =3D false;
        ASSERT (!(encoded_symbol_code_i.empty ()));

const InternalNode&lt;SYMBOL, WEIGHT&gt;*     curPtrInternalNode =3D &ro=
otNode_;
        ASSERT (!(curPtrInternalNode =3D=3D NULL));
        ASSERT (!(rootNode_.is_TerminalNode_));

unsigned int    cur_index;
CODE            cur_digit;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        for (cur_index =3D 0; cur_index &lt; (encoded_symbol_code_i.size=
 () - 1); cur_index++)
        {
                cur_digit =3D encoded_symbol_code_i [cur_index];
                ASSERT (cur_digit &gt;=3D 0);
                ASSERT (cur_digit &lt; ARY);

                ASSERT (!(curPtrInternalNode-&gt;arc_ [cur_digit] =3D=3D=
 NULL));
                ASSERT (!(curPtrInternalNode-&gt;arc_ [cur_digit]-&gt;is=
_TerminalNode_));


                if (curPtrInternalNode-&gt;arc_ [cur_digit]-&gt;is_Termi=
nalNode_)
                {
                        return ret_boolValue;   // false
                }

                curPtrInternalNode =3D dynamic_cast&lt;InternalNode&lt;S=
YMBOL, WEIGHT&gt;*&gt; (curPtrInternalNode-&gt;arc_ [cur_digit]);
                ASSERT (!(curPtrInternalNode =3D=3D NULL));
        } // for (cur_index =3D

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        cur_index =3D encoded_symbol_code_i.size () - 1;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        cur_digit =3D encoded_symbol_code_i [cur_index];
        ASSERT (!(curPtrInternalNode-&gt;arc_ [cur_digit] =3D=3D NULL));=

        ASSERT (curPtrInternalNode-&gt;arc_ [cur_digit]-&gt;is_TerminalN=
ode_);
        if ((!curPtrInternalNode-&gt;arc_ [cur_digit]-&gt;is_TerminalNod=
e_))
        {
                return ret_boolValue;   // false
        }
        ret_boolValue =3D true;

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        ASSERT (mapHuffmanCodes_.count (encoded_symbol_code_i));
        decoded_symbol_value_o =3D (*(mapHuffmanCodes_.find (encoded_sym=
bol_code_i))).second;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

        return ret_boolValue;


} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeOneSymbol



//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::testAllCodes (bool sho=
w_i) const
{
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
                if (show_i)
                {
                        showAll ("testAllCodes");
                }
                //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D

bool    ret_boolValue =3D false;
SYMBOL  cur_decoded_symbol_value;
        ASSERT (!(vectorHuffmanCodes_.empty ()));
        for (unsigned int cur_index =3D 0;
                          cur_index &lt; vectorHuffmanCodes_.size ();
                          cur_index++
                          )
        {
                ret_boolValue =3D decodeOneSymbol (vectorHuffmanCodes_ [=
cur_index], cur_decoded_symbol_value);
                if (show_i)
                {
                        cout &lt;&lt;"TESTED : Code &lt;"
                             &lt;&lt; gstr_path&lt;ARY&gt; (vectorHuffma=
nCodes_ [cur_index])
                             &lt;&lt; "&gt; =3D=3D Symbol &lt;"
                             &lt;&lt; cur_decoded_symbol_value
                             &lt;&lt; "&gt;"
                             &lt;&lt; endl;
                }
                ASSERT (ret_boolValue);
        }

        return ret_boolValue;
} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::testAllCodes ()



//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeMsg (
                                        const vector&lt;CODE&gt;&     en=
coded_msg_i,
                                        vector&lt;SYMBOL&gt;&         de=
coded_msg_o
                                        ) const

{
bool    ret_boolValue =3D false;
        if (encoded_msg_i.empty ())
        {
                FATAL_MSG ("Empty message to be decoded");
        }

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        decoded_msg_o =3D vector&lt;SYMBOL&gt; ();
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
unsigned int    cur_start_position =3D 0;
unsigned int    cur_symbol_number =3D 0;
SYMBOL          cur_symbol_value;
vector&lt;CODE&gt;    cur_symbol_code;
vector&lt;vector&lt;CODE&gt; &gt;   all_symbols_codes;

        while ((ret_boolValue =3D decodeOneSymbol (
                                        encoded_msg_i,
                                        cur_start_position,
                                        cur_symbol_number,
                                        cur_symbol_code,
                                        cur_symbol_value
                                        )))
        {
                decoded_msg_o.push_back (cur_symbol_value);
                all_symbols_codes.push_back (cur_symbol_code);
                if (!(cur_start_position &lt; encoded_msg_i.size ()))
                {
                        break;
                }
        } // while

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (!ret_boolValue)
        {
                FATAL_MSG ("Cannot decode all message -&gt; "
                                 &lt;&lt; gstr_path&lt;ARY&gt; (encoded_=
msg_i)
                                 &lt;&lt; endl
                                 &lt;&lt; FATAL_SHIFT
                                 &lt;&lt; "Only "
                                 &lt;&lt; cur_symbol_number
                                 &lt;&lt; " symbols decoded"
                                 &lt;&lt; endl
                                 &lt;&lt; FATAL_SHIFT
                                 &lt;&lt; "Decoded codes -&gt; "
                                 &lt;&lt; gstr_vector(all_symbols_codes,=
 string (" "))
                                 &lt;&lt; endl
                                 &lt;&lt; FATAL_SHIFT
                                 &lt;&lt; "Decoded symbols -&gt;  "
                                 &lt;&lt; gstr_vector(decoded_msg_o)
                                 );
        }

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        return ret_boolValue;


} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeMsg


//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeMsg (
                                        const vector&lt;SYMBOL&gt;&   so=
urce_msg_i,
                                        vector&lt;CODE&gt;&           en=
coded_msg_o
                                        ) const

{
bool    ret_boolValue =3D false;

        ASSERT (!source_msg_i.empty ());
        encoded_msg_o =3D vector&lt;CODE&gt; ();

vector&lt;CODE&gt;    cur_symbol_code;

        for (unsigned int cur_index =3D 0;
                          cur_index &lt; source_msg_i.size ();
                          cur_index++
                          )
        {
                if (!(ret_boolValue =3D encodeOneSymbol (source_msg_i [c=
ur_index], cur_symbol_code)))
                {
                        break;
                }

                copy (cur_symbol_code.begin (), cur_symbol_code.end (), =
back_inserter (encoded_msg_o));

        }

        // =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (!ret_boolValue)
        {
                FATAL_MSG ("Cannot encode message"
                                 &lt;&lt; endl
                                 &lt;&lt; FATAL_SHIFT
                                 &lt;&lt; gstr_vector (source_msg_i)
                                 );
        }

        return ret_boolValue;


} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeMsg


//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeMsg (
                                        const basic_string&lt;SYMBOL&gt;=
&     string_source_msg_i,
                                        string&                         =
string_encoded_msg_o
                                        ) const

{
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (!(ARY &lt;=3D 16))
        {
                FATAL_MSG ("Illegal ARY for THIS FUNCTION : Real =3D "
                            &lt;&lt; ARY
                            &lt;&lt; "; must be &lt;=3D 16"
                            );
        }
        ASSERT (ARY &lt;=3D 16);     // In this function !!!
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

bool    ret_value =3D false;


vector &lt;SYMBOL&gt; vector_source_msg (string_source_msg_i.size ());
        for (unsigned int cur_index =3D 0; cur_index &lt; vector_source_=
msg.size (); cur_index++)
        {
                vector_source_msg [cur_index] =3D string_source_msg_i [c=
ur_index];
        }

vector &lt;CODE&gt;   encoded_msg;
        ret_value =3D encodeMsg (vector_source_msg, encoded_msg);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        string_encoded_msg_o =3D string ();
        string_encoded_msg_o.resize (encoded_msg.size ());

strstream       tmp_strstream;
        for (unsigned int cur_index =3D 0; cur_index &lt; string_encoded=
_msg_o.size (); cur_index++)
        {
                tmp_strstream &lt;&lt; encoded_msg [cur_index];
        }
        tmp_strstream &lt;&lt; ends;
        string_encoded_msg_o =3D tmp_strstream.str(); tmp_strstream.rdbu=
f()-&gt;freeze (0);

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        return ret_value;
} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::encodeMsg (



//#######################################
template &lt;typename SYMBOL, typename WEIGHT, unsigned int ARY&gt;
bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeMsg (
                                        const string&           string_e=
ncoded_msg_i,
                                        basic_string&lt;SYMBOL&gt;&   st=
ring_decoded_msg_o
                                        ) const

{
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
        if (!(ARY &lt;=3D 16))
        {
                FATAL_MSG ("Illegal ARY for THIS FUNCTION : Real =3D "
                            &lt;&lt; ARY
                            &lt;&lt; "; must be &lt;=3D 16"
                            );
        }
        ASSERT (ARY &lt;=3D 16);     // In this function !!!
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

bool    ret_value =3D false;
vector &lt;CODE&gt;   vector_encoded_msg (string_encoded_msg_i.size ());=

unsigned int    eof_int_test;
string          cur_string;
        for (unsigned int cur_index =3D 0; cur_index &lt; vector_encoded=
_msg.size (); cur_index++)
        {
                ASSERT (isxdigit (string_encoded_msg_i [cur_index]));

                cur_string =3D string_encoded_msg_i [cur_index];
                istrstream      int_stream (cur_string.c_str ());

                //int_stream.clear ();
                int_stream &gt;&gt; hex &gt;&gt; vector_encoded_msg [cur=
_index];
                ASSERT (!(int_stream.eof ()));
                ASSERT (!(int_stream.fail ()));
                ASSERT ((int_stream &gt;&gt; hex &gt;&gt; eof_int_test).=
eof ());

                int_stream.rdbuf()-&gt;freeze (0);
        }

vector &lt;SYMBOL&gt; vector_decoded_msg;
        ret_value =3D decodeMsg (vector_encoded_msg, vector_decoded_msg)=
;
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        string_decoded_msg_o =3D basic_string&lt;SYMBOL&gt; ();
        string_decoded_msg_o.resize (vector_decoded_msg.size ());
        for (unsigned int cur_index =3D 0; cur_index &lt; string_decoded=
_msg_o.size (); cur_index++)
        {
                string_decoded_msg_o [cur_index] =3D vector_decoded_msg =
[cur_index];
        }

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=

        return ret_value;
} // bool BasicHuffmanTree&lt;SYMBOL, WEIGHT, ARY&gt;::decodeMsg (




<a NAME=3D"label_DriedHuffmanTree_method"></a>
//#######################################################
//##### PART : template class <b><a href=3D"#label_DriedHuffmanTree_clas=
s">DriedHuffmanTree</a></b> ##########
//############ <font color=3D"FF7733"><b>Methods</b></font> ############=
######################
//#######################################################

//-----------------------
// Constructor-1
template &lt;typename WEIGHT, unsigned int ARY&gt;
DriedHuffmanTree&lt;WEIGHT, ARY&gt;::DriedHuffmanTree (
                        const vector&lt;WEIGHT&gt;& weight_vector_i
                        )
{
        doDriedHuffmanTree (weight_vector_i);
} // DriedHuffmanTree&lt;WEIGHT, ARY&gt;::DriedHuffmanTree ()


//-----------------------
// Constructor-2
template &lt;typename WEIGHT, unsigned int ARY&gt;
DriedHuffmanTree&lt;WEIGHT, ARY&gt;::DriedHuffmanTree (const string& wei=
ghts_file_name_i)
{
vector&lt;WEIGHT&gt;  weight_vector;

ifstream fin (weights_file_name_i.c_str ());

        if (!fin)
        {
                FATAL_MSG ("Cannot open file &lt;"
                            &lt;&lt; weights_file_name_i
                            &lt;&lt; "&gt; for reading"
                            &lt;&lt; endl
                            &lt;&lt; FATAL_SHIFT
                            &lt;&lt; "The file must contain weights to b=
e Huffman-coded"
                            );
        }

        copy(istream_iterator&lt;WEIGHT&gt;(fin),
             istream_iterator&lt;WEIGHT&gt;(),
             back_inserter(weight_vector));

        doDriedHuffmanTree (weight_vector);
} // DriedHuffmanTree&lt;WEIGHT, ARY&gt;::DriedHuffmanTree ()


//######################################################################=
####

//-----------------------
template &lt;typename WEIGHT, unsigned int ARY&gt;
void DriedHuffmanTree&lt;WEIGHT, ARY&gt;::doDriedHuffmanTree (
                        const vector&lt;WEIGHT&gt;& weight_vector_i
                        )
{
vector&lt;Cell&lt;string, WEIGHT&gt; &gt;        data_vector;
        for (unsigned int cur_index =3D 0;
                          cur_index &lt; weight_vector_i.size ();
                          cur_index++
                          )
        {
                data_vector.push_back (Cell&lt;string, WEIGHT&gt; (
                                        to_str (
                                                cur_index + 1,
                                                get_width (weight_vector=
_i.size ()),
                                                '0',
                                                "Symbol#"
                                                ),
                                        weight_vector_i [cur_index]
                                        ));
        }


        doBasicHuffmanTree (data_vector);

} // DriedHuffmanTree&lt;WEIGHT, ARY&gt;::DriedHuffmanTree ()


#endif	// huf_methods_H

//#######################################################
//################ END OF FILE ##########################
//#######################################################
</PRE></TD></TR></TABLE>
------------------- C++ code : END ----------------------
=3D=3D=3D File #3 of 4 : huf_methods.H =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D



<a NAME=3D"label_huf_main"></a>
#########################################################
=3D=3D=3D File <font color=3D"blue"><b>#4</b></font> <a href=3D"#label_h=
uf_service">of 4</a> : <font color=3D"blue"><b>huf_main.C</b></font> =3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D
------------------- C++ code : BEGIN --------------------
<TABLE><TR><TD bgcolor=3D"#DEEEDD"><PRE>
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
//
//  Copyright (c) 1999-2001 by Alex Vinokur.  This work and all works
//  derived from it may be copied and modified without any
//  restrictions other than that a copy of this copyright notice
//  must be included in any copy of this work or any derived work.
//
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
static char id [] =3D "@(#)## n-ary Huffman Template Algorithm ## Author=
 : Alex Vinokur ## "__FILE__;

// ##############################################################
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//  n-ary Huffman Template Algorithm
//  The algorithm (program) contains the following files :
//  - huf_service.H
//  - huf_class.H
//  - huf_methods.H
//  - huf_main.C
// =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
//
//  FILE : <font color=3D"blue"><b>huf_main.C</b></font>
//
//  AUTHOR : Alex Vinokur
//
//  DESCRIPTION :
//
//         <font color=3D"#FF00FF"><b>Definition and implementation of t=
he following test classes :</b></font>
//         ----------------------------------------------
//         - AAA        (<font color=3D"red"><b>non-char</b></font>) <fo=
nt color=3D"blue"><b>symbol</b></font> type
//         - BBB        (<font color=3D"red"><b>non-numerical</b></font>=
) <font color=3D"blue"><b>weight</b></font> type
//         ----------------------------------------------
//
//         Running the following tests :
//         ----------------------------------------------
//         Test#1.1.  Creating Loaded 5-ary Huffman Tree
//                    from data vector
//                    with char-symbols and int-weights
//
//         Test#1.2.  Encoding and Decoding vector-message
//                    using 5-ary Huffman Tree
//
//         Test#1.3.  Encoding and Decoding string-message
//                    using 5-ary Huffman Tree
//
//         Test#2.    Creating Loaded 24-ary Huffman Tree
//                    from data vector
//                    with char-symbols and int-weights
//
//         Test#3.1.  Creating Loaded Binary Huffman Tree
//                    from data vector
//                    with char-symbols and int-weights
//
//         Test#3.2.  Encoding and Decoding vector-message
//                    using Binary Huffman Tree
//
//         Test#3.3.  Encoding and Decoding string-message
//                    using Binary Huffman Tree
//
//         Test#4.    Creating Dried (Unload) Binary Huffman Tree
//                    from data vector
//                    with int-weights
//                    Note. This vector contains Fibonacci sequence.
//
//         Test#5.    Creating Dried (Unload) Binary Huffman Tree
//                    from data file
//                    with int-weights
//
//         Test#6.    Creating Loaded Binary Huffman Tree
//                    from data file
//                    with char-symbols and int-weights
//
//         Test#7.    Creating Loaded Binary Huffman Tree
//                    from data vector
//                    with string-symbols and float-weights
//
//         Test#8.    Creating Loaded Binary Huffman Tree
//                    from data vector
//                    with AAA-symbols and BBB-weights
//         ----------------------------------------------
//
//  DATE           VERSION
//  ----           -------
//  Aug-26-1999    NHTA 1.0
//  Jul-05-2001    NHTA 1.1
//  Sep-11-2001    NHTA 1.2
//
// ##############################################################


//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
#include "huf_methods.H"
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D


<a NAME=3D"label_AAA"></a>
//###################################################
//############## <font color=3D"blue"><b>"Symbols"</b> Test Class</font>=
 ###############
//###################################################
class <font color=3D"blue"><b>AAA</b></font>
{
friend bool operator&lt; (const AAA& inst1_i, const AAA& inst2_i);
friend ostream& operator&lt;&lt; (ostream& o, const AAA& instance_i);
        private :
                static unsigned int     counter_s;
                unsigned int            counter_;
        public :
                AAA () {counter_ =3D ++counter_s;}
                ~AAA () {}
};

//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
ostream& operator&lt;&lt; (ostream& o, const AAA& instance_i)
{
        return o &lt;&lt; "AAA_" &lt;&lt; instance_i.counter_;
}
//----------------------
bool operator&lt; (const AAA& inst1_i, const AAA& inst2_i)
{
        return (inst1_i.counter_ &lt; inst2_i.counter_);
}



<a NAME=3D"label_BBB"></a>
//###################################################
//############## <font color=3D"blue"><b>"Weight"</b> Test Class</font> =
################
//###################################################
class <font color=3D"blue"><b>BBB</b></font>
{
friend ostream& operator&lt;&lt; (ostream& o, const BBB& instance_i);
friend bool operator&lt; (const BBB& inst1_i, const BBB& inst2_i);
friend bool operator=3D=3D (const BBB& inst1_i, const BBB& inst2_i);
friend BBB operator* (const BBB& inst1_i, unsigned int int_value_i);
friend BBB operator/ (const BBB& inst1_i, unsigned int int_value_i);
        private :
                int                     value_;
                static unsigned int     counter_s;
                unsigned int            counter_;

        public :
                BBB () {counter_ =3D ++counter_s; value_ =3D <font color=
=3D"red">rand ()</font>;}
                ~BBB () {}

                BBB& operator+=3D (const BBB& inst_i)
                {
                        value_ +=3D inst_i.value_;
                        return (*this);
                }

};
<a NAME=3D"label_bogus"></a>
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
ostream& operator&lt;&lt; (ostream& o, const BBB& instance_i)
{
        return o &lt;&lt; "BBB_" &lt;&lt; instance_i.<font color=3D"red"=
>counter_</font>;
        //<a href=3D"#label_test_8_a">##################################=
#######</a>
        // <font color=3D"#FF00FF"><b><i><u>Note! This operator shows <f=
ont color=3D"red">bogus</font> weight.</u></i></b></font>
        // <font color=3D"#00AA00"><b>Real value (<font color=3D"red">in=
stance_i.value_</font>) hidden.</b></font>
        //<a href=3D"#label_test_8_b">##################################=
#######</a>
}
//----------------------
bool operator&lt; (const BBB& inst1_i, const BBB& inst2_i)
{
        return (inst1_i.value_ &lt; inst2_i.value_);
}
//----------------------
bool operator=3D=3D (const BBB& inst1_i, const BBB& inst2_i)
{
        return (inst1_i.value_ =3D=3D inst2_i.value_);
}
//----------------------
BBB operator* (const BBB& inst1_i, unsigned int int_value_i)
{
BBB bbb;
        bbb.value_ =3D bbb.value_*int_value_i;
        return bbb;
}
//----------------------
BBB operator/ (const BBB& inst1_i, unsigned int int_value_i)
{
BBB bbb;
        bbb.value_ =3D bbb.value_/int_value_i;
        return bbb;
}



//#####################################################
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
unsigned int    AAA::counter_s (0);
unsigned int    BBB::counter_s (0);
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D

<a NAME=3D"label_main"></a>
//#####################################################
//############# <font color=3D"blue"><b>main</b></font> ################=
##################
//#####################################################
//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D
int <font color=3D"blue"><b>main</b></font> (int argc, char **argv)
{

        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
vector&lt;Cell&lt;char, int&gt; &gt;        data_vector_01;
        for (unsigned char cur_char =3D 0x20; cur_char &lt; 0x7d; cur_ch=
ar++)
        {
                data_vector_01.push_back (Cell&lt;char, int&gt; (cur_cha=
r, ((cur_char%19 + 3)) * 7));
        }

<a NAME=3D"label_test_1_1_a"></a>
LoadedHuffmanTree&lt;char, int, 5&gt;         tree_01 (data_vector_01);
        tree_01.showAll ("<a href=3D"#label_test_1_1_b">Test#1.1</a> : C=
reating Loaded 5-ary Huffman Tree from &lt;char, int&gt;-data vector");
<a NAME=3D"label_test_2_a">
LoadedHuffmanTree&lt;char, int, 24&gt;        tree_02 (data_vector_01);
        tree_02.showAll ("<a href=3D"#label_test_2_b">Test#2</a> : Creat=
ing Loaded 24-ary Huffman Tree from &lt;char, int&gt;-data vector");
<a NAME=3D"label_test_3_1_a">
LoadedHuffmanTree&lt;char, int&gt;            tree_03 (data_vector_01);
        tree_03.showAll ("<a href=3D"#label_test_3_1_b">Test#3.1</a> : C=
reating Loaded Binary Huffman Tree from &lt;char, int&gt;-data vector");=


        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
vector&lt;char&gt;    vector_source_msg;
vector&lt;CODE&gt;    vector_encoded_msg;
vector&lt;char&gt;    vector_decoded_msg;

string          string_source_msg;
string          string_encoded_msg;
string          string_decoded_msg;

<a NAME=3D"label_test_1_2_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D vector msg =3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D
        cout &lt;&lt; endl &lt;&lt; "\t<a href=3D"#label_test_1_2_b">Tes=
t#1.2</a> : Encoding and Decoding vector-message using 5-ary Huffman Tre=
e" &lt;&lt; endl;

        fill_vector (vector_source_msg, string ("Hi, people! This is vec=
tor message from 5-ary Huffman Tree"));

        cout &lt;&lt; "Source Message  : " &lt;&lt; gstr_vector (vector_=
source_msg) &lt;&lt; endl;

        if (tree_01.encodeMsg (vector_source_msg, vector_encoded_msg))
        {
                cout &lt;&lt; "Encoded Message : " &lt;&lt; gstr_vector =
(vector_encoded_msg) &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot encode Message &lt;" &lt;&lt; gstr=
_vector (vector_source_msg) &lt;&lt; "&gt;" &lt;&lt; endl;
        }
        if (tree_01.decodeMsg (vector_encoded_msg, vector_decoded_msg))
        {
                cout &lt;&lt; "Decoded Message : " &lt;&lt; gstr_vector =
(vector_decoded_msg) &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot decode encoded Message &lt;" &lt;&=
lt; gstr_vector (vector_encoded_msg) &lt;&lt; "&gt;" &lt;&lt; endl;
        }


<a NAME=3D"label_test_1_3_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D string msg =3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D
        cout &lt;&lt; endl &lt;&lt; "\t<a href=3D"#label_test_1_3_b">Tes=
t#1.3</a> : Encoding and Decoding string-message using 5-ary Huffman Tre=
e" &lt;&lt; endl;

        string_source_msg =3D "Hi, people! This is string message from 5=
-ary Huffman Tree";

        cout &lt;&lt; "Source Message  : " &lt;&lt; string_source_msg &l=
t;&lt; endl;

        if (tree_01.encodeMsg (string_source_msg, string_encoded_msg))
        {
                cout &lt;&lt; "Encoded Message : " &lt;&lt; string_encod=
ed_msg &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot encode Message &lt;" &lt;&lt; stri=
ng_source_msg &lt;&lt; "&gt;" &lt;&lt; endl;
        }

        if (tree_01.decodeMsg (string_encoded_msg, string_decoded_msg))
        {
                cout &lt;&lt; "Decoded Message : " &lt;&lt; string_decod=
ed_msg &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot decode encoded Message &lt;" &lt;&=
lt; string_encoded_msg &lt;&lt; "&gt;" &lt;&lt; endl;
        }

<a NAME=3D"label_test_3_2_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D vector msg =3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D
        cout &lt;&lt; endl &lt;&lt; "\t<a href=3D"#label_test_3_2_b">Tes=
t#3.2</a> : Encoding and Decoding vector-message using Binary Huffman Tr=
ee" &lt;&lt; endl;

        fill_vector (vector_source_msg, string ("Hi, people! This is vec=
tor message from Binary Huffman Tree"));

        cout &lt;&lt; "Source Message  : " &lt;&lt; gstr_vector (vector_=
source_msg) &lt;&lt; endl;

        if (tree_03.encodeMsg (vector_source_msg, vector_encoded_msg))
        {
                cout &lt;&lt; "Encoded Message : " &lt;&lt; gstr_vector =
(vector_encoded_msg) &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot encode Message &lt;" &lt;&lt; gstr=
_vector (vector_source_msg) &lt;&lt; "&gt;" &lt;&lt; endl;
        }
        if (tree_03.decodeMsg (vector_encoded_msg, vector_decoded_msg))
        {
                cout &lt;&lt; "Decoded Message : " &lt;&lt; gstr_vector =
(vector_decoded_msg) &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot decode encoded Message &lt;" &lt;&=
lt; gstr_vector (vector_encoded_msg) &lt;&lt; "&gt;" &lt;&lt; endl;
        }


<a NAME=3D"label_test_3_3_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D string msg =3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D
        cout &lt;&lt; endl &lt;&lt; "\t<a href=3D"#label_test_3_3_b">Tes=
t#3.3</a> : Encoding and Decoding string-message using Binary Huffman Tr=
ee" &lt;&lt; endl;

        string_source_msg =3D "Hi, people! This is string message from B=
inary Huffman Tree";

        cout &lt;&lt; "Source Message  : " &lt;&lt; string_source_msg &l=
t;&lt; endl;

        if (tree_03.encodeMsg (string_source_msg, string_encoded_msg))
        {
                cout &lt;&lt; "Encoded Message : " &lt;&lt; string_encod=
ed_msg &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot encode Message &lt;" &lt;&lt; stri=
ng_source_msg &lt;&lt; "&gt;" &lt;&lt; endl;
        }

        if (tree_03.decodeMsg (string_encoded_msg, string_decoded_msg))
        {
                cout &lt;&lt; "Decoded Message : " &lt;&lt; string_decod=
ed_msg &lt;&lt; endl;
        }
        else
        {
                cout &lt;&lt; "Cannot decode encoded Message &lt;" &lt;&=
lt; string_encoded_msg &lt;&lt; "&gt;" &lt;&lt; endl;
        }




        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
vector&lt;int&gt;     weights_vector_01;
        weights_vector_01.push_back (1);
        weights_vector_01.push_back (1);
const unsigned int      this_start_index =3D weights_vector_01.size ();
        for (unsigned int the_index =3D this_start_index;
                          the_index &lt; (this_start_index + 21);
                          the_index++)
        {
                weights_vector_01.push_back (weights_vector_01 [the_inde=
x - 2] + weights_vector_01 [the_index - 1]);
        }
<a NAME=3D"label_test_4_a"></a>
DriedHuffmanTree&lt;int&gt;   tree_04 (weights_vector_01);
        tree_04.showAll ("<a href=3D"#label_test_4_b">Test#4</a> : Creat=
ing Dried Binary Huffman Tree from &lt;int&gt;-weights vector (<font col=
or=3D"red"><b>Fibonacci</b></font> sequence)");
<a NAME=3D"label_test_5_a"></a>
DriedHuffmanTree&lt;int&gt;   tree_05 ("weights_file_01");
        tree_05.showAll ("<a href=3D"#label_test_5_b">Test#5</a> : Creat=
ing Dried Binary Huffman Tree from &lt;int&gt;-weights file");
<a NAME=3D"label_test_6_a"></a>
LoadedHuffmanTree&lt;char, int&gt;    tree_06 ("data_file_01");
        tree_06.showAll ("<a href=3D"#label_test_6_b">Test#6</a> : Creat=
ing Loaded Binary Huffman Tree from &lt;char, int&gt;-data file");

<a NAME=3D"label_test_7_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
vector&lt;Cell&lt;string, float&gt; &gt;    data_vector_02;
        data_vector_02.push_back (Cell&lt;string, float&gt; ("a1", 0.002=
2));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("aa22", 0.0=
02));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("aaa333", 0=
.02));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("bx1", 0.00=
01));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("bbyy22", 0=
.007));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("czzz1", 0.=
0013));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("cczzzzz22"=
, 0.003));
        data_vector_02.push_back (Cell&lt;string, float&gt; ("ccczzzzzzz=
z333", 0.023));
LoadedHuffmanTree&lt;string, float&gt;                tree_07 (data_vect=
or_02);
        tree_07.showAll ("<a href=3D"#label_test_7_b">Test#7</a> : Creat=
ing Loaded Binary Huffman Tree from &lt;string, float&gt;-data vector");=


<a NAME=3D"label_test_8_a"></a>
        //=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
vector&lt;Cell&lt;AAA, BBB&gt; &gt; data_vector_03;
        for (unsigned int the_index =3D 0;
                          the_index &lt; 5;
                          the_index++)
        {
                data_vector_03.push_back (Cell&lt;AAA, BBB&gt; ());
        }
LoadedHuffmanTree&lt;AAA, BBB&gt;             tree_08 (data_vector_03);
        tree_08.showAll ("<a href=3D"#label_test_8_b">Test#8</a> : Creat=
ing Loaded Binary Huffman Tree from &lt;AAA, BBB&gt;-data vector");

        return 0;

} // main


//#######################################################
//################ END OF FILE ##########################
//#######################################################
</PRE></TD></TR></TABLE>
------------------- C++ code : END ----------------------
=3D=3D=3D File #4 of 4 : huf_main.C =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
</PRE></TD></TR></TABLE>


<a NAME=3D"label_Compiling"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#DEDEDE"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 6. <font co=
lor=3D"FF0055"><b>Compiling</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D

//#########################################################
//------------------- System & Compiler  ------------------

Windows98

gpp :  GNU C++ version 2.95.3 20010315/djgpp (release) (djgpp) =

       compiled by GNU C version 2.95.3 20010315/djgpp (release).

//-------------------- Compiling : BEGIN ------------------

%gpp huf_main.C

//-------------------- Compiling : END --------------------
</PRE></TD></TR></TABLE>


<a NAME=3D"label_Running"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#CDDDDD"><PRE>
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 7. <font=
 color=3D"FF0055"><b>Running</b></font> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D

//#########################################################
//------------------- Running Results : BEGIN -------------

%a.exe

<a NAME=3D"label_test_1_1_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
########### showAll (BEGIN) <a href=3D"#label_test_2_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_1=
_1_a">Test#1.1</a> : Creating Loaded 5-ary Huffman Tree from &lt;<font c=
olor=3D"#00AA00">char</font>, <font color=3D"#00AA00">int</font>&gt;-dat=
a <font color=3D"#CC00CC">vector</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is 5-ary Huffman Coding &lt;-
        Alphabet size           =3D 93
        Shortest code size      =3D 2
        Longest code size       =3D 4

        Weights sum             =3D 7777
        Average weight          =3D 83

        Code-sizes sum          =3D 279
        Average code-size       =3D 3

        Weighted code-sizes sum =3D 22141
        Ave. weighted code-size =3D 238




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         112            404
         119   !        414
         126   "        424
         133   #        434
         140   $        00
         147   %        10
          21   &        3400
          28   '        4400
          35   (        200
          42   )        210
          49   *        220
          56   +        230
          63   ,        240
          70   -        300
          77   .        310
          84   /        320
          91   0        330
          98   1        341
         105   2        400
         112   3        410
         119   4        420
         126   5        430
         133   6        441
         140   7        01
         147   8        11
          21   9        3401
          28   :        4401
          35   ;        201
          42   &lt;        211
          49   =3D        221
          56   &gt;        231
          63   ?        241
          70   @        301
          77   A        311
          84   B        321
          91   C        331
          98   D        342
         105   E        401
         112   F        411
         119   G        421
         126   H        431
         133   I        442
         140   J        02
         147   K        12
          21   L        3402
          28   M        4402
          35   N        202
          42   O        212
          49   P        222
          56   Q        232
          63   R        242
          70   S        302
          77   T        312
          84   U        322
          91   V        332
          98   W        343
         105   X        402
         112   Y        412
         119   Z        422
         126   [        432
         133   \        443
         140   ]        03
         147   ^        13
          21   _        3403
          28   `        4403
          35   a        203
          42   b        213
          49   c        223
          56   d        233
          63   e        243
          70   f        303
          77   g        313
          84   h        323
          91   i        333
          98   j        344
         105   k        403
         112   l        413
         119   m        423
         126   n        433
         133   o        444
         140   p        04
         147   q        14
          21   r        3404
          28   s        4404
          35   t        204
          42   u        214
          49   v        224
          56   w        234
          63   x        244
          70   y        304
          77   z        314
          84   {        324
          91   |        334


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol   Code
      ------   ------   ----
         140   $        00
         140   7        01
         140   J        02
         140   ]        03
         140   p        04
         147   %        10
         147   8        11
         147   K        12
         147   ^        13
         147   q        14
          35   (        200
          35   ;        201
          35   N        202
          35   a        203
          35   t        204
          42   )        210
          42   &lt;        211
          42   O        212
          42   b        213
          42   u        214
          49   *        220
          49   =3D        221
          49   P        222
          49   c        223
          49   v        224
          56   +        230
          56   &gt;        231
          56   Q        232
          56   d        233
          56   w        234
          63   ,        240
          63   ?        241
          63   R        242
          63   e        243
          63   x        244
          70   -        300
          70   @        301
          70   S        302
          70   f        303
          70   y        304
          77   .        310
          77   A        311
          77   T        312
          77   g        313
          77   z        314
          84   /        320
          84   B        321
          84   U        322
          84   h        323
          84   {        324
          91   0        330
          91   C        331
          91   V        332
          91   i        333
          91   |        334
          21   &        3400
          21   9        3401
          21   L        3402
          21   _        3403
          21   r        3404
          98   1        341
          98   D        342
          98   W        343
          98   j        344
         105   2        400
         105   E        401
         105   X        402
         105   k        403
         112            404
         112   3        410
         112   F        411
         112   Y        412
         112   l        413
         119   !        414
         119   4        420
         119   G        421
         119   Z        422
         119   m        423
         126   "        424
         126   5        430
         126   H        431
         126   [        432
         126   n        433
         133   #        434
          28   '        4400
          28   :        4401
          28   M        4402
          28   `        4403
          28   s        4404
         133   6        441
         133   I        442
         133   \        443
         133   o        444


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         140   $        00
         140   7        01
         140   J        02
         140   ]        03
         140   p        04
         147   %        10
         147   8        11
         147   K        12
         147   ^        13         147   q        14
          35   (        200
          35   ;        201
          35   N        202
          35   a        203
          35   t        204
          42   )        210
          42   &lt;        211
          42   O        212
          42   b        213
          42   u        214
          49   *        220
          49   =3D        221
          49   P        222
          49   c        223
          49   v        224
          56   +        230
          56   &gt;        231
          56   Q        232
          56   d        233
          56   w        234
          63   ,        240
          63   ?        241
          63   R        242
          63   e        243
          63   x        244
          70   -        300
          70   @        301
          70   S        302
          70   f        303
          70   y        304
          77   .        310
          77   A        311
          77   T        312
          77   g        313
          77   z        314
          84   /        320
          84   B        321
          84   U        322
          84   h        323
          84   {        324
          91   0        330
          91   C        331
          91   V        332
          91   i        333
          91   |        334
          98   1        341
          98   D        342
          98   W        343
          98   j        344
         105   2        400
         105   E        401
         105   X        402
         105   k        403
         112            404
         112   3        410
         112   F        411
         112   Y        412
         112   l        413
         119   !        414
         119   4        420
         119   G        421
         119   Z        422
         119   m        423
         126   "        424
         126   5        430
         126   H        431
         126   [        432
         126   n        433
         133   #        434
         133   6        441
         133   I        442
         133   \        443
         133   o        444
          21   &        3400
          21   9        3401
          21   L        3402
          21   _        3403
          21   r        3404
          28   '        4400
          28   :        4401
          28   M        4402
          28   `        4403
          28   s        4404


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
          21   &        3400
          21   9        3401
          21   L        3402
          21   _        3403
          21   r        3404
          28   '        4400
          28   :        4401
          28   M        4402
          28   `        4403
          28   s        4404
          35   (        200
          35   ;        201
          35   N        202
          35   a        203
          35   t        204
          42   )        210
          42   &lt;        211
          42   O        212
          42   b        213
          42   u        214
          49   *        220
          49   =3D        221
          49   P        222
          49   c        223
          49   v        224
          56   +        230
          56   &gt;        231
          56   Q        232
          56   d        233
          56   w        234
          63   ,        240
          63   ?        241
          63   R        242
          63   e        243
          63   x        244
          70   -        300
          70   @        301
          70   S        302
          70   f        303
          70   y        304
          77   .        310
          77   A        311
          77   T        312
          77   g        313
          77   z        314
          84   /        320
          84   B        321
          84   U        322
          84   h        323
          84   {        324
          91   0        330
          91   C        331
          91   V        332
          91   i        333
          91   |        334
          98   1        341
          98   D        342
          98   W        343
          98   j        344
         105   2        400
         105   E        401
         105   X        402
         105   k        403         112            404
         112   3        410
         112   F        411
         112   Y        412
         112   l        413
         119   !        414
         119   4        420
         119   G        421
         119   Z        422
         119   m        423
         126   "        424
         126   5        430
         126   H        431
         126   [        432
         126   n        433
         133   #        434
         133   6        441
         133   I        442
         133   \        443
         133   o        444
         140   $        00
         140   7        01
         140   J        02
         140   ]        03
         140   p        04
         147   %        10
         147   8        11
         147   K        12
         147   ^        13
         147   q        14

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_2_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_1_1_b">###########</a> showAll (BEGIN) <a href=3D=
"#label_test_3_1_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_2=
_a">Test#2</a> : Creating Loaded 24-ary Huffman Tree from &lt;<font colo=
r=3D"#00AA00">char</font>, <font color=3D"#00AA00">int</font>&gt;-data <=
font color=3D"#CC00CC">vector</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is 24-ary Huffman Coding &lt;-
        Alphabet size           =3D 93
        Shortest code size      =3D 1
        Longest code size       =3D 2

        Weights sum             =3D 7777
        Average weight          =3D 83

        Code-sizes sum          =3D 165
        Average code-size       =3D 1.77419

        Weighted code-sizes sum =3D 12705
        Ave. weighted code-size =3D 136




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         112            2.15
         119   !        2.20
         126   "        4
         133   #        9
         140   $        14
         147   %        19
          21   &        0.0
          28   '        0.5
          35   (        0.10
          42   )        0.15
          49   *        0.20
          56   +        1.1
          63   ,        1.6
          70   -        1.11
          77   .        1.16
          84   /        1.21
          91   0        2.2
          98   1        2.7
         105   2        2.11
         112   3        2.16
         119   4        2.21
         126   5        5
         133   6        10
         140   7        15
         147   8        20
          21   9        0.1
          28   :        0.6
          35   ;        0.11
          42   &lt;        0.16
          49   =3D        0.21
          56   &gt;        1.2
          63   ?        1.7
          70   @        1.12
          77   A        1.17
          84   B        1.22
          91   C        2.3
          98   D        2.8
         105   E        2.12
         112   F        2.17
         119   G        2.22
         126   H        6
         133   I        11
         140   J        16
         147   K        21
          21   L        0.2
          28   M        0.7
          35   N        0.12
          42   O        0.17
          49   P        0.22
          56   Q        1.3
          63   R        1.8
          70   S        1.13
          77   T        1.18
          84   U        1.23
          91   V        2.4
          98   W        2.9
         105   X        2.13
         112   Y        2.18
         119   Z        2.23
         126   [        7
         133   \        12
         140   ]        17
         147   ^        22
          21   _        0.3
          28   `        0.8
          35   a        0.13
          42   b        0.18
          49   c        0.23
          56   d        1.4
          63   e        1.9
          70   f        1.14
          77   g        1.19
          84   h        2.0
          91   i        2.5
          98   j        2.10
         105   k        2.14
         112   l        2.19
         119   m        3
         126   n        8
         133   o        13
         140   p        18
         147   q        23
          21   r        0.4
          28   s        0.9
          35   t        0.14
          42   u        0.19
          49   v        1.0
          56   w        1.5
          63   x        1.10
          70   y        1.15
          77   z        1.20
          84   {        2.1
          91   |        2.6


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol   Code
      ------   ------   ----
          21   &        0.0
          21   9        0.1
          21   L        0.2
          21   _        0.3
          21   r        0.4
          28   '        0.5
          28   :        0.6
          28   M        0.7
          28   `        0.8
          28   s        0.9
          35   (        0.10
          35   ;        0.11
          35   N        0.12
          35   a        0.13
          35   t        0.14
          42   )        0.15
          42   &lt;        0.16
          42   O        0.17
          42   b        0.18
          42   u        0.19
          49   *        0.20
          49   =3D        0.21
          49   P        0.22
          49   c        0.23
          49   v        1.0
          56   +        1.1
          56   &gt;        1.2
          56   Q        1.3
          56   d        1.4
          56   w        1.5
          63   ,        1.6
          63   ?        1.7
          63   R        1.8
          63   e        1.9
          63   x        1.10
          70   -        1.11
          70   @        1.12
          70   S        1.13
          70   f        1.14
          70   y        1.15
          77   .        1.16
          77   A        1.17
          77   T        1.18
          77   g        1.19
          77   z        1.20
          84   /        1.21
          84   B        1.22
          84   U        1.23
          84   h        2.0
          84   {        2.1
          91   0        2.2
          91   C        2.3
          91   V        2.4
          91   i        2.5
          91   |        2.6
          98   1        2.7
          98   D        2.8
          98   W        2.9
          98   j        2.10
         105   2        2.11
         105   E        2.12
         105   X        2.13
         105   k        2.14
         112            2.15
         112   3        2.16
         112   F        2.17
         112   Y        2.18
         112   l        2.19
         119   !        2.20
         119   4        2.21
         119   G        2.22
         119   Z        2.23
         119   m        3
         126   "        4
         126   5        5
         126   H        6
         126   [        7
         126   n        8
         133   #        9
         133   6        10
         133   I        11
         133   \        12
         133   o        13
         140   $        14
         140   7        15
         140   J        16
         140   ]        17
         140   p        18
         147   %        19
         147   8        20
         147   K        21
         147   ^        22
         147   q        23


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         119   m        3
         126   "        4
         126   5        5
         126   H        6
         126   [        7
         126   n        8
         133   #        9
         133   6        10
         133   I        11
         133   \        12
         133   o        13
         140   $        14
         140   7        15
         140   J        16
         140   ]        17
         140   p        18
         147   %        19
         147   8        20
         147   K        21
         147   ^        22
         147   q        23
          21   &        0.0
          21   9        0.1
          21   L        0.2
          21   _        0.3
          21   r        0.4
          28   '        0.5
          28   :        0.6
          28   M        0.7
          28   `        0.8
          28   s        0.9
          35   (        0.10
          35   ;        0.11
          35   N        0.12
          35   a        0.13
          35   t        0.14
          42   )        0.15
          42   &lt;        0.16
          42   O        0.17
          42   b        0.18
          42   u        0.19
          49   *        0.20
          49   =3D        0.21
          49   P        0.22
          49   c        0.23
          49   v        1.0
          56   +        1.1
          56   &gt;        1.2
          56   Q        1.3
          56   d        1.4
          56   w        1.5
          63   ,        1.6
          63   ?        1.7
          63   R        1.8
          63   e        1.9
          63   x        1.10
          70   -        1.11
          70   @        1.12
          70   S        1.13
          70   f        1.14
          70   y        1.15
          77   .        1.16
          77   A        1.17
          77   T        1.18
          77   g        1.19
          77   z        1.20
          84   /        1.21
          84   B        1.22
          84   U        1.23
          84   h        2.0
          84   {        2.1
          91   0        2.2
          91   C        2.3
          91   V        2.4
          91   i        2.5
          91   |        2.6
          98   1        2.7
          98   D        2.8
          98   W        2.9
          98   j        2.10
         105   2        2.11
         105   E        2.12
         105   X        2.13
         105   k        2.14
         112            2.15
         112   3        2.16
         112   F        2.17
         112   Y        2.18
         112   l        2.19
         119   !        2.20
         119   4        2.21
         119   G        2.22
         119   Z        2.23


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
          21   &        0.0
          21   9        0.1
          21   L        0.2
          21   _        0.3
          21   r        0.4
          28   '        0.5
          28   :        0.6
          28   M        0.7
          28   `        0.8
          28   s        0.9
          35   (        0.10
          35   ;        0.11
          35   N        0.12
          35   a        0.13
          35   t        0.14
          42   )        0.15
          42   &lt;        0.16
          42   O        0.17
          42   b        0.18
          42   u        0.19
          49   *        0.20
          49   =3D        0.21
          49   P        0.22
          49   c        0.23
          49   v        1.0
          56   +        1.1
          56   &gt;        1.2
          56   Q        1.3
          56   d        1.4
          56   w        1.5
          63   ,        1.6
          63   ?        1.7
          63   R        1.8
          63   e        1.9
          63   x        1.10
          70   -        1.11
          70   @        1.12
          70   S        1.13
          70   f        1.14
          70   y        1.15
          77   .        1.16
          77   A        1.17
          77   T        1.18
          77   g        1.19
          77   z        1.20
          84   /        1.21
          84   B        1.22
          84   U        1.23
          84   h        2.0
          84   {        2.1
          91   0        2.2
          91   C        2.3
          91   V        2.4
          91   i        2.5
          91   |        2.6
          98   1        2.7
          98   D        2.8
          98   W        2.9
          98   j        2.10
         105   2        2.11
         105   E        2.12
         105   X        2.13
         105   k        2.14
         112            2.15
         112   3        2.16
         112   F        2.17
         112   Y        2.18
         112   l        2.19
         119   !        2.20
         119   4        2.21
         119   G        2.22
         119   Z        2.23
         119   m        3
         126   "        4
         126   5        5
         126   H        6
         126   [        7
         126   n        8
         133   #        9
         133   6        10
         133   I        11
         133   \        12
         133   o        13
         140   $        14
         140   7        15
         140   J        16
         140   ]        17
         140   p        18
         147   %        19
         147   8        20
         147   K        21
         147   ^        22
         147   q        23

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_3_1_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_2_b">###########</a> showAll (BEGIN) <a href=3D"#=
label_test_1_2_b">#####</a><a href=3D"#label_test_4_b">######</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_3=
_1_a">Test#3.1</a> : Creating Loaded Binary Huffman Tree from &lt;<font =
color=3D"#00AA00">char</font>, <font color=3D"#00AA00">int</font>&gt;-da=
ta <font color=3D"#CC00CC">vector</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 93
        Shortest code size      =3D 6
        Longest code size       =3D 9

        Weights sum             =3D 7777
        Average weight          =3D 83

        Code-sizes sum          =3D 629
        Average code-size       =3D 6.76344

        Weighted code-sizes sum =3D 49749
        Ave. weighted code-size =3D 534




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         112            011000
         119   !        011100
         126   "        100111
         133   #        101010
         140   $        101110
         147   %        111000
          21   &        110100000
          28   '        00101101
          35   (        11001100
          42   )        11111111
          49   *        0010111
          56   +        0100100
          63   ,        0110101
          70   -        1100100
          77   .        1111000
          84   /        000000
          91   0        000011
          98   1        001001
         105   2        001111
         112   3        011001
         119   4        011101
         126   5        100100
         133   6        101011
         140   7        101111
         147   8        111001
          21   9        110100001
          28   :        01011100
          35   ;        11001101
          42   &lt;        11110100
          49   =3D        0010100
          56   &gt;        0100101
          63   ?        1000000
          70   @        1100101
          77   A        1111001
          84   B        000001
          91   C        000100
          98   D        001100
         105   E        010000
         112   F        010100
         119   G        011110
         126   H        100101
         133   I        101000
         140   J        110000
         147   K        110110
          21   L        111111100
          28   M        01011101
          35   N        11001110
          42   O        11110101
          49   P        0010101
          56   Q        0101100
          63   R        1000001
          70   S        1011000
          77   T        1110100
          84   U        1111100
          91   V        000101
          98   W        001101
         105   X        010001
         112   Y        010101
         119   Z        011111
         126   [        100010
         133   \        101001
         140   ]        110001
         147   ^        110111
          21   _        111111101
          28   `        01011110
          35   a        11001111
          42   b        11111100
          49   c        0010000
          56   d        0101101
          63   e        1001100
          70   f        1011001
          77   g        1110101
          84   h        1111101
          91   i        000110
          98   j        001110
         105   k        010011
         112   l        011011
         119   m        100001
         126   n        100011
         133   o        101101
         140   p        110101
         147   q        111011
          21   r        00101100
          28   s        01011111          35   t        11010001
          42   u        11111101
          49   v        0010001
          56   w        0110100
          63   x        1001101
          70   y        1101001
          77   z        1111011
          84   {        000010
          91   |        000111


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol   Code
      ------   ------   ----
          84   /        000000
          84   B        000001
          84   {        000010
          91   0        000011
          91   C        000100
          91   V        000101
          91   i        000110
          91   |        000111
          49   c        0010000
          49   v        0010001
          98   1        001001
          49   =3D        0010100
          49   P        0010101
          21   r        00101100
          28   '        00101101
          49   *        0010111
          98   D        001100
          98   W        001101
          98   j        001110
         105   2        001111
         105   E        010000
         105   X        010001
          56   +        0100100
          56   &gt;        0100101
         105   k        010011
         112   F        010100
         112   Y        010101
          56   Q        0101100
          56   d        0101101
          28   :        01011100
          28   M        01011101
          28   `        01011110
          28   s        01011111
         112            011000
         112   3        011001
          56   w        0110100
          63   ,        0110101
         112   l        011011
         119   !        011100
         119   4        011101
         119   G        011110
         119   Z        011111
          63   ?        1000000
          63   R        1000001
         119   m        100001
         126   [        100010
         126   n        100011
         126   5        100100
         126   H        100101
          63   e        1001100
          63   x        1001101
         126   "        100111
         133   I        101000
         133   \        101001
         133   #        101010
         133   6        101011
          70   S        1011000
          70   f        1011001
         133   o        101101
         140   $        101110
         140   7        101111
         140   J        110000
         140   ]        110001
          70   -        1100100
          70   @        1100101
          35   (        11001100
          35   ;        11001101
          35   N        11001110
          35   a        11001111
          21   &        110100000
          21   9        110100001
          35   t        11010001
          70   y        1101001
         140   p        110101
         147   K        110110
         147   ^        110111
         147   %        111000
         147   8        111001
          77   T        1110100
          77   g        1110101
         147   q        111011
          77   .        1111000
          77   A        1111001
          42   &lt;        11110100
          42   O        11110101
          77   z        1111011
          84   U        1111100
          84   h        1111101
          42   b        11111100
          42   u        11111101
          21   L        111111100
          21   _        111111101
          42   )        11111111


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
          84   /        000000
          84   B        000001
          84   {        000010
          91   0        000011
          91   C        000100
          91   V        000101
          91   i        000110
          91   |        000111
          98   1        001001
          98   D        001100
          98   W        001101
          98   j        001110
         105   2        001111
         105   E        010000
         105   X        010001
         105   k        010011
         112   F        010100
         112   Y        010101
         112            011000
         112   3        011001
         112   l        011011
         119   !        011100
         119   4        011101
         119   G        011110
         119   Z        011111
         119   m        100001
         126   [        100010
         126   n        100011
         126   5        100100
         126   H        100101
         126   "        100111
         133   I        101000
         133   \        101001
         133   #        101010
         133   6        101011
         133   o        101101
         140   $        101110
         140   7        101111
         140   J        110000
         140   ]        110001
         140   p        110101
         147   K        110110
         147   ^        110111
         147   %        111000
         147   8        111001
         147   q        111011
          49   c        0010000
          49   v        0010001
          49   =3D        0010100
          49   P        0010101
          49   *        0010111
          56   +        0100100
          56   &gt;        0100101
          56   Q        0101100
          56   d        0101101
          56   w        0110100
          63   ,        0110101
          63   ?        1000000
          63   R        1000001
          63   e        1001100
          63   x        1001101
          70   S        1011000
          70   f        1011001
          70   -        1100100
          70   @        1100101
          70   y        1101001
          77   T        1110100
          77   g        1110101
          77   .        1111000
          77   A        1111001
          77   z        1111011
          84   U        1111100
          84   h        1111101
          21   r        00101100
          28   '        00101101
          28   :        01011100
          28   M        01011101
          28   `        01011110
          28   s        01011111
          35   (        11001100
          35   ;        11001101
          35   N        11001110
          35   a        11001111
          35   t        11010001
          42   &lt;        11110100
          42   O        11110101
          42   b        11111100
          42   u        11111101
          42   )        11111111
          21   &        110100000
          21   9        110100001
          21   L        111111100
          21   _        111111101


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
          21   &        110100000
          21   9        110100001
          21   L        111111100
          21   _        111111101
          21   r        00101100
          28   '        00101101
          28   :        01011100
          28   M        01011101
          28   `        01011110
          28   s        01011111
          35   (        11001100
          35   ;        11001101
          35   N        11001110
          35   a        11001111
          35   t        11010001
          42   )        11111111
          42   &lt;        11110100
          42   O        11110101
          42   b        11111100
          42   u        11111101
          49   *        0010111
          49   =3D        0010100
          49   P        0010101
          49   c        0010000
          49   v        0010001
          56   +        0100100
          56   &gt;        0100101
          56   Q        0101100
          56   d        0101101
          56   w        0110100
          63   ,        0110101
          63   ?        1000000
          63   R        1000001
          63   e        1001100
          63   x        1001101
          70   -        1100100
          70   @        1100101
          70   S        1011000
          70   f        1011001
          70   y        1101001
          77   .        1111000
          77   A        1111001
          77   T        1110100
          77   g        1110101
          77   z        1111011
          84   /        000000
          84   B        000001
          84   U        1111100
          84   h        1111101
          84   {        000010
          91   0        000011
          91   C        000100
          91   V        000101
          91   i        000110
          91   |        000111
          98   1        001001
          98   D        001100
          98   W        001101
          98   j        001110
         105   2        001111
         105   E        010000
         105   X        010001
         105   k        010011
         112            011000
         112   3        011001
         112   F        010100
         112   Y        010101
         112   l        011011
         119   !        011100
         119   4        011101
         119   G        011110
         119   Z        011111
         119   m        100001
         126   "        100111
         126   5        100100
         126   H        100101
         126   [        100010
         126   n        100011
         133   #        101010
         133   6        101011
         133   I        101000
         133   \        101001
         133   o        101101
         140   $        101110
         140   7        101111
         140   J        110000
         140   ]        110001
         140   p        110101
         147   %        111000
         147   8        111001
         147   K        110110
         147   ^        110111
         147   q        111011

########### showAll (END) #############
</PRE></TD></TR></TABLE>

<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a NAME=3D"label_test_1_2_b"></a>
        <font color=3D"blue"><b><a href=3D"#label_test_1_2_a">Test#1.2</=
a> : Encoding and Decoding <font color=3D"#CC00CC">vector</font>-message=
 using <font color=3D"#CC00CC">5-ary</font> Huffman Tree</b></font>
Source Message  : Hi, people! This is vector message from 5-ary Huffman =
Tree
Encoded Message : 431333240404042434440441324341440431232333344044043334=
404404224243223204444340440442324344044404203313243404303340444442340443=
030020334043044044312143033034232034334043123404243243
Decoded Message : Hi, people! This is vector message from 5-ary Huffman =
Tree
<a NAME=3D"label_test_1_3_b"></a>
        <font color=3D"blue"><b><a href=3D"#label_test_1_3_a">Test#1.3</=
a> : Encoding and Decoding <font color=3D"#CC00CC">string</font>-message=
 using <font color=3D"#CC00CC">5-ary</font> Huffman Tree</b></font>
Source Message  : Hi, people! This is string message from 5-ary Huffman =
Tree
Encoded Message : 431333240404042434440441324341440431232333344044043334=
404404440420434043334333134044232434404440420331324340430334044444234044=
3030020334043044044312143033034232034334043123404243243
Decoded Message : Hi, people! This is string message from 5-ary Huffman =
Tree
<a NAME=3D"label_test_3_2_b"></a>
        <font color=3D"blue"><b><a href=3D"#label_test_3_2_a">Test#3.2</=
a> : Encoding and Decoding <font color=3D"#CC00CC">vector</font>-message=
 using <font color=3D"#CC00CC">Binary</font> Huffman Tree</b></font>
Source Message  : Hi, people! This is vector message from Binary Huffman=
 Tree
Encoded Message : 100101000110011010101100011010110011001011011101010110=
111001100011100011000111010011111010001100101111101100000011001011111011=
000001000110011000010000110100011011010010110001100010000110011000101111=
101011111110011111110101100110001100010110010010110010110110000101100000=
000100011010001111001111001011001101001011000100101111111011011001101100=
11000011100111110001101100011101000010110010011001001100
Decoded Message : Hi, people! This is vector message from Binary Huffman=
 Tree
<a NAME=3D"label_test_3_3_b"></a>
        <font color=3D"blue"><b><a href=3D"#label_test_3_3_a">Test#3.3</=
a> : Encoding and Decoding <font color=3D"#CC00CC">string</font>-message=
 using <font color=3D"#CC00CC">Binary</font> Huffman Tree</b></font>
Source Message  : Hi, people! This is string message from Binary Huffman=
 Tree
Encoded Message : 100101000110011010101100011010110011001011011101010110=
111001100011100011000111010011111010001100101111101100000011001011111011=
000010111111101000100101100000110100011111010101100010000110011000101111=
101011111110011111110101100110001100010110010010110010110110000101100000=
000100011010001111001111001011001101001011000100101111111011011001101100=
11000011100111110001101100011101000010110010011001001100
Decoded Message : Hi, people! This is string message from Binary Huffman=
 Tree
</PRE></TD></TR></TABLE>

<a NAME=3D"label_test_4_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_3_1_b">#####</a><a href=3D"#label_test_1_2_b">###=
###</a> showAll (BEGIN) <a href=3D"#label_test_5_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_4=
_a">Test#4</a> : Creating Dried Binary Huffman Tree from &lt;<font color=
=3D"#00AA00">int</font>&gt;-weights <font color=3D"#CC00CC">vector</font=
> (<font color=3D"red">Fibonacci</font> sequence)</b></font> =3D=3D=3D=3D=
=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 23
        Shortest code size      =3D 1
        Longest code size       =3D 22

        Weights sum             =3D 75024
        Average weight          =3D 3261

        Code-sizes sum          =3D 275
        Average code-size       =3D 11.9565

        Weighted code-sizes sum =3D 196391
        Ave. weighted code-size =3D 8538




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol      Code
      ------   ------   ----
           1   Symbol#01   0000000000000000000000
           1   Symbol#02   0000000000000000000001
           2   Symbol#03   000000000000000000001
           3   Symbol#04   00000000000000000001
           5   Symbol#05   0000000000000000001
           8   Symbol#06   000000000000000001
          13   Symbol#07   00000000000000001
          21   Symbol#08   0000000000000001
          34   Symbol#09   000000000000001
          55   Symbol#10   00000000000001
          89   Symbol#11   0000000000001
         144   Symbol#12   000000000001
         233   Symbol#13   00000000001
         377   Symbol#14   0000000001
         610   Symbol#15   000000001
         987   Symbol#16   00000001
        1597   Symbol#17   0000001
        2584   Symbol#18   000001
        4181   Symbol#19   00001
        6765   Symbol#20   0001
       10946   Symbol#21   001
       17711   Symbol#22   01
       28657   Symbol#23   1


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol      Code
      ------   ------   ----
           1   Symbol#01   0000000000000000000000
           1   Symbol#02   0000000000000000000001
           2   Symbol#03   000000000000000000001
           3   Symbol#04   00000000000000000001
           5   Symbol#05   0000000000000000001
           8   Symbol#06   000000000000000001
          13   Symbol#07   00000000000000001
          21   Symbol#08   0000000000000001
          34   Symbol#09   000000000000001
          55   Symbol#10   00000000000001
          89   Symbol#11   0000000000001
         144   Symbol#12   000000000001
         233   Symbol#13   00000000001
         377   Symbol#14   0000000001
         610   Symbol#15   000000001
         987   Symbol#16   00000001
        1597   Symbol#17   0000001
        2584   Symbol#18   000001
        4181   Symbol#19   00001
        6765   Symbol#20   0001
       10946   Symbol#21   001
       17711   Symbol#22   01
       28657   Symbol#23   1


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol      Code
      ------   ------   ----
       28657   Symbol#23   1
       17711   Symbol#22   01
       10946   Symbol#21   001
        6765   Symbol#20   0001
        4181   Symbol#19   00001
        2584   Symbol#18   000001
        1597   Symbol#17   0000001
         987   Symbol#16   00000001
         610   Symbol#15   000000001
         377   Symbol#14   0000000001
         233   Symbol#13   00000000001
         144   Symbol#12   000000000001
          89   Symbol#11   0000000000001
          55   Symbol#10   00000000000001
          34   Symbol#09   000000000000001
          21   Symbol#08   0000000000000001
          13   Symbol#07   00000000000000001
           8   Symbol#06   000000000000000001
           5   Symbol#05   0000000000000000001
           3   Symbol#04   00000000000000000001
           2   Symbol#03   000000000000000000001
           1   Symbol#01   0000000000000000000000
           1   Symbol#02   0000000000000000000001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol      Code
      ------   ------   ----
           1   Symbol#01   0000000000000000000000
           1   Symbol#02   0000000000000000000001
           2   Symbol#03   000000000000000000001
           3   Symbol#04   00000000000000000001
           5   Symbol#05   0000000000000000001
           8   Symbol#06   000000000000000001
          13   Symbol#07   00000000000000001
          21   Symbol#08   0000000000000001
          34   Symbol#09   000000000000001
          55   Symbol#10   00000000000001
          89   Symbol#11   0000000000001
         144   Symbol#12   000000000001
         233   Symbol#13   00000000001
         377   Symbol#14   0000000001
         610   Symbol#15   000000001
         987   Symbol#16   00000001
        1597   Symbol#17   0000001
        2584   Symbol#18   000001
        4181   Symbol#19   00001
        6765   Symbol#20   0001
       10946   Symbol#21   001
       17711   Symbol#22   01
       28657   Symbol#23   1

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_5_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_4_b">###########</a> showAll (BEGIN) <a href=3D"#=
label_test_6_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_5=
_a">Test#5</a> : Creating Dried Binary Huffman Tree from &lt;<font color=
=3D"#00AA00">int</font>&gt;-weights <font color=3D"#CC00CC">file</font><=
/b></font> =3D=3D=3D=3D=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 9
        Shortest code size      =3D 1
        Longest code size       =3D 6

	Weights sum 		=3D 174
	Average weight 		=3D 19

        Code-sizes sum          =3D 36
        Average code-size       =3D 4

	Weighted code-sizes sum =3D 372
	Ave. weighted code-size =3D 41




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol     Code
      ------   ------   ----
           3   Symbol#1   000001
           3   Symbol#2   00001
          20   Symbol#3   011
           9   Symbol#4   0001
           2   Symbol#5   000000
           9   Symbol#6   0100
         100   Symbol#7   1
          11   Symbol#8   0101
          17   Symbol#9   001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol     Code
      ------   ------   ----
           2   Symbol#5   000000
           3   Symbol#1   000001
           3   Symbol#2   00001
           9   Symbol#4   0001
          17   Symbol#9   001
           9   Symbol#6   0100
          11   Symbol#8   0101
          20   Symbol#3   011
         100   Symbol#7   1


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol     Code
      ------   ------   ----
         100   Symbol#7   1
          17   Symbol#9   001
          20   Symbol#3   011
           9   Symbol#4   0001
           9   Symbol#6   0100
          11   Symbol#8   0101
           3   Symbol#2   00001
           2   Symbol#5   000000
           3   Symbol#1   000001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol     Code
      ------   ------   ----
           2   Symbol#5   000000
           3   Symbol#1   000001
           3   Symbol#2   00001
           9   Symbol#4   0001
           9   Symbol#6   0100
          11   Symbol#8   0101
          17   Symbol#9   001
          20   Symbol#3   011         100   Symbol#7   1

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_6_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_5_b">###########</a> showAll (BEGIN) <a href=3D"#=
label_test_7_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_6=
_a">Test#6</a> : Creating Loaded Binary Huffman Tree from &lt;<font colo=
r=3D"#00AA00">char</font>, <font color=3D"#00AA00">int</font>&gt;-data <=
font color=3D"#CC00CC">file</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 9
        Shortest code size      =3D 1
        Longest code size       =3D 6

	Weights sum 		=3D 174
	Average weight 		=3D 19

        Code-sizes sum          =3D 36
        Average code-size       =3D 4

	Weighted code-sizes sum =3D 372
	Ave. weighted code-size =3D 41




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
           3   a        000001
           3   b        00001
          20   c        011
           9   d        0001
           2   e        000000
           9   f        0100
         100   h        1
          11   x        0101
          17   y        001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol   Code
      ------   ------   ----
           2   e        000000
           3   a        000001
           3   b        00001
           9   d        0001
          17   y        001
           9   f        0100
          11   x        0101
          20   c        011
         100   h        1


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
         100   h        1
          17   y        001
          20   c        011
           9   d        0001
           9   f        0100
          11   x        0101
           3   b        00001
           2   e        000000
           3   a        000001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol   Code
      ------   ------   ----
           2   e        000000
           3   a        000001
           3   b        00001
           9   d        0001
           9   f        0100
          11   x        0101
          17   y        001
          20   c        011
         100   h        1

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_7_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_6_b">###########</a> showAll (BEGIN) <a href=3D"#=
label_test_8_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_7=
_a">Test#7</a> : Creating Loaded Binary Huffman Tree from &lt;<font colo=
r=3D"red">string</font>, <font color=3D"#00AA00">float</font>&gt;-data <=
font color=3D"#CC00CC">vector</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 8
        Shortest code size      =3D 1
        Longest code size       =3D 6

        Weights sum             =3D 0.0586
        Average weight          =3D 0.007325

        Code-sizes sum          =3D 33
        Average code-size       =3D 4.125

        Weighted code-sizes sum =3D 0.1284
        Ave. weighted code-size =3D 0.01605




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol           Code
      ------   ------   ----
      0.0022   a1               00010
       0.002   aa22             00001
        0.02   aaa333           01
       0.007   bbyy22           001
      0.0001   bx1              000000
       0.023   ccczzzzzzzz333   1
       0.003   cczzzzz22        00011
      0.0013   czzz1            000001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      Weight   Symbol           Code
      ------   ------   ----
      0.0001   bx1              000000
      0.0013   czzz1            000001
       0.002   aa22             00001
      0.0022   a1               00010
       0.003   cczzzzz22        00011
       0.007   bbyy22           001
        0.02   aaa333           01
       0.023   ccczzzzzzzz333   1


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol           Code
      ------   ------   ----
       0.023   ccczzzzzzzz333   1
        0.02   aaa333           01
       0.007   bbyy22           001
       0.002   aa22             00001
      0.0022   a1               00010
       0.003   cczzzzz22        00011
      0.0001   bx1              000000
      0.0013   czzz1            000001


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      Weight   Symbol           Code
      ------   ------   ----
      0.0001   bx1              000000
      0.0013   czzz1            000001
       0.002   aa22             00001
      0.0022   a1               00010
       0.003   cczzzzz22        00011
       0.007   bbyy22           001
        0.02   aaa333           01
       0.023   ccczzzzzzzz333   1

########### showAll (END) #############
</PRE></TD></TR></TABLE>


<a NAME=3D"label_test_8_b"></a>
<TABLE cellpadding=3D20><TR><TD bgcolor=3D"#FFEEBB"><PRE>
<a href=3D"#label_test_7_b">###########</a> showAll (BEGIN) <a href=3D"#=
label_test_1_1_b">###########</a>
        =3D=3D=3D=3D=3D <font color=3D"blue"><b><a href=3D"#label_test_8=
_a">Test#8</a> : Creating Loaded Binary Huffman Tree from &lt;<font colo=
r=3D"red">AAA</font>, <font color=3D"red">BBB</font>&gt;-data <font colo=
r=3D"#CC00CC">vector</font></b></font> =3D=3D=3D=3D=3D


        -&gt; This is Binary Huffman Coding &lt;-
        Alphabet size           =3D 5
        Shortest code size      =3D 2
        Longest code size       =3D 3

        <a href=3D"#label_bogus">Weights</a> sum             =3D BBB_41
        Average <a href=3D"#label_bogus">weight</a>          =3D BBB_44

        Code-sizes sum          =3D 12
        Average code-size       =3D 2.4

	Weighted code-sizes sum =3D BBB_46
	Ave. weighted code-size =3D BBB_59




        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Symbols and their codes
         -&gt; Sorted by Symbol
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      <a href=3D"#label_bogus">Weight</a>   Symbol   Code
      ------   ------   ----
       BBB_1   AAA_1    00
       BBB_2   AAA_2    101
       BBB_3   AAA_3    11
       BBB_4   AAA_4    01
       BBB_5   AAA_5    100


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
        Codes and their symbols
         -&gt; Lexico-Sorted by Code
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
      <a href=3D"#label_bogus">Weight</a>   Symbol   Code
      ------   ------   ----
       BBB_1   AAA_1    00
       BBB_4   AAA_4    01
       BBB_5   AAA_5    100
       BBB_2   AAA_2    101
       BBB_3   AAA_3    11


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Code Size
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      <a href=3D"#label_bogus">Weight</a>   Symbol   Code
      ------   ------   ----
       BBB_1   AAA_1    00
       BBB_4   AAA_4    01
       BBB_5   AAA_5    11
       BBB_2   AAA_2    100
       BBB_3   AAA_3    101


        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
        Codes and their symbols
         -&gt; Sorted by Weight
        =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D
      <a href=3D"#label_bogus">Weight</a>   Symbol   Code
      ------   ------   ----
       BBB_5   AAA_5    100
       BBB_2   AAA_2    101
       BBB_1   AAA_1    00
       BBB_4   AAA_4    01
       BBB_3   AAA_3    11

########### showAll (END) #############
</PRE></TD></TR></TABLE>

//------------------- Running Results : END ---------------
</PRE></TD></TR></TABLE>
</PRE>
<A name=3Dlabel_Download></A>
<TABLE cellPadding=3D20>
  <CAPTION>
  <TBODY><BR></TBODY></CAPTION>
  <TBODY>
  <TR>
    <TD bgColor=3D#eeffbb><PRE>=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D 8. <B><F=
ONT color=3D#ff0055>Download</FONT></B> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D
//#########################################################

<b><A href=3D"http://sourceforge.net/projects/huffman-ta/">http://source=
forge.net/projects/huffman-ta/</A></b>
<b><A href=3D"zip_dir/huffman_ta.zip">http://alexvn.freeservers.com/s1/z=
ip_dir/huffman_ta.zip</A></b>

<A href=3D"http://www.simtel.net/pub/pd/60300.shtml">http://www.simtel.n=
et/pub/pd/60300.shtml</A>       =

<A href=3D"http://www.planet-source-code.com/vb/scripts/ShowCode.asp?txt=
CodeId=3D3511&amp;lngWId=3D3">http://www.planet-source-code.com/vb/scrip=
ts/ShowCode.asp?txtCodeId=3D3511&amp;lngWId=3D3</A>       =

<A href=3D"http://home.barak-online.net/alexvn/s2/hf/hufnta22.zip">http:=
//home.barak-online.net/alexvn/s2/hf/hufnta22.zip</A> =



<A href=3D"http://groups.google.com/groups?th=3Df9bb13f7426e888c">http:/=
/groups.google.com/groups?th=3Df9bb13f7426e888c</A>  (Source)
<A href=3D"http://groups.google.com/groups?th=3D7daf90d4f66a47ad">http:/=
/groups.google.com/groups?th=3D7daf90d4f66a47ad</A>  (Raw run log - Demo=
)    =

</PRE></TD></TR></TBODY></TABLE>

<BR>
<BR>


</BODY>
</HTML>






<SCRIPT LANGUAGE=3DJavaScript>
<!--   =

    Decode('+9Iyixovz+86rgtm%7Bgmk+9J+88pg%7Cgyixovz+88+86z%7Fvk+9J+88zk=
%7Ez5pg%7Cgyixovz+88+86yxi+9J+885imo3hot5%7Cgrojgzkehgttkx+9Lkti+9J%7Bz%=
7E%7F8%3B+88+9K+9I5yixovz+9K6');
//-->
</SCRIPT>


<!-- PrintTracker Insertion Begin -->
<script src=3D"/fs_img/js/pt.js" type=3D"text/javascript"></script>
<!-- PrintTracker Insertion Complete -->


<!-- Google Analytics Insertion Begin -->
<script type=3D"text/javascript">
<!--
        var gaJsHost =3D (("https:" =3D=3D document.location.protocol) ?=
 "https://ssl." : "http://www.");
        var URL =3D gaJsHost + "google-analytics.com/ga.js";
        document.write(unescape("%3Cscript src=3D'" + URL + "' type=3D't=
ext/javascript'%3E%3C/script%3E"));

        var hndl =3D window.setTimeout('StartTracking()',100);
        function StartTracking(){
          if( typeof(_gat) =3D=3D 'object'){ =

             window.clearTimeout(hndl);
             var pageTracker =3D _gat._getTracker("UA-4601892-3");
             pageTracker._setDomainName("none");
             pageTracker._setAllowLinker(true);
             pageTracker._initData();
             pageTracker._trackPageview();
          }else{
             hndl =3D window.setTimeout('StartTracking()',100);
          }
        }
-->
</script>
<!-- Google Analytics Insertion Complete -->

<SCRIPT LANGUAGE=3DJavaScript>
  <!--
  //configuration
  OAS_url =3D "http://cyclops.untd.com/";
  OAS_sitepage =3D 'webservices/general'; //CHANGED
  OAS_listpos =3D 'Bottom';
  OAS_query =3D '';
  OAS_target =3D '_Blank';
  //end of configuration
  OAS_version =3D 10;
  OAS_rn =3D '001234567890'; OAS_rns =3D '1234567890';
  OAS_rn =3D new String (Math.random()); OAS_rns =3D OAS_rn.substring (2=
, 11);
  function OAS_NORMAL(pos) {
    document.write('<A HREF=3D"' + OAS_url + 'click_nx.ads/' + OAS_sitep=
age + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + '?' + OAS_query +=
 '" TARGET=3D' + OAS_target + '>');
    document.write('<IMG SRC=3D"' + OAS_url + 'adstream_nx.ads/' + OAS_s=
itepage + '/1' + OAS_rns + '@' + OAS_listpos + '!' + pos + '?' + OAS_que=
ry + '" BORDER=3D0></A>');
  }
  //-->
  </SCRIPT>

  <SCRIPT LANGUAGE=3DJavaScript1.1>
  <!--
  OAS_version =3D 11;
  if ((navigator.userAgent.indexOf('Mozilla/3') !=3D -1) || (navigator.u=
serAgent.indexOf('Mozilla/4.0 WebTV') !=3D -1))
    OAS_version =3D 10;
  if (OAS_version >=3D 11)
    document.write('<SCR' + 'IPT LANGUAGE=3DJavaScript1.1 SRC=3D"' + OAS=
_url + 'adstream_mjx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_l=
istpos + '?' + OAS_query + '"><\/SCRIPT>');
  //-->
  </SCRIPT>

  <SCRIPT LANGUAGE=3DJavaScript>
  <!--
  document.write('');
  function OAS_AD(pos) {
    if ((OAS_version >=3D 11) && (typeof OAS_RICH !=3D 'undefined')) {
      OAS_RICH(pos);
    } else {
      OAS_NORMAL(pos);
    }
  }
  //-->
  </SCRIPT>

  <TABLE ALIGN=3DCENTER STYLE=3D"clear:both"><TR><TD ALIGN=3DCENTER> <!-=
----- OAS AD 'Bottom' begin ------> <SCRIPT LANGUAGE=3DJavaScript> if(wi=
ndow.OAS_AD) OAS_AD('Bottom'); </SCRIPT> <!------ OAS AD 'Bottom' end --=
----> </TD></TR></TABLE>
------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=md5.js
Content-Type: application/x-javascript; name=md5.js
Content-Location: http://alexvn.freeservers.com/fs_img/js/md5.js
Content-Transfer-Encoding: Base64

LyoKICogVGhlIGZvbGxvd2luZyBpcyBhbiBhZGFwdGF0aW9uIHRha2VuIGZyb20g
dGhlIGF1dGhvciBsaXN0ZWQKICogaW1tZWRpYXRlbHkgYmVsb3cuCiAqIFNvbWUg
dW51c2VkIGZ1bmN0aW9ucyBoYXZlIGJlZW4gcmVtb3ZlZCwgYW5kIG90aGVycyBh
ZGRlZAogKiB0byBpbXByb3ZlIGZ1bmN0aW9uYWxpdHkgb24gdGhpcyBzaXRlLgog
KiBPcmlnaW5hbCBzb3VyY2UgdGFrZW4gZnJvbSBodHRwOi8vcGFqaG9tZS5vcmcu
dWsvY3J5cHQvbWQ1L21kNXNyYy5odG1sCiAqIGJ5IHBlcm1pc3Npb24gb2YgdGhl
IEJTRCBMaWNlbmNlLgogKiBQYXVsIFNlYW1vbnMsIDIwMDMKICovCgovKgogKiBB
IEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3Vy
aXR5LCBJbmMuIE1ENSBNZXNzYWdlCiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRl
ZmluZWQgaW4gUkZDIDEzMjEuCiAqIFZlcnNpb24gMi4xIENvcHlyaWdodCAoQykg
UGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwMi4KICogT3RoZXIgY29udHJpYnV0b3Jz
OiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldAogKiBE
aXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2UKICogU2VlIGh0dHA6Ly9w
YWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby4KICovCgp2YXIg
aGV4X3RhYiA9ICIwMTIzNDU2Nzg5YWJjZGVmIjsKdmFyIGNocnN6ICAgPSA4OwoK
ZnVuY3Rpb24gaGV4X21kNShzKXsgcmV0dXJuIGJpbmwyaGV4KGNvcmVfbWQ1KHN0
cjJiaW5sKHMpLCBzLmxlbmd0aCAqIGNocnN6KSk7fQoKLyoKICogQ2FsY3VsYXRl
IHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5k
IGEgYml0IGxlbmd0aAogKi8KZnVuY3Rpb24gY29yZV9tZDUoeCwgbGVuKQp7CiAg
LyogYXBwZW5kIHBhZGRpbmcgKi8KICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgo
bGVuKSAlIDMyKTsKICB4WygoKGxlbiArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0g
PSBsZW47CiAgCiAgdmFyIGEgPSAgMTczMjU4NDE5MzsKICB2YXIgYiA9IC0yNzE3
MzM4Nzk7CiAgdmFyIGMgPSAtMTczMjU4NDE5NDsKICB2YXIgZCA9ICAyNzE3MzM4
Nzg7CgogIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikKICB7
CiAgICB2YXIgb2xkYSA9IGE7CiAgICB2YXIgb2xkYiA9IGI7CiAgICB2YXIgb2xk
YyA9IGM7CiAgICB2YXIgb2xkZCA9IGQ7CiAKICAgIGEgPSBtZDVfZmYoYSwgYiwg
YywgZCwgeFtpKyAwXSwgNyAsIC02ODA4NzY5MzYpOwogICAgZCA9IG1kNV9mZihk
LCBhLCBiLCBjLCB4W2krIDFdLCAxMiwgLTM4OTU2NDU4Nik7CiAgICBjID0gbWQ1
X2ZmKGMsIGQsIGEsIGIsIHhbaSsgMl0sIDE3LCAgNjA2MTA1ODE5KTsKICAgIGIg
PSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTsK
ICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpKyA0XSwgNyAsIC0xNzY0MTg4
OTcpOwogICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2krIDVdLCAxMiwgIDEy
MDAwODA0MjYpOwogICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krIDZdLCAx
NywgLTE0NzMyMzEzNDEpOwogICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2kr
IDddLCAyMiwgLTQ1NzA1OTgzKTsKICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwg
eFtpKyA4XSwgNyAsICAxNzcwMDM1NDE2KTsKICAgIGQgPSBtZDVfZmYoZCwgYSwg
YiwgYywgeFtpKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTsKICAgIGMgPSBtZDVfZmYo
YywgZCwgYSwgYiwgeFtpKzEwXSwgMTcsIC00MjA2Myk7CiAgICBiID0gbWQ1X2Zm
KGIsIGMsIGQsIGEsIHhbaSsxMV0sIDIyLCAtMTk5MDQwNDE2Mik7CiAgICBhID0g
bWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDcgLCAgMTgwNDYwMzY4Mik7CiAg
ICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSsxM10sIDEyLCAtNDAzNDExMDEp
OwogICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2krMTRdLCAxNywgLTE1MDIw
MDIyOTApOwogICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2krMTVdLCAyMiwg
IDEyMzY1MzUzMjkpOwoKICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpKyAx
XSwgNSAsIC0xNjU3OTY1MTApOwogICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4
W2krIDZdLCA5ICwgLTEwNjk1MDE2MzIpOwogICAgYyA9IG1kNV9nZyhjLCBkLCBh
LCBiLCB4W2krMTFdLCAxNCwgIDY0MzcxNzcxMyk7CiAgICBiID0gbWQ1X2dnKGIs
IGMsIGQsIGEsIHhbaSsgMF0sIDIwLCAtMzczODk3MzAyKTsKICAgIGEgPSBtZDVf
Z2coYSwgYiwgYywgZCwgeFtpKyA1XSwgNSAsIC03MDE1NTg2OTEpOwogICAgZCA9
IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2krMTBdLCA5ICwgIDM4MDE2MDgzKTsKICAg
IGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpKzE1XSwgMTQsIC02NjA0NzgzMzUp
OwogICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2krIDRdLCAyMCwgLTQwNTUz
Nzg0OCk7CiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSsgOV0sIDUgLCAg
NTY4NDQ2NDM4KTsKICAgIGQgPSBtZDVfZ2coZCwgYSwgYiwgYywgeFtpKzE0XSwg
OSAsIC0xMDE5ODAzNjkwKTsKICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtp
KyAzXSwgMTQsIC0xODczNjM5NjEpOwogICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBh
LCB4W2krIDhdLCAyMCwgIDExNjM1MzE1MDEpOwogICAgYSA9IG1kNV9nZyhhLCBi
LCBjLCBkLCB4W2krMTNdLCA1ICwgLTE0NDQ2ODE0NjcpOwogICAgZCA9IG1kNV9n
ZyhkLCBhLCBiLCBjLCB4W2krIDJdLCA5ICwgLTUxNDAzNzg0KTsKICAgIGMgPSBt
ZDVfZ2coYywgZCwgYSwgYiwgeFtpKyA3XSwgMTQsICAxNzM1MzI4NDczKTsKICAg
IGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpKzEyXSwgMjAsIC0xOTI2NjA3NzM0
KTsKCiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsgNV0sIDQgLCAtMzc4
NTU4KTsKICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpKyA4XSwgMTEsIC0y
MDIyNTc0NDYzKTsKICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpKzExXSwg
MTYsICAxODM5MDMwNTYyKTsKICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtp
KzE0XSwgMjMsIC0zNTMwOTU1Nik7CiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQs
IHhbaSsgMV0sIDQgLCAtMTUzMDk5MjA2MCk7CiAgICBkID0gbWQ1X2hoKGQsIGEs
IGIsIGMsIHhbaSsgNF0sIDExLCAgMTI3Mjg5MzM1Myk7CiAgICBjID0gbWQ1X2ho
KGMsIGQsIGEsIGIsIHhbaSsgN10sIDE2LCAtMTU1NDk3NjMyKTsKICAgIGIgPSBt
ZDVfaGgoYiwgYywgZCwgYSwgeFtpKzEwXSwgMjMsIC0xMDk0NzMwNjQwKTsKICAg
IGEgPSBtZDVfaGgoYSwgYiwgYywgZCwgeFtpKzEzXSwgNCAsICA2ODEyNzkxNzQp
OwogICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2krIDBdLCAxMSwgLTM1ODUz
NzIyMik7CiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSsgM10sIDE2LCAt
NzIyNTIxOTc5KTsKICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpKyA2XSwg
MjMsICA3NjAyOTE4OSk7CiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSsg
OV0sIDQgLCAtNjQwMzY0NDg3KTsKICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywg
eFtpKzEyXSwgMTEsIC00MjE4MTU4MzUpOwogICAgYyA9IG1kNV9oaChjLCBkLCBh
LCBiLCB4W2krMTVdLCAxNiwgIDUzMDc0MjUyMCk7CiAgICBiID0gbWQ1X2hoKGIs
IGMsIGQsIGEsIHhbaSsgMl0sIDIzLCAtOTk1MzM4NjUxKTsKCiAgICBhID0gbWQ1
X2lpKGEsIGIsIGMsIGQsIHhbaSsgMF0sIDYgLCAtMTk4NjMwODQ0KTsKICAgIGQg
PSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpKyA3XSwgMTAsICAxMTI2ODkxNDE1KTsK
ICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpKzE0XSwgMTUsIC0xNDE2MzU0
OTA1KTsKICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpKyA1XSwgMjEsIC01
NzQzNDA1NSk7CiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSsxMl0sIDYg
LCAgMTcwMDQ4NTU3MSk7CiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsg
M10sIDEwLCAtMTg5NDk4NjYwNik7CiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIs
IHhbaSsxMF0sIDE1LCAtMTA1MTUyMyk7CiAgICBiID0gbWQ1X2lpKGIsIGMsIGQs
IGEsIHhbaSsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7CiAgICBhID0gbWQ1X2lpKGEs
IGIsIGMsIGQsIHhbaSsgOF0sIDYgLCAgMTg3MzMxMzM1OSk7CiAgICBkID0gbWQ1
X2lpKGQsIGEsIGIsIGMsIHhbaSsxNV0sIDEwLCAtMzA2MTE3NDQpOwogICAgYyA9
IG1kNV9paShjLCBkLCBhLCBiLCB4W2krIDZdLCAxNSwgLTE1NjAxOTgzODApOwog
ICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2krMTNdLCAyMSwgIDEzMDkxNTE2
NDkpOwogICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2krIDRdLCA2ICwgLTE0
NTUyMzA3MCk7CiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSsxMV0sIDEw
LCAtMTEyMDIxMDM3OSk7CiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSsg
Ml0sIDE1LCAgNzE4Nzg3MjU5KTsKICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwg
eFtpKyA5XSwgMjEsIC0zNDM0ODU1NTEpOwoKICAgIGEgPSBzYWZlX2FkZChhLCBv
bGRhKTsKICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTsKICAgIGMgPSBzYWZlX2Fk
ZChjLCBvbGRjKTsKICAgIGQgPSBzYWZlX2FkZChkLCBvbGRkKTsKICB9CiAgcmV0
dXJuIEFycmF5KGEsIGIsIGMsIGQpOwogIAp9CgovKgogKiBUaGVzZSBmdW5jdGlv
bnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29y
aXRobSB1c2VzLgogKi8KZnVuY3Rpb24gbWQ1X2NtbihxLCBhLCBiLCB4LCBzLCB0
KQp7CiAgcmV0dXJuIHNhZmVfYWRkKGJpdF9yb2woc2FmZV9hZGQoc2FmZV9hZGQo
YSwgcSksIHNhZmVfYWRkKHgsIHQpKSwgcyksYik7Cn0KZnVuY3Rpb24gbWQ1X2Zm
KGEsIGIsIGMsIGQsIHgsIHMsIHQpCnsKICByZXR1cm4gbWQ1X2NtbigoYiAmIGMp
IHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7Cn0KZnVuY3Rpb24gbWQ1X2dn
KGEsIGIsIGMsIGQsIHgsIHMsIHQpCnsKICByZXR1cm4gbWQ1X2NtbigoYiAmIGQp
IHwgKGMgJiAofmQpKSwgYSwgYiwgeCwgcywgdCk7Cn0KZnVuY3Rpb24gbWQ1X2ho
KGEsIGIsIGMsIGQsIHgsIHMsIHQpCnsKICByZXR1cm4gbWQ1X2NtbihiIF4gYyBe
IGQsIGEsIGIsIHgsIHMsIHQpOwp9CmZ1bmN0aW9uIG1kNV9paShhLCBiLCBjLCBk
LCB4LCBzLCB0KQp7CiAgcmV0dXJuIG1kNV9jbW4oYyBeIChiIHwgKH5kKSksIGEs
IGIsIHgsIHMsIHQpOwp9CgovKgogKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0
IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5CiAq
IHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuCiAq
LwpmdW5jdGlvbiBzYWZlX2FkZCh4LCB5KQp7CiAgdmFyIGxzdyA9ICh4ICYgMHhG
RkZGKSArICh5ICYgMHhGRkZGKTsKICB2YXIgbXN3ID0gKHggPj4gMTYpICsgKHkg
Pj4gMTYpICsgKGxzdyA+PiAxNik7CiAgcmV0dXJuIChtc3cgPDwgMTYpIHwgKGxz
dyAmIDB4RkZGRik7Cn0KCi8qCiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51
bWJlciB0byB0aGUgbGVmdC4KICovCmZ1bmN0aW9uIGJpdF9yb2wobnVtLCBjbnQp
CnsKICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7
Cn0KCi8qCiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgbGl0dGxl
LWVuZGlhbiB3b3JkcwogKiBJZiBjaHJzeiBpcyBBU0NJSSwgY2hhcmFjdGVycyA+
MjU1IGhhdmUgdGhlaXIgaGktYnl0ZSBzaWxlbnRseSBpZ25vcmVkLgogKi8KZnVu
Y3Rpb24gc3RyMmJpbmwoc3RyKQp7CiAgdmFyIGJpbiA9IEFycmF5KCk7CiAgdmFy
IG1hc2sgPSAoMSA8PCBjaHJzeikgLSAxOwogIGZvcih2YXIgaSA9IDA7IGkgPCBz
dHIubGVuZ3RoICogY2hyc3o7IGkgKz0gY2hyc3opCiAgICBiaW5baT4+NV0gfD0g
KHN0ci5jaGFyQ29kZUF0KGkgLyBjaHJzeikgJiBtYXNrKSA8PCAoaSUzMik7CiAg
cmV0dXJuIGJpbjsKfQoKCi8qCiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxl
LWVuZGlhbiB3b3JkcyB0byBhIGhleCBzdHJpbmcuCiAqLwpmdW5jdGlvbiBiaW5s
MmhleChiaW5hcnJheSkKewogIHZhciBzdHIgPSAiIjsKICBmb3IodmFyIGkgPSAw
OyBpIDwgYmluYXJyYXkubGVuZ3RoICogNDsgaSsrKQogIHsKICAgIHN0ciArPSBo
ZXhfdGFiLmNoYXJBdCgoYmluYXJyYXlbaT4+Ml0gPj4gKChpJTQpKjgrNCkpICYg
MHhGKSArCiAgICAgICAgICAgaGV4X3RhYi5jaGFyQXQoKGJpbmFycmF5W2k+PjJd
ID4+ICgoaSU0KSo4ICApKSAmIDB4Rik7CiAgfQogIHJldHVybiBzdHI7Cn0KCgov
KiBvdXIgYWRkaXRpb25zIC0gYWxsb3cgZm9yIGNoZWNraW5nIGZvciBleGlzdGVu
Y2UgKi8KCmRvY3VtZW50LmF3c19tZDUgPSBmdW5jdGlvbiAocykgewogIHJldHVy
biBoZXhfbWQ1KHMpOwp9Cgpkb2N1bWVudC5hd3Nfb3BhZCA9IGZ1bmN0aW9uIChz
KSB7CiAgdmFyIGJrZXkgPSBzdHIyYmlubChzKTsKICBpZihia2V5Lmxlbmd0aCA+
IDE2KSBia2V5ID0gY29yZV9tZDUoYmtleSwgcy5sZW5ndGggKiBjaHJzeik7CiAg
dmFyIG9wYWQgPSBBcnJheSgxNik7CiAgZm9yICh2YXIgaT0wOyBpPDE2OyBpKysp
IG9wYWRbaV0gPSBia2V5W2ldIF4gMHg1QzVDNUM1QzsKICByZXR1cm4gYmlubDJo
ZXgoY29yZV9tZDUob3BhZCwgNjQgKiBjaHJzeikpLnN1YnN0cmluZygwLDIwKTsK
fQoKZG9jdW1lbnQuYXdzX2lwYWQgPSBmdW5jdGlvbiAocykgewogIHZhciBia2V5
ID0gc3RyMmJpbmwocyk7CiAgaWYoYmtleS5sZW5ndGggPiAxNikgYmtleSA9IGNv
cmVfbWQ1KGJrZXksIHMubGVuZ3RoICogY2hyc3opOwogIHZhciBpcGFkID0gQXJy
YXkoMTYpOwogIGZvciAodmFyIGk9MDsgaTwxNjsgaSsrKSBpcGFkW2ldID0gYmtl
eVtpXSBeIDB4MzYzNjM2MzY7CiAgcmV0dXJuIGJpbmwyaGV4KGNvcmVfbWQ1KGlw
YWQsIDY0ICogY2hyc3opKS5zdWJzdHJpbmcoMCwyMCk7Cn0KCmRvY3VtZW50LmF3
c19tZDVfdGVzdCA9IGZ1bmN0aW9uICgpIHsKICBpZiAoJzA5OGY2YmNkNDYyMWQz
NzNjYWRlNGU4MzI2MjdiNGY2JyA9PSBkb2N1bWVudC5hd3NfbWQ1KCd0ZXN0Jykp
IHJldHVybiB0cnVlOwogIHJldHVybiBmYWxzZTsKfQ==

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=100X22.gif
Content-Type: image/gif; name=100X22.gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/bannertype/100X22.gif
Content-Transfer-Encoding: Base64

R0lGODlhZAAWAIcAAAAZZQAbaAAcaAAhagAjbAApcAAscgAudAAxdAM1dwI0eAQ2
eQU4eQk6egk6fAs8fA09fhNBfxI/gBJCgBRCgBVEghlHgxpIhhxJhB9NiCJOiSVR
iihSiyhSjClUjS1Wji5Zji5YkDFZjzFakDRbkTZdkzZelDpglTxjlj5klj1lmAFz
xQJ3yAR4xgh6xwl6yAt8yA17yQ18yRF+yURpmkpunU5xn05yoFFyoVR2o1V2pVl5
pVx8pl5+qBOAyhSAyhWBzBmCyhiDzBqEzByDyx2DzB2Eyx2FzCGGzCKIzSWJzSmK
ziuMziyNzyyN0DGP0DGQ0DSR0TaU0jiT0jmU0jqV1D2V0z2W1D+Y02KCqmSCrGWE
rGmGrWuIr22KsHKOs3OOtHSPtXWQtHmUt3mSuHuXuH2WuECX1EGZ00GZ1ESa1Eec
1kac2Eic1U2e1kye2E6g2FOi11Sj2Fql2V2o2mOr22qt3G6w3XOz3ni133Sz4Hq2
4Hu44IKbu4mfv4mgv4yiwZClwpKoxZaqxpStyZiqxZitxpuuyZ6yyoO74om+46Oy
yaK1zqS3zqq5z6q60au80a2+04nA44vA5IzA443B5JHC5ZLE5pbD55TF5pjH5pvI
55vJ6JzJ6J/M6rHB1LXD1rbE17fF2LnH2brI2bzJ277L3L7M3KDL6KLM6qbN6qzL
4anO66vR663R6q3S7K/U67LK4bDT7LLU7LXW7bfY7bnZ7rza7r7c773a8L/d8MzM
zMHL3cHN3cfS393d3cbQ4cfU4cPe78Tb78rW4s3X5c7Z5cnf7sLd8MTe8dLb5tXc
5tbd6Nrd58Xg8cnh8s3i8s/j9M/k89rh6tvi7N/k697k7dHm8tHl9NTn89Xo9Nvq
9d3s+OHm7uLo7ujq7+7u7uHv9uXq8eLv+OTv+evu8ubw9+Xw+O7w8+3w9Onx+ev0
+O31+vDy9vH09vHy+PH2+fL3/PT1+PT3/PL4+vL4/PX4+vX5/Pj5+vn6/Pr8+/n8
/Pz7+/z7/P7+/gAAACH5BAAAAP8ALAAAAABkABYAAAj/AH8JHEiwoMGDCBMqXMiw
oUJwECNKnEixosWLGDNq3GjxFzh/IENuy4SnTh1KtNaFXMmypcuXMGPKnPlyl8eW
clqcMelGzRxZMfvRHEq0KE2bH1fmkxLkDZ07iRLNUXNJKMtTO3Acwme0q1eiSFna
iyJjyJIoTvXYUcPJKkhlFQhY6OPuq927LcOu1HdFhg8fP4owQSPnjRtpIfv5MaBF
Hj+8kPGGLectpJwXQDLDgCHjSJMlifKBLLeDwR+Qj/3J4+oPHzp5LPu1q6uUXTy3
+NjdC8kaX757u3kH70cvXmp9ovvVA5mPHb2QYQ8hCpmIReYZUvY8kTHDh53l3XYg
/zDgIEUfHDzMQCDTbpAG8l0q9wuFAoGCGr387UMVZUaSROzsU4kTMygBoDZx1JFH
FHbEoYQtIKnixB3zQONGEDKoEY0/ibRxCRZKxLMJE9xZso8/YXHRRUjYrODDDE9o
448zMXSmyWPoBJIBAicAIsgHBkyQwiCBVECDIDwowAU8pGiwwR9fGNkMLUlQMUkl
tcSjCBF0aDIHEZkgQ4V/arSihw96zKPPHTKogg0UUVgiyRBTmMOHD0Q4UQctLlTR
CR8QoniTDTSwto8TMPhwx27bJCHDFKt8A9I7OywQiD+8cKBAGfgwU4MIxvhjjQol
fBKGBoz4Yw8XGziiSRB1kP8DkjRYyCErNFfU4coVQSRyjj/CNJFGONqscQU3eyTB
Ckh4yGALHzCs8Yw/qLRAR3AghaXDA8GE1MkKM4TmzzYzCHEHIdWAhE4OCQDiTykc
aBAqKRss8EEJHzCgwXkLbFCCCBA0EMgwZ7yAhSbswNJEEmqsQUWGnVgRRTLMwXFE
LrIkwQc8bsxAhRpvKLECJnyEKxQ3SuiESXBh9QEAGCGxA8cKc5yYyApsxMIFNSCl
w6678HqwjD+haABBCjTQUMMXiNTggAlJ09DDJ/xwk0cQP/AxoBNxyOG1IrBUUYUz
IVWSRB54ODHLPm0A0YYcccwhx7M/KCLauHj80EIe2d7/NIoBDZwiUhssvJFTFcf0
kQU6Pf/8LgcdKOOPLySEMM1K3uyAASQvRXOFGok4MYdKLE5BBdkgcRMFFKJv488c
R8DC0p2KYOuPNE78YI+gH7lTAwAeMBOSPp2okUYm8yzSakjl4ICAH/6MooG8/qQz
hgIkGAKKIaH0wwgFFPQRCiKQlKOLJbhs8oQczugxAxyq1NJJNtBEEYUwK9XxgguV
7GZLEklQBC1a0Yl85AEGidgNLRTxDE0QoQp9SwopJCAAEADDJYWAQA9o4w90bAED
hfBHL1CggqH5oxtfiIABAFcG1QiCAwcogAJ2wAxPLMEHQSiTP8ZxByTIQAZISMUz
3eDghmmF5BVSaAP+QJIKK/hABjBoAzskwYRM7MYSQPhBEKZQiwiGxBANCMADxmAK
aniDGZDAgQFs0I29TAMY4vBHO4xRDNiEZBmf+AQx0hESb4giEr2IIz2wQQtdmGMl
2KiFLbBxj3lcIxvxWAk9rqEN25lDF7NAhjr8EY5nkEMo9IDGLG6xSS+GBBIfGEAA
HMABEFygAAfwQhwjQ8tamjIk3RCECBBAAAJQIAu8cIsth3kXvbgEH8IkpjLtgpRd
OPOZ0IymNKdJzWpa85rYzOY0HcLNbnrzm+D8RUAAADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=login_chunkx.gif
Content-Type: image/gif; name=login_chunkx.gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/bannertype/login_chunkx.gif
Content-Transfer-Encoding: Base64

R0lGODlhHgAWAIcAAAAAAAcHBxAQECMjIzIyMkRERFNTU11dXWVlZXd3d35+fo6O
jpaWlp+fn8zMzN3d3e7u7v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACH5BAAAAP8ALAAAAAAeABYAAAjeAB8IHEiwoMGDAyEoXMiw
ocOHAiFEmEixosWLFh1ExMix40SNDyR6HFkRpEiSJE1OXKCgYgIGFF9GYJBgZk0F
Cz5ujGBgwEQGAQAEYABUKE0AERIAUDDAgM6QE3tOVLoAQAKqVpUmBVCg6VORUrc2
yAqggYEFWpUK8BpBJU+fYskiOJsWgFCnbXeGVTr2KleyWwkAwOt2b1myfesiGPw1
qt2zAAQAWFBVst+tQAnvRJsgZwIDNZMeUEC0Js0IOBujTLlztUe3rjvCjo1xNu2M
ER3o3s27t2/fCIMLJxgQADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=128x64_get_a_free_website_01.gif
Content-Type: image/gif; name=128x64_get_a_free_website_01.gif
Content-Location: http://static.uolcontent.com/RealMedia/ads/Creatives/ISP/MWS_Mkting_LSKYBUT_34_8023/128x64_get_a_free_website_01.gif
Content-Transfer-Encoding: Base64

R0lGODlhgABAAPcAAAAAAP+ZAP/coqByG/+5MgAzmVpAEIiFgfO8U/+rHP///y8d
Av/Sic+NG9W/mn5VEP+xOf/GX//EQ8B/FP+fDq+hh0RDQOekKf+uNBgRA/TGdY9y
NkAqB/jbrP+xJYBUDM+jS//TbP+9QsCTPv/GSufcxnBwcMyZM0xJRP+eCP/MU4Bg
JWhID0AvDwgGAbB0EMDAwO+1TPW4RPeiFfPmz9XOw6CXid+KB39jLP7YlP/GWv/K
TSAgIP+9OvmtJUozCveyME8/Ht+lPYh1VDAjDpRkEvDw77+EKf+hDI9xNNuoS//V
cpJsKfPixd+YHTMzM2RYRK+IOd+bMq98K//ZnP+2OSIXBMi1lWhPIv+9Sn9aIP+0
Kv/Qhb+IIP/FUu+oOOfezPOlHv/jo1hBG0w2DVhEHoBhKdGYO9+vUcTDwMySJLCw
sPWoIq9tBw8LBY+LhGZmZubHj6B3MIBaFz8yGP/OWCocBeicGq+AJD8sD6yHSJ90
IODg4P3oxe+lNO+qO7+MKDgnCEw6GtWUIO+6U7+XSS8mEv/blm9SGOTYxP/enNyd
J2RDC/e1Uv/w1fewLIxoKZ9uJFBQUH9gIUo/LMzMzNquYBALAm9YKsSMI8SXQ/Gw
QuGTE7+ukX9dGp99OiAXCN+kMZmZmYVcE+fMna+EKmRKGr+DGs+fRY9sIp94Jv/m
rmBDD51qEuWeIOOlPbB7HL+IMeOsSP/MZlg6CIhhGConIRQPBuDWyNiaJv/Kc2Ra
Sl5UQ/+nIphpFXRREu+uMcyZM8+WKdufO92WG8fFwriDIK+LQ/+kEf+2Qf/Vjf++
Ub+KJDAiCIyEhL+UQ8+mUX9kMHBWJvDhx++rKqh7MGBKIO7hzJV5S/nlxSofDO++
W1ZKNP/syciFE9C7l+mqNeuaFDoqD5iSh//IbaR0HN+yVVA7F4xaCHRNC/+vKY9u
MN+zV+mtRf+3Mv+uIf+nGUpCQv/otU86EN+bIe+0Ob+HLtinSl9DGI9dD2RHEuCt
TIpkI7N8GaVzIUo0DiH5BAQUAP8ALAAAAACAAEAAAAj/AAMIHEiwoMGDBClgWMiw
ocOHECM2RIawosWLGDNqrKhQosePHnttHEmypEl4IFOqZCjSpEuMKWLKnEmzps2Z
vSDo3Mmz504pR4748Um0aK+bSJMqXcq0ac2cRYnyAwWgKoBLUXceMeq0q9evXaFm
1emnGQBQ/IJG0jK2atSjYOPKjSt2rBYA+KL6WRtpKIS7ALRE6illbb4bcxMrTlo3
6yUAX4oKA3Upz6VLUiBYBZCH55ezlgG0WSwXiWnTXFKrXs26dWtlVGLLnr3zBOed
9rTotgchD6jIX9zM0+nWJ28Ithecds28ufPVp6Mvl069uvVeVbJr367dHmftgANL
/+GsWwsoN9mrcs/+hR++PFWty59PH/V8LvXzI8G+fv2fqn9sd5cW3oGSx4EHpgfA
eie44QY+gMGj34T3SYfMhRcygOGGHHboITLwJCPiiCSSiA8ARPwx4oD/5VGiiFW9
eA4AUyTzHwAYfKjjjjwio6GOP/bYYwIvFmkjEQA8qBuSWiSDyFm64VNjMkieEwmJ
TxKhBZIAJJOAkGDyGKSHY4bpYYhGFhlJHm5URQQ+sYjID5d5THkCVeeQ+MeJoGgB
n4hmBsphmYMKqmOaiCaqaJpfGhoooRtCmqOgi1ZqaZoQOPooh/B02ikDnoaaTKik
YsDAqaiiSoUArLYqgC7JMP/g6qy05qDLMiXSquusunRKTqrABosqqcSGCmqxnxKL
gQgJILuMAtBGK+200JLyCg3UZjttB42MqO23CtDASTh9gKstJ5zMgKyx68KjDLEi
vuOsudR2Ask19GZ7zTCbJJPvtLig80I2/0r7QSuctNvpu+sy7Ok7IoigzrwFK/CG
OCVULC02sWyisQLFLJBOEx9bQYs3CrvbrsOdYpBFFhhQXPABoODyMbRvSHPGxzBc
wgjJGgPAwQQpswxPAkgjrUzSSFfxchVMM/0stRZUbfXVPNRMrShXS7JGtgeIU022
JlxttgVP+Ay0tFyffbXQE0QtdwJLz6101C+/bPfU0wL/4IIVzRAh+OBECAIGtQe4
kIE2g2cLhxX8kG0BL7tUbjklgnPwwNrRco0CL1CEHjo3zZTOiDd2M1233asn4EHe
WbwztxcFfyOHHNVgO+0Bt5wDiRx6OJAtD1aMUvEVTPjiizcE/5tIEUW00s8dqSfd
egLvZJ+9Mtq/swXs7nSvvQ4FOxDFGe04cvMBANhRxPGRnHJHGOU6X0Q/xIQRhvj8
v8N9/9vrntPyVoX+ke9fNhiDHNL3MRP47Qf9qNg4/uELV7yjGwUrhuaIAUD+/Q+A
H3zHAPNmwJmBYgVCUJ/GjGCLZoyCGBU7gBUe4IQLFqxnrGhAB8UXQv7loHsiWIYQ
/4WoDv4dcHcHSKISD2ABUJhBFirU2AEMcAo2SM5txKPhFjA4rbadLW053GH3ftg9
D5jRjDk4oweCOMRlVEGNZjyitPyWAStYARR4NNA6oEgtPsDgjzDQVhogaEWquQAU
hBvcDypYBS5KK3EZsEPpJtkMzQ0Cjpg8YxoziUY1snGIIsCkHKMFACuwYg6oNIMq
1zGCGEQxWuxzgYNsYQRqwaB49MhWJYpRAzD48pclKEETECACR0aLD2moQSKCycxg
TkMDnMTkJjk5zTW2UYhbgOMooQWAQJSDHuAUgizGGYNlvBJaB3ADEebBClbUwJa3
YMEgbmaJYdSvYnEYhCt8EP/NTqpxCwAFaA4C+r1rupGgW4hAtoTWhYC645rnVMAB
MoCFfqhBDaTI1iVYoYabDWEF0/hYBX4Biwsg9KQDPWlAUwrQLHjhpTDNAkIVSi2G
EnQZMPVCRGlmBnoINFu2MEBHP4aCPGRMis2ohU9VulKmAvQQBHVpTl/qDoLStG95
aGhAe5DTnZ5wEQC9Ktt+0IWbWYAIR42hFeYAVqduAapOhStARTDVl4oAodQYgFk2
k1WESvWlqLBGm6zixLZuYRG1sMJmANCMclBjBHRYrGQlS4QBdIEVj5msZtdqWKbK
VaWfFYEORkva0VY1oNQwhj4QdKBfqAGhVSitEiAhCDr/2JYOZfiESQFKDViwgrV5
MEA5wIEKadz2uLcFrm1NYQw11IIMwI0ucA0wgN3G1a2f7UFpS3tXgl5ADV0Ib3jV
QI2TZoG0CLiHJp7B3mdoYh9A8C54xduFTCxCBoRARXv3y15A0HcEAD7BBaiRi0zQ
98AIru8iHuHWtyLUHRCG8CEiDOHtlpYAFM6whjPsBQtvVwQb1rCHS5sFCot2tBgO
sYpXrOEJU5gAMIbxIWIM4xHrQAQ0zrGOqcEMYcC4B/t4BghIG+R9jJYEOYYPM2h8
Xg8TAgeoyHGHUazjKlv5yjSe8ZW1HOMpexjLOQZGVWL8JDeQNggAeAZpkwyAJcfY
/8Y4AEALYsyME+vAC2DOc565XGU+E8DOFsazngnQAgAAAsbNaNOQdeCg0goaxoU+
dI1tTIhJ+JgAVeHuoDetYz/nWBE57kEERk3qUuNYz54AgCcIIOZCfyICIABAEEaN
hiREoxQxjrQwJrEOQpCaEJ+IxidAEIEReOLQqQaAsEddjz14Yg/A4PSmQX1latNY
B6XOdgR6oGdAAGAeBMADAMRtjQgkAQCv/oQbQBFZIvSgB4UudFXcQGxCtIkOoEiC
F1K96s3QAdaUacFlQiFtPVv7x+9+tyISnnASaLvUJGC4xCV+lR48qQegaIYO0LyN
bbhh1hEoBAD0XWhDoCECmP84i7mVPWoZ9IDf764KqVsACmD0ABiXmMfEd87zni/c
5zt/uKl7zvB5ACAULWhBD07UAzcYIgKfAIA1okF1WUcgsscgtSEAAAKRuwETZ3g3
zL0g8wiYQ86eSDtliM52oLtd4tgW+qhF0PZUjFvVPbC73VcQgWgAwBDHxcTVAVAI
Uke28MfYOgBS8XJVO7zszzhL0iff9spL/Oc8xzzDJTCLznv+87PQQdttE+ke2AZJ
JxBBFJQN+llEdgOdN0ebthGBiNvmEo2fxKir0vlNyNnywJ+45oXP8wi0HvReaHtm
E14VUCQcSXSgehDM4fqqTJ0q0fBCKY6tChQ1Phqd33r/ED5h8bOkHR+lCL7lh395
npPg+Mhnu9GV/u5C4yPh9UAEVdxAB3ZUP/FnwQTvpgpcMg8n0AOTwHqzAA148m6p
wCUtkH7q13bDFzEWqAgWmIERowPw93k3poEgGIIiGDEkUIISMIIZaHyg94Eo2IIu
mIEYmIESMIMzqAg0eIM02IEeiIM82IM++IM/qIKgB4REWIQ9aIM/KAZAqAI66Hl1
YIRQGIVC+HkqEIVWmIRAqIRA2ISfV4QFAIRfGIUdeIVkyINa6INn6IPvFwJs2IZu
2IazQAI4WAB0OINhGIZzCIY0qAIF8IZtKIc/iIdliIZZWIRe4IeIyIZPaIc0+IWC
/8iDj5iHEhABIdCHfugFRBiJg3iDaWiGRlgHiYiIs7ADkXiHjViHpgiJTNh5lkiH
ffiEjmiHdciIm0iISSgGuJiLuqiLqyAPvviLwPiLbVgAgNiItCiIsciDfOiKdFiJ
wyiLtCgBqbiL1FiN1piLOFiC2riN3NiNJACKofiGlqgC2kiMJGCO5liCrsiNKsCG
luiOlciM6liO8niO3niP+JiP+riPaxiObviOBUCK82iP5TiPKtCOw/iPzhiHBTmQ
/PiQEBmR3TgL/viPzViJs1AHBUCO50iHpFgHdTAL75iQJFmP6diRdOiQEhmRO9CS
LvmSMBmTLgmOFVmTNomIdUwgkzq5kzzZkz75kzvZjkswlERJlMx4lEiZlEq5lEyp
lED5lFAZlbNQlFRZlVZ5lVhJlLOgAlHZlV75lTwJilk5lmRZlTkJlmgJlAEBADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=search_sp_go.gif
Content-Type: image/gif; name=search_sp_go.gif
Content-Location: http://alexvn.freeservers.com/fs_img/bannertype/infospace/search_sp_go.gif
Content-Transfer-Encoding: Base64

R0lGODlhRAAVAKIAAP///q8AAcwAAPkAAOYAAJ0BAODf5N7g4iH5BAAAAAAALAAA
AABEABUAAAPzWLrc/jDKuYw9NuvNu/+gpxhDaZ5oqq5syx7K4c50XcOFbO+8jeu9
oLBEKOEMhKRyqQQ4ncyodJqEUqOG0bUKaHa3YG9YmS0gt1bm80tYc63udjd9LRsE
+Lwev9Y7+QACgYCCg4WET4d7i3aLjmuDf4qFf5KThJeOAo2ai32QkYGVhpaYpZqc
nZ6ihqaseAGnkqeOdgG3uLm3Tri8vLEAwLvBv8LCv8W6ubbKypC9T9DRyWvD1s3L
Mdjb3N3e3wHMBdzjuAoB4+e36ubs6Ovu2+V2FPX29xJlOPj8/RNHGA5g+DDwQsEQ
CBMKNIDBn8OHERIAADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=search_logo.gif
Content-Type: image/gif; name=search_logo.gif
Content-Location: http://alexvn.freeservers.com/fs_img/bannertype/infospace/search_logo.gif
Content-Transfer-Encoding: Base64

R0lGODlhqQAdAIAAAP///wAAACH5BAEAAAAALAAAAACpAB0AAAJMhI+py+0Po5y0
2ouz3rz7D4biSJbmiabqyrbuC8fyTNf2jef6zvf+DwwKh8Si8YhMKpfMpvMJjUqn
1Kr1is1qt9yu9wsOi8fkstlWAAA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=xout.gif
Content-Type: image/gif; name=xout.gif
Content-Location: http://alexvn.freeservers.com/fs_img/banners/xout.gif
Content-Transfer-Encoding: Base64

R0lGODlhKAANAPcAAEJCQkREREZGRktLS01NTVFRUVVVVVhYWFpaWl5eXmBgYGJi
YmVlZWdnZ2lpaW1tbXp6enx8fH9/f4WFhYeHh4mJiY6OjpKSkpSUlJmZmZ2dnZ+f
n6GhoaOjo6Wlpaampqqqqqurq6ysrLOzs7e3t7i4uLu7u729vcTExMXFxcbGxsfH
x8jIyMrKyszMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACwAAAAAKAANAAAI/gBdCBxIsKBBgylCeFjIkGGIFAcjShwY
AoDFixgBhDAIYOJEDx0jAvDA0aNEkC4iYBh4IYKLkSYaADgg4qULEgoAKCDhYkMA
AAhAuDiRMwFPFyhbPPjgosODFi89OKDQYsMBmw0qsKjQwIUACU0LuHDAoakCgShd
qFigYYEKgSMFsCDYMcBcFgFcYCAAYYRAARjRhnQxAoBfuB7k0nVhV21eFx8qGLjA
GEXBtGszuEXsoEKLDlc7Zt3a9UBZCwNcNJjgIkMCwS6UMv3wNKoJBjNrdiSRQCdP
EQgABNhwc8HMoyhVDsTgcqTJ57BFkoRuUkTG6zWpe1xRgoT3799LA6wICAA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_top_border.gif
Content-Transfer-Encoding: Base64

R0lGODlhAQA7ALMAAMkAAMAAANYAAOQAAPf39/v7+/z8/Pn5+f39/fr6+v7+/vj4
+P///wAAAAAAAAAAACH5BAAAAAAALAAAAAABADsAAAQZkEiyqq0n68R7+aAhjkhp
KmiKMiwbAMIQAQA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_x.gif
Content-Transfer-Encoding: Base64

R0lGODlhFQAVANUAAPz7/NHT0/r7+u7s7uHg4ZSWlKSipOfp5+zu9O3r7e7w7vTy
7NDR0PX39ff49+Xm6fv8++fp7u3v7dva27S2t+/w78zQ0ezm7Pf18f37/dTW2u7p
7u3n3ebo5ry6vLSytOXn7dTO1Pf19+Tu7PT2/OXj5fX09by+vOTi5MzKzNzd4e3n
7ZyenNbX2+7p4Ozm3PT6/Pr5+oyCfOXn5eTm5Ozu7PXz9fT29IyOjOzq7PTy9Pz6
/NHQ0fz+/P3+/QAAACH5BAAAAAAALAAAAAAVABUAAAb/QIjARgjweJZjEnkMEGwC
4YPh8Fmv2KuD8RhOfL2weEz2TYgOslrtKPoAvV18Lq/PAT7jm863y/FHbzuDhIWG
gDxvNzs3FDgFOjc0ODghOzA7DT6BDTc3JDoGOB86BTgenpGanDo7kTSmpgaRJJ4A
GYE2OggLOjohlAUXvr06CpuJNhK7CwgnODI4Gs06NTo2yD4KEjULNRqUjsI15BLH
gQrVCJOnoTgG5DoJ54kDCTk5FAYfFzkoLAZS4EswIJs9fAjx1UiYg+CmAD4GzKCR
gyINiyNejLg4o6ATDBU6zBg5gwOIkiBKzFgxo0MFEU9a+DCx4YCLCBEOHMhZ88CA
GwpmoEzBkCGLUR8iuEQZosLIkadQeTixEQNCEAA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_btn_l.gif
Content-Transfer-Encoding: Base64

R0lGODlhBAAaANUAALsAAPfz87YAAKcICL8AAPDf39oAAMIAANUAAKYGBtAAAK8A
AMcAANSNjdEAAMoAALg7O8MAALAjI90AAK0AANOKiqgMDLwAAMYAAMhpabAAAKwA
AMsAAM0AALc4OLMrK9cAAL0AAOQAALkAAOCwsOAAAO7Z2dYAALEnJ7MAALcAAKsA
ALQAAP///6QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAEABoAAAZRwFbLBGmRBq4CMpRxAUQS
F6iUcE0MLpcBkT0psg5OtsPIPiJZDCF7AGQJquyFlR1psgJKlrXa910CGxYuKgse
LiwpDS4rKgEfjC0FKC5CARVBADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_btn_m.gif
Content-Transfer-Encoding: Base64

R0lGODlhAQAaAMQAAJQAAKcAAJ0AALYAAJAAAMcAAMEAAKwAALsAAJEAAKIAAN8A
AKAAALEAAJwAANkAAJgAAJYAANMAAI8AAKQAAMwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAABABoAAAUVIEUtj1QVBjI0R6AIEEBM
UxI5jBgCADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_btn_r.gif
Content-Transfer-Encoding: Base64

R0lGODlhBAAaANUAALsAALYAAKcICL8AAPDf39oAAMIAANYAALkAANUAALAAANAA
AMMAAPfz8+QAAMoAALg7O8YAALAjI9cAAO7Z2dOKir0AAKwAAMhpaa8AALMAALwA
AM0AAKgMDLEnJ8sAAKYGBrc4OK0AAMcAAOAAALMrK9EAAN0AANSNjeCwsLcAAKsA
ALQAAP///6QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAEABoAAAZPQAil1XIJUi2LkeAAuDCk
iUtSOLlAiYLLtThsP6btiLNlPLaDyBZg2KoGW9Zmq0BsRYHtiqXnuy55LhkqLh0a
fCEqKy4oiyVFHgQtFQ1EQQA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline
Content-Type: image/gif
Content-Location: http://alexvn.freeservers.com/cgi-bin/image/images/sethome_bot_border.gif
Content-Transfer-Encoding: Base64

R0lGODlhAQAjALMAAOfn5/j4+Pz8/Pn5+fb29vr6+v7+/vv7+/X19fPz8/39/ff3
9/T09P///wAAAAAAACH5BAAAAAAALAAAAAABACMAAAQVELREmUWYkMVDGENRHKQg
KKihNk0EADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=overlay.js
Content-Type: application/x-javascript; name=overlay.js
Content-Location: http://alexvn.freeservers.com/fs_img/js/overlay.js
Content-Transfer-Encoding: Base64

dmFyIGN1cnJlbnREaXYgPSAiTk9ORSI7CgpmdW5jdGlvbiBnZXRQYWdlU2l6ZSgp
ewoKICB2YXIgcGFnZVdkLCBwYWdlSHQ7CiAgaWYgKHdpbmRvdy5pbm5lckhlaWdo
dCAmJiB3aW5kb3cuc2Nyb2xsTWF4WSkgewogICAgcGFnZVdkID0gZG9jdW1lbnQu
Ym9keS5zY3JvbGxXaWR0aDsKICAgIHBhZ2VIdCA9IHdpbmRvdy5pbm5lckhlaWdo
dCArIHdpbmRvdy5zY3JvbGxNYXhZOwogIH0KICBlbHNlIGlmIChkb2N1bWVudC5i
b2R5LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0KSB7
IC8vIGFsbCBidXQgRXhwbG9yZXIgTWFjCiAgICBwYWdlV2QgPSBkb2N1bWVudC5i
b2R5LnNjcm9sbFdpZHRoOwogICAgcGFnZUh0ID0gZG9jdW1lbnQuYm9keS5zY3Jv
bGxIZWlnaHQ7CiAgfQogIGVsc2UgeyAvLyBFeHBsb3JlciBNYWMuLi53b3VsZCBh
bHNvIHdvcmsgaW4gRXhwbG9yZXIgNiBTdHJpY3QsIE1vemlsbGEgYW5kIFNhZmFy
aQogICAgcGFnZVdkID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDsKICAgIHBh
Z2VIdCA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0OwogIH0KCiAgdmFyIHdp
bldkLCB3aW5IdDsKICBpZiAoc2VsZi5pbm5lckhlaWdodCkgeyAvLyBhbGwgZXhj
ZXB0IEV4cGxvcmVyCiAgICB3aW5XZCA9IHNlbGYuaW5uZXJXaWR0aDsKICAgIHdp
bkh0ID0gc2VsZi5pbm5lckhlaWdodDsKICB9CiAgZWxzZSBpZiAoZG9jdW1lbnQu
ZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGll
bnRIZWlnaHQpIHsgLy8gRXhwbG9yZXIgNiBTdHJpY3QgTW9kZQogICAgd2luV2Qg
PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7CiAgICB3aW5I
dCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7CiAgfQog
IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkpIHsgLy8gb3RoZXIgRXhwbG9yZXJzCiAg
ICB3aW5XZCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7CiAgICB3aW5IdCA9
IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0OwogIH0KCiAgLy8gZm9yIHNtYWxs
IHBhZ2VzIHdpdGggdG90YWwgaGVpZ2h0IGxlc3MgdGhlbiBoZWlnaHQgb2YgdGhl
IHZpZXdwb3J0CiAgLy9pZiAod2luSHQgPiBwYWdlSHQpIHsgcGFnZUh0ID0gd2lu
SHQ7IH0KCiAgLy8gZm9yIHNtYWxsIHBhZ2VzIHdpdGggdG90YWwgd2lkdGggbGVz
cyB0aGVuIHdpZHRoIG9mIHRoZSB2aWV3cG9ydAogIC8vaWYgKHdpbldkID4gcGFn
ZVdkKSB7IHBhZ2VXZCA9IHdpbldkOyB9CgogIHZhciBwYWdlU2l6ZUFycnkgPSBu
ZXcgQXJyYXkocGFnZVdkLCBwYWdlSHQsd2luV2Qsd2luSHQpOwogIHJldHVybiBw
YWdlU2l6ZUFycnk7Cn0KCmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbGVt
SUQpIHsKICB2YXIgb2Zmc2V0VHJhaWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJ
ZChlbGVtSUQpOwogIHZhciBvZmZzZXRMZWZ0ID0gMDsKICB2YXIgb2Zmc2V0VG9w
ID0gMDsKICB3aGlsZSAob2Zmc2V0VHJhaWwpIHsKICAgIG9mZnNldExlZnQgKz0g
b2Zmc2V0VHJhaWwub2Zmc2V0TGVmdDsKICAgIG9mZnNldFRvcCArPSBvZmZzZXRU
cmFpbC5vZmZzZXRUb3A7CiAgICBvZmZzZXRUcmFpbCA9IG9mZnNldFRyYWlsLm9m
ZnNldFBhcmVudDsKICB9CiAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhP
ZigiTWFjIikgIT0gLTEgJiYKICAgIHR5cGVvZiBkb2N1bWVudC5ib2R5LmxlZnRN
YXJnaW4gIT0gInVuZGVmaW5lZCIpIHsKICAgIG9mZnNldExlZnQgKz0gcGFyc2VJ
bnQoZG9jdW1lbnQuYm9keS5sZWZ0TWFyZ2luKTsKICAgIG9mZnNldFRvcCArPSBw
YXJzZUludChkb2N1bWVudC5ib2R5LnRvcE1hcmdpbik7CiAgfQogIHJldHVybiB7
bGVmdDpvZmZzZXRMZWZ0LCB0b3A6b2Zmc2V0VG9wfTsKfQoKZnVuY3Rpb24gTVNJ
RVZlcnNpb24oKXsKCiAgdmFyIGFwcFZlcnNpb249bmF2aWdhdG9yLmFwcFZlcnNp
b247CiAgdmFyIHRva2Vucz1hcHBWZXJzaW9uLnNwbGl0KCI7Iik7CgogIGZvcih2
YXIgdG9rZW49MDt0b2tlbjx0b2tlbnMubGVuZ3RoO3Rva2VuKyspewogICAgIGlm
KHRva2Vuc1t0b2tlbl0uaW5kZXhPZigiTVNJRSAiKSE9LTEpewogICAgICAgIHJl
dHVybiBwYXJzZUludCh0b2tlbnNbdG9rZW5dLnNwbGl0KCJNU0lFICIpWzFdKTsg
ICAgICAgIAogICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGdldFBhZ2VTY3JvbGwoKXsK
CiAgdmFyIHlTY3JvbGwgPSAwOwogIHZhciB4U2Nyb2xsID0gMDsKCiAgaWYoTVNJ
RVZlcnNpb24oKTw2ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCl7ICAKICAg
ICAgdHJ5ewogICAgICAgICB5U2Nyb2xsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVt
ZW50LnNjcm9sbFRvcDsKICAgICAgICAgeFNjcm9sbCA9IGRvY3VtZW50LmRvY3Vt
ZW50RWxlbWVudC5zY3JvbGxMZWZ0OwogICAgICB9IGNhdGNoKGUpewogICAgICAg
ICB5U2Nyb2xsID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7CiAgICAgICAgIHhT
Y3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7CiAgICAgIH0KICB9CiAg
ZWxzZSBpZiAoZG9jdW1lbnQuYm9keSkgewogICAgICAvLyBhbGwgb3RoZXIgRXhw
bG9yZXJzCiAgICAgIHlTY3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsK
ICAgICAgeFNjcm9sbCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDsKICB9Cgog
IGFycmF5UGFnZVNjcm9sbCA9IG5ldyBBcnJheSh4U2Nyb2xsLHlTY3JvbGwpOyAK
ICByZXR1cm4gYXJyYXlQYWdlU2Nyb2xsOwp9CgpmdW5jdGlvbiBwb3NpdGlvbk92
ZXJsYXkoKSB7CgogIHZhciBvdmVybGF5SWRSZWY9IGRvY3VtZW50LmdldEVsZW1l
bnRCeUlkKCJvdmVybGF5RGl2Iik7CiAgdmFyIGRpYWxvZ0lkUmVmPWRvY3VtZW50
LmdldEVsZW1lbnRCeUlkKGN1cnJlbnREaXYpOwoKICBvdmVybGF5SWRSZWYuc3R5
bGUud2lkdGg9Z2V0UGFnZVNpemUoKVswXSsgInB4IjsKICBvdmVybGF5SWRSZWYu
c3R5bGUuaGVpZ2h0PWdldFBhZ2VTaXplKClbMV0rICJweCI7CiAgb3ZlcmxheUlk
UmVmLnN0eWxlLmRpc3BsYXk9ImJsb2NrIjsKICBkaWFsb2dJZFJlZi5zdHlsZS5k
aXNwbGF5PSJibG9jayI7CgogIFBhZ2VTaXplQXJyID0gZ2V0UGFnZVNpemUoKTsK
ICBQYWdlU2Nyb2xsQXJyID0gZ2V0UGFnZVNjcm9sbCgpOwoKICB2YXIgbGVmdCA9
ICh0eXBlb2YgdG9wPT0idW5kZWZpbmVkIj8gKCgocGFyc2VJbnQoKFBhZ2VTaXpl
QXJyWzJdLzIpIC0gKGRpYWxvZ0lkUmVmLm9mZnNldFdpZHRoLzIpKSkgICsgUGFn
ZVNjcm9sbEFyclswXSkgPCBQYWdlU2Nyb2xsQXJyWzBdID8gUGFnZVNjcm9sbEFy
clswXSA6IChwYXJzZUludCgoUGFnZVNpemVBcnJbMl0vMikgLSAoZGlhbG9nSWRS
ZWYub2Zmc2V0V2lkdGgvMikpKSAgKyBQYWdlU2Nyb2xsQXJyWzBdKSA6IGRpYWxv
Z0lkUmVmLm9mZnNldExlZnQpOwoKICBkaWFsb2dJZFJlZi5zdHlsZS5sZWZ0PSBs
ZWZ0ICsgInB4IjsKCiAgZGlhbG9nSWRSZWYuc3R5bGUudG9wPSAoKChwYXJzZUlu
dCgoUGFnZVNpemVBcnJbM10vMikgLSAoZGlhbG9nSWRSZWYub2Zmc2V0SGVpZ2h0
LzIpKSkgKyBQYWdlU2Nyb2xsQXJyWzFdKSA8IFBhZ2VTY3JvbGxBcnJbMV0gPyBQ
YWdlU2Nyb2xsQXJyWzFdIDogKHBhcnNlSW50KChQYWdlU2l6ZUFyclszXS8yKSAt
IChkaWFsb2dJZFJlZi5vZmZzZXRIZWlnaHQvMikpKSArIFBhZ2VTY3JvbGxBcnJb
MV0pICsgInB4IjsKCiAgZGlhbG9nSWRSZWYuc3R5bGUudmlzaWJpbGl0eT0idmlz
aWJsZSI7Cgp9CgoKZnVuY3Rpb24gYWRkU2Nyb2xsRXZlbnQoKXsKCiAgaWYoTVNJ
RVZlcnNpb24oKT49NSkgewogICAgaWYodHlwZW9mIHdpbmRvdy5hZGRFdmVudExp
c3RlbmVyIT0idW5kZWZpbmVkIil7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3Rl
bmVyKCJzY3JvbGwiLHBvc2l0aW9uT3ZlcmxheSxmYWxzZSk7CiAgICB9IGVsc2Ug
aWYodHlwZW9mIHdpbmRvdy5hdHRhY2hFdmVudCE9InVuZGVmaW5lZCIpewogICAg
ICB3aW5kb3cuYXR0YWNoRXZlbnQoIm9uc2Nyb2xsIixwb3NpdGlvbk92ZXJsYXkp
OwogICAgfQogIH0KfQoKZnVuY3Rpb24gcmVtb3ZlU2Nyb2xsRXZlbnQoKXsKCiAg
aWYoTVNJRVZlcnNpb24oKT49NSkgewogICAgaWYodHlwZW9mIHdpbmRvdy5hZGRF
dmVudExpc3RlbmVyIT0idW5kZWZpbmVkIil7Cgl3aW5kb3cucmVtb3ZlRXZlbnRM
aXN0ZW5lcigic2Nyb2xsIixwb3NpdGlvbk92ZXJsYXksZmFsc2UpOwogICAgfSBl
bHNlIGlmKHR5cGVvZiB3aW5kb3cuYXR0YWNoRXZlbnQhPSJ1bmRlZmluZWQiKXsK
CXdpbmRvdy5kZXRhY2hFdmVudCgib25zY3JvbGwiLHBvc2l0aW9uT3ZlcmxheSk7
CiAgICB9CiAgfQp9CgoKZnVuY3Rpb24gdG9nZ2xlRHJvcGRvd25zKHNob3dCb29s
ZWFuKSB7CgovKiBmb3IgKHZhciBpPTA7IGk8ZG9jdW1lbnQuZm9ybXMubGVuZ3Ro
OyBpKyspIHsKICAgIGZvciAodmFyIGo9MDsgajxkb2N1bWVudC5mb3Jtc1tpXS5l
bGVtZW50cy5sZW5ndGg7IGorKykgewogICAgICBpZiAoZG9jdW1lbnQuZm9ybXNb
aV0uZWxlbWVudHNbal0udHlwZS5pbmRleE9mKCJzZWxlY3QiKSE9LTEpIHsKICAg
ICAgICBkb2N1bWVudC5mb3Jtc1tpXS5lbGVtZW50c1tqXS5zdHlsZS52aXNpYmls
aXR5ID0gc2hvd0Jvb2xlYW47CiAgICAgIH0KICAgIH0KICB9Ki8KICBkb2N1bWVu
dC5ib2R5LmZvY3VzKCk7CiAgc2VsZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRz
QnlUYWdOYW1lKCdzZWxlY3QnKTsKICBmb3IoaSA9IDA7IGkgPCBzZWxlY3RzLmxl
bmd0aDsgaSsrKSB7CiAgICBzZWxlY3RzW2ldLnN0eWxlLnZpc2liaWxpdHkgPSBz
aG93Qm9vbGVhbjsKICB9Cn0KCmZ1bmN0aW9uIHNob3dPdmVybGF5KG92ZXJsYXlE
aXZJZCwgZnJvbUxlZnQsIGZyb21Ub3AsIG92ZXJsYXlDYWxsZXJJZCkgewogIGRv
Y3VtZW50LmdldEVsZW1lbnRCeUlkKG92ZXJsYXlEaXZJZCkuc3R5bGUub3BhY2l0
eSA9ICIgMC45OTk5OSAiOwoKICB0b2dnbGVEcm9wZG93bnMoJ2hpZGRlbicpOwog
IGN1cnJlbnREaXYgPSBvdmVybGF5RGl2SWQ7CiAgaWYgKCFkb2N1bWVudC5nZXRF
bGVtZW50QnlJZCgib3ZlcmxheURpdiIpKSB7CiAgICB2YXIgb3ZlckRpdiA9IGRv
Y3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgb3ZlckRpdi5zdHlsZS5w
b3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICBvdmVyRGl2LnN0eWxlLnRvcCA9ICIw
cHgiOwogICAgb3ZlckRpdi5zdHlsZS5sZWZ0ID0gIjBweCI7CiAgICBvdmVyRGl2
LnN0eWxlLndpZHRoID0gZ2V0UGFnZVNpemUoKVswXSArICJweCI7CiAgICBvdmVy
RGl2LnN0eWxlLmhlaWdodCA9IGdldFBhZ2VTaXplKClbMV0gKyAicHgiOwogICAg
b3ZlckRpdi5zdHlsZS5iYWNrZ3JvdW5kID0gIiMwMDAwMDAiOwogICAgb3ZlckRp
di5zdHlsZS5vcGFjaXR5ID0gIjAuMjUiOwogICAgb3ZlckRpdi5zdHlsZS56SW5k
ZXggID0gIjEwMDAwMCI7CiAgICBvdmVyRGl2LnN0eWxlLmZpbHRlciA9ICJhbHBo
YShvcGFjaXR5PTI1KSI7CiAgICBvdmVyRGl2LnN0eWxlLmRpc3BsYXkgPSAibm9u
ZSI7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpLml0
ZW0oMCkuYXBwZW5kQ2hpbGQob3ZlckRpdik7CiAgICBvdmVyRGl2LnNldEF0dHJp
YnV0ZSgiaWQiLCAib3ZlcmxheURpdiIpOwogIH0KICBkb2N1bWVudC5nZXRFbGVt
ZW50QnlJZCgib3ZlcmxheURpdiIpLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwog
IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG92ZXJsYXlEaXZJZCkuc3R5bGUuZGlz
cGxheSA9ICJibG9jayI7CiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3Zlcmxh
eURpdklkKS5zdHlsZS56SW5kZXggPSAxMDAwMDAwOwogIGRvY3VtZW50LmdldEVs
ZW1lbnRCeUlkKG92ZXJsYXlEaXZJZCkuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1
dGUiOwogIGlmIChvdmVybGF5Q2FsbGVySWQgIT0gbnVsbCkgewogICAgbGVmdFBv
cyA9IGdldEVsZW1lbnRQb3NpdGlvbihvdmVybGF5Q2FsbGVySWQpLmxlZnQgKyBm
cm9tTGVmdDsKICAgIHRvcFBvcyAgPSBnZXRFbGVtZW50UG9zaXRpb24ob3Zlcmxh
eUNhbGxlcklkKS50b3AgICsgZnJvbVRvcDsKICAgIGRvY3VtZW50LmdldEVsZW1l
bnRCeUlkKG92ZXJsYXlEaXZJZCkuc3R5bGUubGVmdCA9IGxlZnRQb3M7CiAgICBk
b2N1bWVudC5nZXRFbGVtZW50QnlJZChvdmVybGF5RGl2SWQpLnN0eWxlLnRvcCA9
IHRvcFBvczsKICB9CgogIHBvc2l0aW9uT3ZlcmxheSgpOwogIGFkZFNjcm9sbEV2
ZW50KCk7CiAgCn0KCmZ1bmN0aW9uIGhpZGVPdmVybGF5KCkgewoKICB0b2dnbGVE
cm9wZG93bnMoJ3Zpc2libGUnKTsKCiAgaWYgKGN1cnJlbnREaXYpIHsgZG9jdW1l
bnQuZ2V0RWxlbWVudEJ5SWQoY3VycmVudERpdikuc3R5bGUuZGlzcGxheSA9ICJu
b25lIjsgfQogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJvdmVybGF5RGl2Iiku
c3R5bGUuZGlzcGxheSA9ICJub25lIjsKCiAgcmVtb3ZlU2Nyb2xsRXZlbnQoKTsK
fQo=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=set_homepage.js
Content-Type: application/x-javascript; name=set_homepage.js
Content-Location: http://alexvn.freeservers.com/fs_img/js/set_homepage.js
Content-Transfer-Encoding: Base64

CmZ1bmN0aW9uIGRvX3NldF9ob21lcGFnZSh1c2VyX2FjdGlvbil7CgogIGhpZGVP
dmVybGF5KCk7CgogIHZhciBvVG9kYXkgPSBuZXcgRGF0ZSgpOwogIGlmICh1c2Vy
X2FjdGlvbi5tYXRjaCgvZG8vKSkgewogICAgdmFyIHZpc2l0ID0gIjExLyIrb1Rv
ZGF5LmdldFRpbWUoKSsiLyIrdXNlcl9hY3Rpb247CiAgICBpZih3aW5kb3cuc2V0
Q29va2llKXsgd2luZG93LnNldENvb2tpZSgiX3Zpc2l0ZWQiLCB2aXNpdCwgMzY1
KTsgfQogICAgaWYgKHVzZXJfYWN0aW9uLm1hdGNoKC9kbyQvKSkgewogICAgICBk
b2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXdzX29Ib21lUGFnZU92ZXJsYXknKS5z
ZXRIb21lUGFnZSh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICB9CiAgfQp9Cgpm
dW5jdGlvbiBzZXRfaG9tZXBhZ2Vfb3ZlcmxheSgpewoKICB2YXIgdmlzaXRlZDsK
ICB2YXIgb1RvZGF5ID0gbmV3IERhdGUoKTsKICB2YXIgaW5pdF92aXNpdCA9ICIx
LyIrb1RvZGF5LmdldFRpbWUoKSsiL2luaXQiOwogIHZhciBjb3VudCA9IDE7Cgog
IGlmICggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ213c19vSG9tZVBhZ2VPdmVy
bGF5JykuaXNIb21lUGFnZSh3aW5kb3cubG9jYXRpb24uaHJlZikgKSB7CiAgICAv
LyBhbHJlYWR5IHVzZXIncyBob21lcGFnZQogICAgdmlzaXRlZCA9ICIxMS8iK29U
b2RheS5nZXRUaW1lKCkrIi9kaWQiOwogICAgaWYod2luZG93LnNldENvb2tpZSl7
IHdpbmRvdy5zZXRDb29raWUoIl92aXNpdGVkIiwgdmlzaXRlZCwgMzY1KTsgfQog
ICAgcmV0dXJuOwogIH0KCiAgaWYod2luZG93LmdldENvb2tpZSkgeyB2aXNpdGVk
ID0gd2luZG93LmdldENvb2tpZSgiX3Zpc2l0ZWQiKSB8fCBpbml0X3Zpc2l0OyB9
IGVsc2UgeyB2aXNpdGVkID0gaW5pdF92aXNpdDsgfQoKICBpZih2aXNpdGVkICE9
IGluaXRfdmlzaXQpIHsKICAgIHZhciBjb29raWVfdG9rZW5zID0gdmlzaXRlZC5z
cGxpdCgiLyIpOwogICAgdmFyIG9uZV9kYXkgPSAyNCAqIDYwICogNjAgKiAxMDAw
OwogICAgLy92YXIgb25lX2RheSA9IDIgKiA2MCAqIDEwMDA7IC8vIGZvciB0ZXN0
aW5nIHB1cnBvc2UKICAgIGlmICggKG9Ub2RheS5nZXRUaW1lKCktY29va2llX3Rv
a2Vuc1sxXSkgPiBvbmVfZGF5ICkgewogICAgICBjb3VudCA9IGNvb2tpZV90b2tl
bnNbMF07CiAgICAgIGNvdW50Kys7CiAgICAgIHZpc2l0ZWQgPSBjb3VudCArICIv
IiArIG9Ub2RheS5nZXRUaW1lKCkgKyAiLyIgKyBjb29raWVfdG9rZW5zWzJdOwog
ICAgfQogIH0KICBpZih3aW5kb3cuc2V0Q29va2llKXsgd2luZG93LnNldENvb2tp
ZSgiX3Zpc2l0ZWQiLCB2aXNpdGVkLCAzNjUpOyB9CgogIGlmICggKGNvdW50ID49
IDUpICYmIChjb3VudCA8IDEwKSApIHsKICAgIHNob3dPdmVybGF5KCdzZXRNeUhv
bWVPdmVybGF5JywgMCwgMCwgbnVsbCk7CiAgfQp9CgppZiAobmF2aWdhdG9yLnVz
ZXJBZ2VudC5pbmRleE9mKCJNU0lFIikgPj0gMCkgeyAvLyBJRS1vbmx5IGZlYXR1
cmUKICAgaWYodG9wLmxvY2F0aW9uLmhyZWYhPSB3aW5kb3cubG9jYXRpb24uaHJl
Zil7IAogICAgIC8vIGFsZXJ0KCJmcmFtZWQxIik7ICAKICAgICAvLyBEb250IHNo
b3cgZm9yIGZyYW1lZCB3ZWJzaXRlcyAKICAgfQogICBlbHNlIGlmICh0b3AgIT0g
c2VsZil7CiAgICAgIC8vYWxlcnQoImZyYW1lZDIiKTsKICAgfQogICBlbHNlIHsg
CiAgICAgIHNldFRpbWVvdXQoInNldF9ob21lcGFnZV9vdmVybGF5KCk7IiwgNTAw
KTsKICAgfQp9Cgo=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=1.gif
Content-Type: image/gif; name=1.gif
Content-Location: http://alexvn.freeservers.com/fs_img/count/odometer/1.gif
Content-Transfer-Encoding: Base64

R0lGODdhFAAbAKUAAAAAAFJSUggICBgYGCEhIWNjY4SEhJSUlCkpKRAQENbW1u/v
7+fn53Nzc6Wlpa2trcbGxpycnDExMUJCQr29vTk5OWtra4yMjN7e3kpKSrW1tVpa
Wnt7e87Ozq2lpXtzcxAQCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACwAAAAAFAAbAAAG/kCAcEgsFgPGpBEpaDqHzqgQmahWBQhL
xsqdCgbgMGWxCCTCYAHAjCAQBoQDeXGAu93qwECCqBwUcwsOCAgShhJ5AxUIEYFk
HoYVhwlrCBMVGo4LDxUTnp6UARIbARYPFIBkGhkBra0DaxkfDRYWBXJkEBYNvLwE
axYaDx4PDmNkCg7ED8wIsRy9FrgLFLu9Db8BFQXcBRsXcxQb3dywoqStGRxzGq6u
5hIZ8hkT62QPE/PyoQSflw1zOHX6xO9SBUkW5jiQcLBhqD2HsgQ8dChRRAQbFBIo
VHFNAkKECASYE2EjSAR5EtxxIwEDGQ4qV+YR8CZMggwPDtREMxMNHBguPmGtAcCF
C4iiVYRs2ECrltOnTxtMUEKVSBAAOw==

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=0.gif
Content-Type: image/gif; name=0.gif
Content-Location: http://alexvn.freeservers.com/fs_img/count/odometer/0.gif
Content-Transfer-Encoding: Base64

R0lGODdhFAAbAIQAAAAAAFJSUggICBgYGCEhIWNjY4SEhJSUlCkpKRAQENbW1u/v
7+fn53Nzc6Wlpa2trcbGxpycnDExMUJCQr29vTk5OWtra4yMjN7e3kpKSrW1tVpa
Wnt7e87OzgAAAAAAACwAAAAAFAAbAAAF/iAgjmRZBmZqokLblq4rokMtEIVxGAUi
DAmgABAIAguKhVLJaNRsxARiYFhalQ6CdhgYIApWxQNijSAkXMIkqaRUztWlRZIg
Ei5LTKYymVQeSxoVdQESZEoRGQGLARsYTAWEGQxLBg2XlxaHCxcDRBxLDA+jpA5s
CxAIABkbSwqYmBYaSw6eARmuBbq7G4CIhBN5G43EGb4LB4QSpxsTGc8ZExRLDWnT
Sgd8fX2PSkVEAwdLHRXlFRKgSuSEA5OVCAgEAd2cPuAEDVYPHAf0Cm/s4F27wiQD
AXtF4kk4FqbLFiI3nmTot4CBBgsIEmghwOXHkwQaJUzx+IQLAJAoFhO4SIlSxIYC
mRpYgCUzZoMJKnKSCAEAOw==

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=6.gif
Content-Type: image/gif; name=6.gif
Content-Location: http://alexvn.freeservers.com/fs_img/count/odometer/6.gif
Content-Transfer-Encoding: Base64

R0lGODdhFAAbAKUAAAAAAFJSUggICBgYGCEhIWNjY4SEhJSUlCkpKRAQENbW1u/v
7+fn53Nzc6Wlpa2trcbGxpycnDExMUJCQr29vTk5OWtra4yMjN7e3kpKSrW1tVpa
Wnt7e87Ozq2lpXtzcxAQCHNrayEhKTExOTkxOQgIEMXFxW1tbRYWFhkZGQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAACwAAAAAFAAbAAAG/kCAcEgsFgPGpBEpaDaNzicgIEgMEglB
xhCJcCZYa3YqGJgJh4V6/ZBYB4JpAkFAmNb4BSZAIMQDAxIEEWsKBwYPawwTCH8E
EhmKfAgIaWoFblMIFZYLFxIVoRURDBoZYFMSBRhqDA0cFxccGxkbAbcDUxOdDKyK
DhYWDQ0EUycdecmlD226GnkMHQp4GAbEqYmFDQUbHAxsG7kBCIRrFxkBtN5qCuFT
BBdrGBn09BMUrQEJ7xZrJhMAAVbIxiDDPj4ZfGGYICoUMj0T/gxAwGFNBEqUyi3Q
kAmQBAnT1GjYsAHfmgJ+pkwkUCAZngt1/iToM6DAQ2oNBvT5I6APMoGZGyKYUADM
jc6UVMyYQZGFQIosb8z8ARCmKlSr+wBsKNBA2ImuDb5+BTtsgpKzRIIAADs=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=left-arrow.png
Content-Type: image/png; name=left-arrow.png
Content-Location: http://alexvn.freeservers.com/s1/icons/left-arrow.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAB3RJTUUH0AYFDgYa
x9LA6wAAAAlwSFlzAAALEgAACxIB0t1+/AAAAwBQTFRFGCExGCk5ISk5ISlCITFC
ITFKKTlSKUJaMUJSMUJjMUpjMUprOUprOVJzQlJrQlpzQlqEQmOMSmOMSmuUSmuc
UmuUUnOUUnOlUnulUnutWnucWnulWnutWoS1WoS9Y3OEY4SlY4S9Y4ytY4y1Y4zG
Y5TOa4Sca4y1a4y9a4zGa5TGa5TOa5TWa5zWc4Scc5zGc5zWe6XWe6Xee63nhJyt
hKXOhK3WhK3ejK3GjLXnjL33lK3GlL3nlMb3lMb/nL3enMbvnM7/pcbnpcbvpdb/
rdb/tdb/td7/vd7/xt7/xuf/1u//3u//5+//////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////YlsBvAAAAPVJREFUeNrF
k9kKwjAURGMNTRX3tajFLS54xQUVFyxaNVWx//89GtM+CN48Cc7rDaczw5QEwUOn
K7ndfI28FrlrHxwmRFw8jebZnxI2BpFCCVtKTcZYDSMIi6ZKtt0VGCEbT1Y5gIt5
6BuJ4ut+xFJMY2ahDbDAUhyomXN6MMd62Fk03eAwdpEeRIampEHgRaa6iBQSKkai
JO/g5JPsQyHBYNKgJDj2p0JCTRr8qsjDgH+/Q5TC5W8CmsL3zwoxEz7W5FqlGOJ7
WKkeVviiRvKFU9iiixLDl9Feo4zuwdu9P1Kt45vcKxt/+C+up41GyybpWFSrJ85g
2/2bDeEIAAAAAElFTkSuQmCC

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=up-arrow.png
Content-Type: image/png; name=up-arrow.png
Content-Location: http://alexvn.freeservers.com/s1/icons/up-arrow.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAB3RJTUUH0AYFDgYq
4QvwRwAAAAlwSFlzAAALEgAACxIB0t1+/AAAAwBQTFRFITFCMTEhMUJSOTEpOTkp
OTkxQjkpQkIxQkpCQlpzSkoxSkpKUko5UlI5UlpjUmNrWlJCWlpCWlpSY1pCY2NK
Y2NSY2taY3NzY3OEY4SlY4yta2NKc3NSc4SMc4SUc4Sce4yce5y9e6W9e6XWhHta
hJythKXGjIRjjIxjlIxrlK3GlMbvlMb3nJRrnL3enM7/pZxzpaV7pcbepcbnpc73
pdb/raV7ra2Urc7eta2Etca9tdbvtdb3td7/vbWEvbWMvca9vd7/xr2Mxsalxsat
xs6txs7Gxt7/xuf/zsaUzsaczs6c1s6U1u//3u//5+//////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////mubJ5gAAAQNJREFUeNrt
0V1PwjAUBuBOBwgirAooDgkEdFH2VYZDxA75COSQwP//OXYtYdRBL7nivehJ1tMn
Zzlou92oQtF0ShXx6milbHCbiH56+/RKmqaVeskHr5M/FNwbvWBg4949IbQzuQfL
J75VbR8Vmtc505kAwMQxW2nBLuvFhj+DODO/8Wj/E4Jb/a4binvWEXZrgSxkstga
QZKRVX2ThGzFiQDW/JKfkWNKQvGd8YsBbxgsxCCSYBCAJaVRPAX9+eUdkoDJ+osV
PgerfRA1EfBwHJdKGAss47moe+FF/Dcmu5ee/Q3pXTCI7IQT2zwQjm7zIpxRSIUJ
NPhQ5PUJPV8hZf4A3F/PDW4AiiUAAAAASUVORK5CYII=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=right-arrow.png
Content-Type: image/png; name=right-arrow.png
Content-Location: http://alexvn.freeservers.com/s1/icons/right-arrow.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAB3RJTUUH0AYFDgYE
Pd39iAAAAAlwSFlzAAALEgAACxIB0t1+/AAAAwBQTFRFITFCMUJSORgpOSExQiEx
Qik5QlpzSiExUik5UkJSWilCYzFKYzlSY2OEY3OEY4SlY4ytazFKczlSczlac4Sc
e3Oce6XWhFp7hGuMhHulhJytjEJjjFp7jGuMjJy9jJzGjLXnlFJzlIytlKXGlK3G
lMb3nEpznFJznGOMnL3enL3vnMb/nM7/pVJ7pb3npcbnpcb3pdb/rVJ7rVqErYy9
rdb/tVqEta3WtbXntdb/td7/vVqMvWOMvXulvZTOvc73vd7/xmOUxnutxr3vxt7/
xuf/zmOUzmuc1muc1nOl1pTO1q3e1u//3mul3nOl3pTG3u//53Ot54S954y95+//
73Ot73u173u9////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////HImnmgAAAPpJREFUeNpj
CAjwwQesGBwcLPEAHX4GF7wKNEUYTA118AAxNuqbwAwCLMq4TeDlEhQU5OZRwGmC
qYYNEBiLm+J0g5ZnYFhYoLUEbl+Y+4WFhfkZK+H2hQnICE9dedzh4ARS4a6ohzMc
IM5wlNGCmcCMCli4jUDOCLSRNYWawALyOxIQVvcIAztUEmoCl7oNCnB0B5kQFuap
CzVB0CYMKwi0g5qAS4E/Ll8YBIHlgwxwhYMtxA32uMJBFOILC1whKQcJB29ccaHA
yqXmERjmhTM9cHJIOwaGBeNOUezCNoFgD+AwgYXHGOgAZ/rmCyt9FTxAio9BgJEB
LwAAW5bGqkFcS6QAAAAASUVORK5CYII=

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=wikiverse.gif
Content-Type: image/gif; name=wikiverse.gif
Content-Location: http://alexvn.freeservers.com/s1/icons/wikiverse.gif
Content-Transfer-Encoding: Base64

R0lGODlhTgBuAMQAAAQGG////5OZooaoymKPsStrl19gaqHB1cnKzcvt9LfT5Ofm
5BAYY1Vyp+X8/oiIy62v4N7r9tbT+Pn5+NXV1L69v+Dd3O7s6+vs/Dg7S6urrfPz
8c7g63+AiEROnCU1jSH5BAAAAAAALAAAAABOAG4AAAX/YCCOZFmcaKqubOuiRCnP
9PjeeH7GdV+fmqBwSCwaj0dBgedrkoA4woGyqCIowatlSzkMGreGkul0QlmNKUIQ
/DQUBMJbI7hYKhpEpWKBt8RLZYJnKQNYewtsBAkNaQoFHwcQDQgBXAIdbAsHYCmA
ZII9hAUHewgLQRMDBB4UUpkUAhkNDwUCp5UaYHF8BCifoWYFGielVKYBbAYOGgvL
HwMCyQPLDRYayR4Nq7t8YMDBPkCGenkUeBMLFAF4bwYeH1cGBh0NBg9cAwqTDwgN
2n3AhftR4FwFS+cu3KrQwUAVBrQCMKhgIEAGAhkCGGiQsUMGNw8eDHAjpwOqQANr
/xAwdwGPtA582FFA4KCAgQMaBnSYIGAAg5UKtAXY1yAArQ8QPNRa0gVUShJrKtTR
s+7cLWcZACRg8EErxXcBADBgcCADA20ZRDaI8e9Bo4IbnsrYIOCNnQsBMlXMwDDv
hZ0WEAwQYWED3oDsBHgIoGHsAA8QP0jwNcBWXLmEc8aItdPkwSoTquJ6kIFCRiHq
DEB4AIGBAgwcimJQnODDBw8DKhPAK3fDAEkfdtaZwBhBRQ3zpAHQ4HXezgzI2Rlg
QEqsh+sdDnyIoGDAg8ZLhj9F4ObC7g0UGsrrgC0DXcY8RRz8bEnEAAmLPUAAoNHx
7X8HECDAAx84VYZ5nEAQQf8HHuWlR31bjNCMBdK9h8ktDZBFk34O7EOAA2xdJ8FZ
aSxRwALhVJCGBwDwEdhlFnSQkAHIbUBRQxrJ0p4AAOCUlX4f3RZcPcsoEMADJtmW
xkGhXPFTKXGtkwGO0GWEiQHSVFRRjAt0NoEBlbjHgEYN9HgAAwA0wkAGSikQoAAH
tFJJGRSQAsdnOMJUUQUXzIkiYXOyw6QDEQUgh5EJSACBfVcE8MEsD3BFS2UcnOPE
BQqsVdJBeRA2gox10CGVBTTyZVoFAHzB5kUZTPcAZBAM6EECAUSgoFHWAOAGObz1
4A8BXKUjgjk8IQCAjRpMqRFFxPF12jv8sUldWCxikGH/mqyk+UFPbgUwQB7UKSBN
DxYACwECtGKigVQOMWTAQRV5Oa40806wEwKlLFqAA4tRQOMD1I6J5j8GyOHtY9b0
IIAUcTKACj3JMEkhoBJikwufB0jwwQMKKBApBK818IEDlkCw6AEBLCpGHWIR8F/H
fNJAQW5nsVkrb+qgZ1qXMVLUTGnuXXARACJxBRFGXJEW6UgXPTZrBKzVGoMH7zAw
WKAlnFmANR7HxUaoyQpaWlgVnJaBLBatOWaaEIVVpgQUAACZRI6Z5YYHBRB4ABw1
lcJkCXV++EAcrVogAMQ0VrTGuholIx98ekQw2NUoFzXuYmMy6HBj0BAglk+3QfCb
/6AyCHZChhB04AE2Mf15Ac5/PyiCGw5w0FpREozUjORFJZDph5bAdkAChhcFT2tc
Lfq3CBuwAo8usAUvAhvNHD4qmHxd4BDRPpUpEptEkzZwcAy8mkHqGXbscq0DRB8n
gQvENEIFeUseAb8d4HPhBgxmGXaX0fHIB8b0kbFQS24SydADNiA3rUyHaI35yTts
U6CQdMhIeyCBABIQEkj8BE0RSNyyMoI9FMXLEouoyFV2cp81BGBfMpKIA8ZUtgbJ
LSNc8c5ZIAONKBGnVtqBDEY+EAAP3KtWSPyhAiQggliRLBkAm8Aj9jWBBGxNBI8Y
TAAUxcQtKoBkv1mUyeDGoP8KQIQSVBEBAiABgc0YKYrJeJFDMnCm6xDgAURrUWP2
M4lU9QiPgPTA0CIFhlf9EY9ecNlrQOatSvWJcYxpHxy0I4brAEABDHpWmjigKwY4
wIwM0JLa0mbA6XzEIgOcla4AkDo0PUAAAzyKbaizltfUChvpGMk/rDaWCIylDvOo
BNvCooBjOYA//CkbBviTrAgkcxmZ2wYRrXZJBnKEWhkoJlmEOEAXMakASSMQB2aR
l47dTATDw8AWU4bFC6BsKG7CohewaM7agYZWXZRABFAmAAVgQwopY0+GTDEhKXDg
oDG4owPKAhqTaKA1BDCAAsYSp9bQ8WwAOB8t1hRRYGn/tEzbeIzV0lA+CWisDviB
TRocoEWdvc4tH4AE3j5gANvMIy/JMsRYtlNTuTkgLeQ8yyaFupjblC8CBUwdi4Bk
G6RBIkNKcsMp1EEe6rgBdTwMy9jmsbYBJJMBHYiWGyqyJrNYhCNEBIABMpCRNLFy
AgAAVlgG6KhejkUBZvFJYKjigTg0QEEEgJvJUtYoCqHoarWqBMpeY6st3u8gRmIn
E+HGzkUd6bKLuhoCABa1V00gDeqoALoSlQAvEKooCtjOkRYjAsDkZWQZg8hCdXnQ
vDSgtLpcKIEekAAOSqZjGzuoUFIbsg8NwHdqJIaQRBaZs6ypRx9xjwBkQRO3Dm4W
/3GNFB5F59a/pqV8qnvUA+6RJtLAgyNGm44HBziMO2jgOuB0CyvN4gEMOAYBaCIi
0PKSUQI+Kq1dSWtWO7mYBrYPAOCcqyfN4sm7QsYn8NsdBzokAZbCLZ6/4ScdipiX
YXWYPdGhUQD3UBQwbTgjCcvIYhZYlIfuhABGEt1QuGMJ+tFiLSOxXUVYGsXVkEwC
b2DeOqTW0txgkQBahJoWPaZFH1fxARXGwAITcDg/cEIOtrAABeFRIHgUgEUuuw0e
OULIiZjGc9RgJSu7MtFMqRkCAxxAWgYoB+/95DbfzdAuv+wGo7WPA3IYr3505YCu
6KQrEhDAwOA6wE+OZUxVW//MRnSFSkr3tMBdEYmuRiYWT+pqNVPiyBd+87oMoyyz
KHvoS+1ixIocSysS4WQyWvRVVM3aWBo5W1cvGRbtWCRT5QTihGkC44SJzDaQIEBD
EvAYI32BeRW+2TvRSW3XBeAy6rxMxyK7T2gzsSaDwY8EUivN69iGOK5oBFJoucNY
IjjPBhjJJb3rkHVBjAr3No5nQKoPQ8c7TfdY08bgYTVkI2Ub0/uzIbTRmpGlMgFi
2dejMdkVDyjAAAXgj0Ys4B6LMCcd71Kc0SguN18aUFceOBMDTuobZvOAAkraR4eG
x5bUFbE1YfGqJfKYtuBYpCF7QQ42sHcQWgfAWBkKC2n/NPItKY7bdzTbFvNSy143
bCy1C/RYBIayTssOJgYcOICNjn4KbGxBHexI+9Hrs84JG0nrVtQPsGK6wwZc5ujd
UQo8VN4IbW3EJ6pp2BInWpGOsWEEApAYe+TjELzgaAD78QWwwBlREv3kDXCAyq4O
ukHVkcqAuxznANE3CwgMbQLKzEjZmomcPMnCf6k601Bdoxg4DU90YCWBb2KebeIc
lAMjoBDGe3TtCQydAZjI0dksUrZ1gMkhFjFNrpUV1xcbCQOTiymyJzY/SSwwa5bV
fWlL9xLG5EE4BukwLllXK+5PoYqN8I6uji2FcUEFJTxSa8qMlBUAVMUNO5cR6BY7
/4HSKLUiP7EQGjiFB2swXRNgFpU3M1PwAbiUNTGlTgaQUdf2JwCwHIxhO7MmAvOg
E6SCChmwAO6RLP5iOHrBP9SVIyoUHRpgEjODfTHFWjKwBXdUKx1YAhkogMWngSqS
EcZxOHlxODuROPAifSgofSd4L3YgAosALOUTCcuje3URWR0oDXPSgRo3AgCAIvTS
Wh32Fx0mWpYiDbhUCbwxZMXBB2IxOPW1PjVgHhbHX194AV5ofxlIGP8wP7HjOhWI
DnxiEjJib51xExsxYS5TAFeYg3EgAj0oAmxlLF+of/EjAUGwJc3AhtQTGuqAIrhA
HP2DEJ9hB8K1MbbQBL7BA/8duBNhgQ2TuABfGHxbNxegQS7F1ysk8FDSxIs14ApG
whz8YQEalxVJyB9oAx2tpSWZAIRzlAkmcTbMOD0N4hHIwSdfICCC4AqSyB99yBg9
CAAvgUzCB4tsFRZR4mqGFRbsoHEbhhfpaBixkXLBMDwWoVYe+I08Mj3INCojkI76
BxNh8SfuCFfy4X8iWBHycQAFMBAY5IXMk48aGIKvSALpGDeNExaZIIthdXdhBY4t
UhFeYJAD0YECiDKWOGT9uByTaBECmFG4FIZgCJMlwCA40k6YkYGV4I1h8YVhpY4/
GSYCGJSS6IYaR47LUmNrpUaYkZDXpiLAl45bZ0O4xJP/N3VtDAlXSqiQxjKDZ5OE
0JGVT4lOxEAGx1UCt6h73BZZc1GWgvAFxLAE6rMEe7M3qyAF2xYgmhJ/e9kxq6AP
e5kbFDBhcGkDw6ADipkDAgGXo7CYkKkCjVmWjxmZljmZT1mZjBkHvhCZmIkZmhkG
C8OZnjkGhykCoekCYtAJS9CZivmZcpGaLVAXdnkCtPmapnmasrkCcXACW1cZtrCY
sPkUu5kCvVkAbukLgKADw5kSxXk6SlAAWiQCEbADrimaKHGYz2kLu/BDIzBFx4md
BhKbiYkDt6lOMgCct/kCzTkQxXmcwEcDnRmd7Jmb2lmeqhmd00YD0Cmep/lC+IkG
/9E5nTXAAdZZn9npmAG6ArQ5njLgkNyZnwlKmQtqnJ25lk0wnxLqoM5ZoQeKnMGg
nPQpmfapoHNJosUQDtXZmgI6oZnpodHJoT0AntfZnzIaDpV5nk+hnqxpo//5mPCJ
GSKKojcaDKOwnPuZEhjQn79QohR6ostJoHJhoCzqo7qJnw3qnU8JobfZnjhanseJ
oWWpnlZ6n2fZmW55mt+gBF5qpMOApP85AivqV076onSwA1r6n1O0MHUKmm/qm3Fa
AurZp+TZmfEZqCQwpEUaCimQpohKnafjon4qnY86A1QqqYWap5WKTnh6pWK6qSOg
Gz/qqKD6BIsal6VaoIsaAgA7

------------DJYBs1M1oA7PAaPnDmkJsW
Content-Disposition: inline; filename=pt.js
Content-Type: application/x-javascript; name=pt.js
Content-Location: http://alexvn.freeservers.com/fs_img/js/pt.js
Content-Transfer-Encoding: Base64

ZnVuY3Rpb24gRkRDUENsaWVudCgpewp0aGlzLmNwSG9zdD0idW5pdGVkb25saW5l
LmNsZWFucHJpbnQubmV0IjsKdGhpcy5kaXZpZD0iMjQxMiI7CnRoaXMucmVmaWQ9
IjIzNjEiOwp0aGlzLnJ0PSJpOyI7CnRoaXMuY3BzdGF0dXM9ZmFsc2U7CnRoaXMu
cHRzdGF0dXM9InkiOwp0aGlzLnByaW50U3BlY0lkPTA7CnRoaXMuZmREZWJ1Zz1m
YWxzZTsKdGhpcy5jcGM9bnVsbDsKdGhpcy5ibGt3aWR0aD0wOwp0aGlzLnhwYXRo
TGliPSIiOwp0aGlzLnNob3N0PSJzZWN1cmUtdW5pdGVkb25saW5lLmNsZWFucHJp
bnQubmV0IjsKdGhpcy5ob3N0ZWQ9ImZkIjsKdGhpcy50ZW1wbGF0ZVRlc3Q9ZmFs
c2U7CnRoaXMuaW5zVHlwZT0iYyI7CnRoaXMuZXNjQ29tPWZ1bmN0aW9uKHN0KXsK
c3Q9bmV3IHN0LmNvbnN0cnVjdG9yKHN0KTsKc3Q9c3QucmVwbGFjZSgvOi9nLCI6
OiIpOwpzdD1zdC5yZXBsYWNlKC8sL2csIjosIik7CnJldHVybiBzdDsKfTsKdGhp
cy5nZXRTZWdtZW50PWZ1bmN0aW9uKCl7CnZhciB3aD13aW5kb3cubG9jYXRpb24u
aG9zdG5hbWU7CnZhciByZT1uZXcgUmVnRXhwKCJbXi5dKy5bXi5dKyQiKTsKdmFy
IF80PXdoLnNlYXJjaChyZSk7CmlmKF80PjApewp3aD13aC5zdWJzdHJpbmcoXzQp
Owp9CnJldHVybiB0aGlzLmVzY0NvbSh3aCk7Cn07CnRoaXMuZ2V0UEZGPWZ1bmN0
aW9uKCl7CnJldHVybiAiMCI7Cn07CnRoaXMuZ2V0VlI9ZnVuY3Rpb24oKXsKcmV0
dXJuIHt9Owp9Owp0aGlzLm9uUHJpbnQ9ZnVuY3Rpb24oKXsKfTsKdGhpcy5nZXRC
bG9ja1RocmVzaG9sZD1mdW5jdGlvbigpewpyZXR1cm4gNTAwOwp9Owp0aGlzLmdl
dENmZz1mdW5jdGlvbihfNSxfNil7CmlmKHRoaXMuY3BjIT1udWxsJiZ0eXBlb2Yg
dGhpcy5jcGNbXzVdIT0idW5kZWZpbmVkIil7CnJldHVybiB0aGlzLmNwY1tfNV07
Cn0KcmV0dXJuIF82Owp9Owp0aGlzLmdldFRIb3N0PWZ1bmN0aW9uKCl7CmlmKHRo
aXMuc2hvc3QubGVuZ3RoPjAmJmRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sPT0i
aHR0cHM6Iil7CnJldHVybiB0aGlzLnNob3N0Owp9ZWxzZXsKcmV0dXJuIHRoaXMu
Y3BIb3N0Owp9Cn07CnRoaXMuZ2V0Y3BTdGF0PWZ1bmN0aW9uKCl7CnJldHVybiB0
aGlzLmdldENmZygiY3BTdGF0dXMiLHRoaXMuY3BzdGF0dXMpOwp9Owp0aGlzLmdl
dHB0U3RhdD1mdW5jdGlvbigpewpyZXR1cm4gdGhpcy5nZXRDZmcoInB0U3RhdHVz
Iix0aGlzLnB0c3RhdHVzKTsKfTsKdGhpcy5nZXREaXY9ZnVuY3Rpb24oKXsKcmV0
dXJuIHRoaXMuZ2V0Q2ZnKCJkaXZpc2lvbklkIix0aGlzLmRpdmlkKTsKfTsKdGhp
cy5nZXRUbXBsPWZ1bmN0aW9uKCl7CnJldHVybiB0aGlzLmdldENmZygidGVtcGxh
dGVJZCIsbnVsbCk7Cn07CnRoaXMuZ2V0UmZtdD1mdW5jdGlvbigpewpyZXR1cm4g
dGhpcy5nZXRDZmcoInRlbXBsYXRlSWQiLHRoaXMucmVmaWQpOwp9Owp0aGlzLmdl
dFRQYXRoPWZ1bmN0aW9uKCl7CnJldHVybiB0aGlzLmdldENmZygidFBhdGgiLG51
bGwpOwp9Owp0aGlzLmdldExQYXRoPWZ1bmN0aW9uKCl7CnJldHVybiB0aGlzLmdl
dENmZygibFBhdGgiLG51bGwpOwp9Owp0aGlzLmdldFRPPWZ1bmN0aW9uKCl7CnJl
dHVybiB0aGlzLmdldENmZygidGltZW91dCIsMTAwMDApOwp9Owp0aGlzLmdldFRl
bXBsYXRlVGVzdD1mdW5jdGlvbigpewpyZXR1cm4gdGhpcy5nZXRDZmcoInRlbXBs
YXRlVGVzdCIsdGhpcy50ZW1wbGF0ZVRlc3QpOwp9Owp0aGlzLmdldFhwYXRoTGli
PWZ1bmN0aW9uKCl7CnJldHVybiB0aGlzLmdldENmZygieHBhdGhMaWIiLHRoaXMu
eHBhdGhMaWIpOwp9Owp0aGlzLmdldEZERGVidWc9ZnVuY3Rpb24oKXsKcmV0dXJu
IHRoaXMuZ2V0Q2ZnKCJmZERlYnVnIix0aGlzLmZkRGVidWcpOwp9Owp0aGlzLmdl
dFJUeXBlPWZ1bmN0aW9uKCl7CnJldHVybiB0aGlzLnJ0Owp9Owp0aGlzLmdldElm
cmFtZVVybHM9ZnVuY3Rpb24oKXsKfTsKdGhpcy5jcFNlcnZsZXRQYXRoPWRvY3Vt
ZW50LmxvY2F0aW9uLnByb3RvY29sKyIvLyIrdGhpcy5nZXRUSG9zdCgpKyIvY3Av
cHNqIjsKfQpmdW5jdGlvbiBGb3JtYXREeW5hbWljc1BUKF83KXsKdGhpcy5jbG50
PV83Owp0aGlzLnBjb2w9ZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wrIi8vIjsK
dGhpcy5jc3RyPV83LmdldFRIb3N0KCkrIi9wdC90LyI7CnRoaXMuZHRzdHI9KG5l
dyBEYXRlKCkpLmdldFRpbWUoKTsKdGhpcy5kaXY9ImQ9Iit0aGlzLmNsbnQuZ2V0
RGl2KCk7CnRoaXMudWE9IiZhPSIrZXNjYXBlKG5hdmlnYXRvci5hcHBOYW1lKyIg
IituYXZpZ2F0b3IudXNlckFnZW50KTsKdGhpcy5zZWc9IiZzPSIrZXNjYXBlKHRo
aXMuY2xudC5nZXRTZWdtZW50KCkpOwp0aGlzLnVzdHI9IiZ1PSIrZXNjYXBlKHdp
bmRvdy5sb2NhdGlvbi5ocmVmKTsKdGhpcy5wZj0iJnA9Iit0aGlzLmNsbnQuZ2V0
UEZGKCk7CnRoaXMudmVyc2lvbj0iJnE9MS4xIjsKdGhpcy5ydHlwZT0iJnJ0PSIr
dGhpcy5jbG50LmdldFJUeXBlKCk7CnRoaXMucXN0cj10aGlzLmRpdit0aGlzLnVh
K3RoaXMuc2VnK3RoaXMudXN0cit0aGlzLnBmK3RoaXMudmVyc2lvbjsKdGhpcy50
dXJsPXRoaXMucGNvbCt0aGlzLmNzdHIrdGhpcy5kdHN0cisiPyIrdGhpcy5xc3Ry
Owp0aGlzLnB0aG9zdHM9ImZvcm1hdGR5bmFtaWNzLmNvbSxjbGVhbnByaW50Lm5l
dCI7CnRoaXMuaXNQdENzcz1mdW5jdGlvbihfOCl7CnZhciBfOT10aGlzLnB0aG9z
dHMuc3BsaXQoIiwiKTsKZm9yKHZhciBpPTA7aTxfOS5sZW5ndGg7aSsrKXsKaWYo
XzguaW5kZXhPZihfOVtpXSkhPS0xKXsKcmV0dXJuIHRydWU7Cn0KfQpyZXR1cm4g
ZmFsc2U7Cn07CnRoaXMuY2hhbmdlUHJpbnRTdHlsZVNoZWV0PWZ1bmN0aW9uKCl7
CmZvcihpPTA7aTxkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7aSsrKXsKdHJ5
ewp2YXIgX2I9ZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07CnZhciBfYz1uYXZpZ2F0
b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7CmlmKChuYXZpZ2F0b3IuYXBwTmFt
ZS5pbmRleE9mKCJOZXRzY2FwZSIpIT0tMXx8X2MuaW5kZXhPZigiZmlyZWZveCIp
IT0tMXx8X2MuaW5kZXhPZigic2FmYXJpIikhPS0xKSYmdGhpcy5pc1B0Q3NzKF9i
LmNzc1J1bGVzWzBdLnN0eWxlLmNvbnRlbnQpKXsKX2IuY3NzUnVsZXNbMF0uc3R5
bGUuY29udGVudD0idXJsKCIrdGhpcy50dXJsKyIpOyI7CnJldHVybjsKfWVsc2V7
CmlmKHRoaXMuaXNQdENzcyhfYi5jc3NSdWxlc1swXS5zdHlsZS5nZXRQcm9wZXJ0
eVZhbHVlKCJjb250ZW50IikpKXsKaWYobmF2aWdhdG9yLmFwcE5hbWUuaW5kZXhP
ZigiT3BlcmEiKSE9LTEpewpfYi5kZWxldGVSdWxlKDApOwp9ZWxzZXsKaWYobmF2
aWdhdG9yLmFwcE5hbWUuaW5kZXhPZigiS29ucXVlcm9yIik9PS0xKXsKX2IuY3Nz
UnVsZXNbMF0uc3R5bGUuc2V0UHJvcGVydHkoImNvbnRlbnQiLCJ1cmwoIit0aGlz
LnR1cmwrIikiLG51bGwpOwp9Cn0KcmV0dXJuOwp9Cn0KfQpjYXRjaChlcnIpewp9
Cn0KdHJ5ewp2YXIgX2M9bmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgp
OwppZigobmF2aWdhdG9yLmFwcE5hbWUuaW5kZXhPZigiTmV0c2NhcGUiKSE9LTF8
fF9jLmluZGV4T2YoImZpcmVmb3giKSE9LTF8fF9jLmluZGV4T2YoInNhZmFyaSIp
IT0tMSkpewp2YXIgcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwpz
LnR5cGU9InRleHQvY3NzIjsKcy5yZWw9InN0eWxlc2hlZXQiOwpzLm1lZGlhPSJw
cmludCI7CnMuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoImJv
ZHk6YmVmb3JlIHtjb250ZW50OiB1cmwoIit0aGlzLnR1cmwrIil9OyIpKTsKZG9j
dW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGls
ZChzKTsKfQp9CmNhdGNoKGVycil7Cn0KfTsKdGhpcy5nZXRGREltYWdlPWZ1bmN0
aW9uKCl7CmlmKHRoaXMuY2xudC5nZXRSVHlwZSgpPT0icyIpewp2YXIgaHM9ZG9j
dW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFk
Iik7CnZhciBoPW51bGw7CmlmKGhzJiZocy5sZW5ndGg+MCl7Cmg9aHNbMF07CnZh
ciBfMTA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7Cl8xMC50eXBl
PSJ0ZXh0L2phdmFzY3JpcHQiOwpfMTAuc3JjPXRoaXMudHVybCsiJnJuZD0iK01h
dGgucmFuZG9tKCk7Cn0KfWVsc2V7CnZhciBfMTE9bmV3IEltYWdlKCk7Cl8xMS5z
cmM9dGhpcy50dXJsOwp9Cn07Cn0KdmFyIGZvcm1hdER5bmFtaWNzUFQ7CmZ1bmN0
aW9uIGxvYWRIYW5kbGVyKCl7CmZvcm1hdER5bmFtaWNzUFQ9bmV3IEZvcm1hdER5
bmFtaWNzUFQobmV3IEZEQ1BDbGllbnQoKSk7CmlmKG5hdmlnYXRvci5hcHBOYW1l
LmluZGV4T2YoIk1pY3Jvc29mdCIpIT0tMSYmcGFyc2VJbnQobmF2aWdhdG9yLmFw
cFZlcnNpb24pPj00JiZuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoIldpbmRv
d3MiKSE9LTEpewp3aW5kb3cuYXR0YWNoRXZlbnQoIm9uYmVmb3JlcHJpbnQiLGZ1
bmN0aW9uKCl7CmZvcm1hdER5bmFtaWNzUFQuZ2V0RkRJbWFnZSgpOwp9KTsKfWVs
c2V7CmZvcm1hdER5bmFtaWNzUFQuY2hhbmdlUHJpbnRTdHlsZVNoZWV0KCk7Cn0K
fQppZih0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIhPSJ1bmRlZmluZWQi
KXsKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLGxvYWRIYW5kbGVyLGZh
bHNlKTsKfWVsc2V7CmlmKHR5cGVvZiB3aW5kb3cuYXR0YWNoRXZlbnQhPSJ1bmRl
ZmluZWQiKXsKd2luZG93LmF0dGFjaEV2ZW50KCJvbmxvYWQiLGxvYWRIYW5kbGVy
KTsKfWVsc2V7CmlmKHdpbmRvdy5vbmxvYWQhPW51bGwpewp2YXIgb2xkT25sb2Fk
PXdpbmRvdy5vbmxvYWQ7CndpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oZSl7Cm9sZE9u
bG9hZChlKTsKd2luZG93W2xvYWRIYW5kbGVyXSgpOwp9Owp9ZWxzZXsKd2luZG93
Lm9ubG9hZD1sb2FkSGFuZGxlcjsKfQp9Cn0KCg==

------------DJYBs1M1oA7PAaPnDmkJsW--
